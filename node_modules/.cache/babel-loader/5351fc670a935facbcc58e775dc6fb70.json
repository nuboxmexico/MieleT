{"ast":null,"code":"import { useRef, useCallback, useEffect } from 'react';\nimport getHeight from 'dom-lib/getHeight';\nimport addStyle from 'dom-lib/addStyle';\nimport removeStyle from 'dom-lib/removeStyle';\nimport on from 'dom-lib/on';\nimport toggleClass from './toggleClass';\nimport isNumberOrTrue from './isNumberOrTrue';\nimport useUpdateEffect from './useUpdateEffect';\n\nvar useAffix = function useAffix(props) {\n  var tableHeight = props.tableHeight,\n      contentHeight = props.contentHeight,\n      affixHorizontalScrollbar = props.affixHorizontalScrollbar,\n      affixHeader = props.affixHeader,\n      tableOffset = props.tableOffset,\n      headerOffset = props.headerOffset,\n      headerHeight = props.headerHeight,\n      scrollbarXRef = props.scrollbarXRef,\n      affixHeaderWrapperRef = props.affixHeaderWrapperRef;\n  var scrollListener = useRef();\n  var handleAffixHorizontalScrollbar = useCallback(function () {\n    var _scrollbarXRef$curren;\n\n    var scrollY = window.scrollY || window.pageYOffset;\n    var windowHeight = getHeight(window);\n    var height = tableHeight();\n    var bottom = typeof affixHorizontalScrollbar === 'number' ? affixHorizontalScrollbar : 0;\n    var fixedScrollbar = scrollY + windowHeight < height + (tableOffset.current.top + bottom) && scrollY + windowHeight - headerHeight > tableOffset.current.top + bottom;\n\n    if (scrollbarXRef !== null && scrollbarXRef !== void 0 && (_scrollbarXRef$curren = scrollbarXRef.current) !== null && _scrollbarXRef$curren !== void 0 && _scrollbarXRef$curren.root) {\n      toggleClass(scrollbarXRef.current.root, 'fixed', fixedScrollbar);\n\n      if (fixedScrollbar) {\n        addStyle(scrollbarXRef.current.root, 'bottom', bottom + \"px\");\n      } else {\n        removeStyle(scrollbarXRef.current.root, 'bottom');\n      }\n    }\n  }, [affixHorizontalScrollbar, headerHeight, scrollbarXRef, tableHeight, tableOffset]);\n  var handleAffixTableHeader = useCallback(function () {\n    var top = typeof affixHeader === 'number' ? affixHeader : 0;\n    var scrollY = window.scrollY || window.pageYOffset;\n    var fixedHeader = scrollY - (headerOffset.current.top - top) >= 0 && scrollY < headerOffset.current.top - top + contentHeight.current;\n\n    if (affixHeaderWrapperRef.current) {\n      toggleClass(affixHeaderWrapperRef.current, 'fixed', fixedHeader);\n    }\n  }, [affixHeader, affixHeaderWrapperRef, contentHeight, headerOffset]);\n  var handleWindowScroll = useCallback(function () {\n    if (isNumberOrTrue(affixHeader)) {\n      handleAffixTableHeader();\n    }\n\n    if (isNumberOrTrue(affixHorizontalScrollbar)) {\n      handleAffixHorizontalScrollbar();\n    }\n  }, [affixHeader, affixHorizontalScrollbar, handleAffixTableHeader, handleAffixHorizontalScrollbar]);\n  /**\n   * Update the position of the fixed element after the height of the table changes.\n   * fix: https://github.com/rsuite/rsuite/issues/1716\n   */\n\n  useUpdateEffect(handleWindowScroll, [tableHeight]);\n  useEffect(function () {\n    if (isNumberOrTrue(affixHeader) || isNumberOrTrue(affixHorizontalScrollbar)) {\n      scrollListener.current = on(window, 'scroll', handleWindowScroll);\n    }\n\n    return function () {\n      var _scrollListener$curre;\n\n      (_scrollListener$curre = scrollListener.current) === null || _scrollListener$curre === void 0 ? void 0 : _scrollListener$curre.off();\n    }; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n};\n\nexport default useAffix;","map":null,"metadata":{},"sourceType":"module"}