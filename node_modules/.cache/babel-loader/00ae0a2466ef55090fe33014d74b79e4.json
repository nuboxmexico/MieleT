{"ast":null,"code":"var _jsxFileName = \"/usr/src/app/javascript/components/customers/EditAdditionalAddress.jsx\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nimport React, { useState, useEffect } from 'react';\nimport ReactDOM from 'react-dom';\nimport axios from 'axios';\nimport { Link } from 'react-router-dom';\nimport { Redirect } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { createStructuredSelector } from \"reselect\";\nimport { flash_alert } from 'components/App';\nimport ShowCustomer from \"components/customers/ShowCustomer\";\nimport AdditionalAddressForm from \"components/customers/AdditionalAddressForm\";\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport { useTranslation } from 'react-i18next';\n\nfunction EditAdditionalAddress(props) {\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t; // Customer Info\n\n\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      customerNames = _useState2[0],\n      setCustomerFirstname = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      customerLastname = _useState4[0],\n      setCustomerLastname = _useState4[1];\n\n  var _useState5 = useState(\"\"),\n      _useState6 = _slicedToArray(_useState5, 2),\n      customerSurname = _useState6[0],\n      setCustomerSurname = _useState6[1]; // Additional AddressInf\n\n\n  var _useState7 = useState(\"\"),\n      _useState8 = _slicedToArray(_useState7, 2),\n      addId = _useState8[0],\n      setAddId = _useState8[1];\n\n  var _useState9 = useState(\"\"),\n      _useState10 = _slicedToArray(_useState9, 2),\n      customer_id = _useState10[0],\n      setCustomerId = _useState10[1];\n\n  var _useState11 = useState(\"\"),\n      _useState12 = _slicedToArray(_useState11, 2),\n      name = _useState12[0],\n      setName = _useState12[1];\n\n  var _useState13 = useState(\"\"),\n      _useState14 = _slicedToArray(_useState13, 2),\n      zipcode = _useState14[0],\n      setZipcode = _useState14[1];\n\n  var _useState15 = useState(\"\"),\n      _useState16 = _slicedToArray(_useState15, 2),\n      state = _useState16[0],\n      setState = _useState16[1];\n\n  var _useState17 = useState(\"\"),\n      _useState18 = _slicedToArray(_useState17, 2),\n      delegation = _useState18[0],\n      setDelegation = _useState18[1];\n\n  var _useState19 = useState(\"\"),\n      _useState20 = _slicedToArray(_useState19, 2),\n      colony = _useState20[0],\n      setColony = _useState20[1];\n\n  var _useState21 = useState(\"\"),\n      _useState22 = _slicedToArray(_useState21, 2),\n      street_type = _useState22[0],\n      setStreettype = _useState22[1];\n\n  var _useState23 = useState(\"\"),\n      _useState24 = _slicedToArray(_useState23, 2),\n      street_name = _useState24[0],\n      setStreetName = _useState24[1];\n\n  var _useState25 = useState(\"\"),\n      _useState26 = _slicedToArray(_useState25, 2),\n      ext_number = _useState26[0],\n      setExtNumber = _useState26[1];\n\n  var _useState27 = useState(\"\"),\n      _useState28 = _slicedToArray(_useState27, 2),\n      int_number = _useState28[0],\n      setIntNumber = _useState28[1];\n\n  var _useState29 = useState(\"MX\"),\n      _useState30 = _slicedToArray(_useState29, 2),\n      country = _useState30[0],\n      setCountry = _useState30[1];\n\n  var _useState31 = useState(\"person_p\"),\n      _useState32 = _slicedToArray(_useState31, 2),\n      selectedPerson = _useState32[0],\n      setSelectedPerson = _useState32[1];\n\n  var _useState33 = useState(false),\n      _useState34 = _slicedToArray(_useState33, 2),\n      redirect = _useState34[0],\n      setRedirect = _useState34[1]; // administrative_demarcations\n\n\n  var _useState35 = useState([{\n    value: \"\",\n    label: \"\"\n  }]),\n      _useState36 = _slicedToArray(_useState35, 2),\n      administrativeDemarcations = _useState36[0],\n      setAdministrativeDemarcations = _useState36[1];\n\n  var _useState37 = useState({\n    value: \"\",\n    label: \"\"\n  }),\n      _useState38 = _slicedToArray(_useState37, 2),\n      administrativeDemarcationsValue = _useState38[0],\n      setAdministrativeDemarcationsValue = _useState38[1]; // colonies\n\n\n  var _useState39 = useState([{\n    value: \"\",\n    label: \"\"\n  }]),\n      _useState40 = _slicedToArray(_useState39, 2),\n      colonies = _useState40[0],\n      setColonies = _useState40[1];\n\n  var _useState41 = useState({\n    value: \"\",\n    label: \"\"\n  }),\n      _useState42 = _slicedToArray(_useState41, 2),\n      coloniesValue = _useState42[0],\n      setColoniesValue = _useState42[1];\n\n  var _useState43 = useState(false),\n      _useState44 = _slicedToArray(_useState43, 2),\n      zipcodeParentRequired = _useState44[0],\n      setZipcodeParentRequired = _useState44[1];\n\n  useEffect(function () {\n    function fetchData() {\n      return _fetchData.apply(this, arguments);\n    }\n\n    function _fetchData() {\n      _fetchData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var userId, id_ad;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                userId = props.match.params.id;\n                id_ad = props.match.params.id_ad;\n                return _context.abrupt(\"return\", fetch(\"/api/v1/customers/\".concat(userId)).then(function (response) {\n                  return response.json();\n                }).then(function (json) {\n                  setCustomerId(json.data.id);\n                  setCustomerFirstname(json.data.names);\n                  setCustomerLastname(json.data.lastname);\n                  setCustomerSurname(json.data.surname);\n                  setSelectedPerson(json.data.person_type);\n\n                  if (json.data.country != null) {\n                    setCountry(json.data.country.iso);\n                  }\n\n                  var current_additional_address = json.data.additional_addresses.find(function (additional) {\n                    return String(additional.id) === id_ad;\n                  });\n\n                  if (current_additional_address !== undefined) {\n                    setAddId(current_additional_address.id);\n                    setCustomerId(current_additional_address.customer_id);\n                    setName(current_additional_address.name);\n                    setZipcode(current_additional_address.zipcode);\n                    setState(current_additional_address.state);\n                    setDelegation(current_additional_address.delegation);\n                    setStreettype(current_additional_address.street_type);\n                    setStreetName(current_additional_address.street_name);\n                    setExtNumber(current_additional_address.ext_number);\n                    setIntNumber(current_additional_address.int_number);\n                    fetchadministrativeDemarcationsData(json.data.country.iso, current_additional_address.state, current_additional_address.zipcode, current_additional_address.colony);\n                  }\n                })[\"catch\"](function (error) {\n                  return console.log(error);\n                }));\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n      return _fetchData.apply(this, arguments);\n    }\n\n    fetchData();\n  }, []);\n\n  function fetchadministrativeDemarcationsData(country_code, state_code, zipcode_params, colony_code) {\n    var zipcode_t = zipcode_params != \"\" && zipcode_params != \"null\" ? zipcode_params : \"\";\n    return fetch(\"/api/v1/administrative_demarcations?keywords=\".concat(country_code, \"&zipcode=\").concat(zipcode_t)).then(function (response) {\n      return response.json();\n    }).then(function (json) {\n      console.log(json);\n      var new_admin_data = json.data.map(function (administrativeDemarcation) {\n        var place_name = administrativeDemarcation.admin3_admin1;\n\n        if (administrativeDemarcation.country_code != \"CL\") {\n          place_name = administrativeDemarcation.admin_name_3 != null ? administrativeDemarcation.admin_name_3 : administrativeDemarcation.admin_name_1;\n\n          if (zipcode_params != \"\") {\n            setState(administrativeDemarcation.id);\n            setAdministrativeDemarcationsValue({\n              value: administrativeDemarcation.id,\n              label: place_name\n            });\n            setDelegation(administrativeDemarcation.admin_name_2);\n            setColony(administrativeDemarcation.place_name);\n          }\n        }\n\n        if (state_code == administrativeDemarcation.id) {\n          setAdministrativeDemarcationsValue({\n            value: administrativeDemarcation.id,\n            label: place_name\n          });\n        }\n\n        if (colony_code == administrativeDemarcation.place_name) {\n          setColoniesValue({\n            value: administrativeDemarcation.id,\n            label: administrativeDemarcation.place_name\n          });\n        }\n\n        return {\n          value: administrativeDemarcation.id,\n          label: place_name\n        };\n      });\n      var unique_new_admin_data = new_admin_data.filter(function (v, i, a) {\n        return a.findIndex(function (t) {\n          return t.label === v.label;\n        }) === i;\n      });\n      setAdministrativeDemarcations(unique_new_admin_data);\n\n      if (country_code != \"CL\") {\n        var colonies_data = json.data.map(function (administrativeDemarcation) {\n          var place_name = administrativeDemarcation.place_name;\n\n          if (colony_code == administrativeDemarcation.place_name) {\n            setColoniesValue({\n              value: administrativeDemarcation.id,\n              label: place_name\n            });\n          }\n\n          return {\n            value: administrativeDemarcation.id,\n            label: place_name\n          };\n        });\n\n        if (zipcode_params != \"\") {\n          setColonies(colonies_data);\n        }\n      }\n    })[\"catch\"](function (error) {\n      return console.log(error);\n    });\n  }\n\n  function handleSubmit(event) {\n    event.preventDefault();\n    var body = new FormData();\n    body.set('id', addId);\n    body.set('customer_id', customer_id);\n    body.set('name', name);\n    body.set('zipcode', zipcode);\n    body.set('state', state);\n    body.set('delegation', delegation);\n    body.set('colony', colony);\n    body.set('street_type', street_type);\n    body.set('street_name', street_name);\n    body.set('ext_number', ext_number);\n    body.set('int_number', int_number);\n    body.set('country', country);\n    return axios.patch(\"/api/v1/customersAdditionalAddress/\".concat(addId), body, {\n      headers: props.headers\n    }).then(function (response) {\n      flash_alert(t('globalEditForm.flashAlert.created'), t('globalEditForm.flashAlert.createdSuccessfully'), \"success\");\n      setRedirect(true);\n    })[\"catch\"](function (e) {\n      console.log(e.response.data);\n\n      if (e.response.data) {\n        for (var key in e.response.data) {\n          flash_alert(t('globalEditForm.flashAlert.error'), e.response.data[key], \"danger\");\n        }\n      }\n    });\n  }\n\n  var redirect_check = [];\n\n  if (redirect) {\n    redirect_check.push( /*#__PURE__*/React.createElement(Redirect, {\n      key: \"redirect-to-customers\",\n      to: \"/customers/\".concat(customer_id, \"/show\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(ShowCustomer, {\n      setLoading: props.setLoading,\n      headers: props.headers,\n      match: props.match,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 80\n      }\n    })));\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 5\n    }\n  }, redirect_check, /*#__PURE__*/React.createElement(Paper, {\n    className: \"custom-paper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Link, {\n    className: \"mdl-navigation__link  back-link customers-edit-link\",\n    to: \"/customers/\".concat(customer_id, \"/show\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"i\", {\n    className: \"material-icons\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 23\n    }\n  }, \"keyboard_arrow_left\"), \" \", t('globalText.back')), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 27\n    }\n  }, t('globalEditForm.title#5'), \" \", customerNames, \" \", customerLastname, \" \", customerSurname))), /*#__PURE__*/React.createElement(AdditionalAddressForm, {\n    customer_id: customer_id,\n    name: name,\n    zipcode: zipcode,\n    state: state,\n    delegation: delegation,\n    colony: colony,\n    street_type: street_type,\n    street_name: street_name,\n    ext_number: ext_number,\n    int_number: int_number,\n    country: country,\n    administrativeDemarcations: administrativeDemarcations,\n    administrativeDemarcationsValue: administrativeDemarcationsValue,\n    selectedPerson: selectedPerson,\n    setCustomerId: setCustomerId,\n    setName: setName,\n    setZipcode: setZipcode,\n    setState: setState,\n    setDelegation: setDelegation,\n    setColony: setColony,\n    setStreettype: setStreettype,\n    setStreetName: setStreetName,\n    setExtNumber: setExtNumber,\n    setIntNumber: setIntNumber,\n    setCountry: setCountry,\n    setAdministrativeDemarcations: setAdministrativeDemarcations,\n    setAdministrativeDemarcationsValue: setAdministrativeDemarcationsValue,\n    fetchadministrativeDemarcationsData: fetchadministrativeDemarcationsData,\n    setSelectedPerson: setSelectedPerson,\n    handleSubmit: handleSubmit // colonies\n    ,\n    colonies: colonies,\n    setColonies: setColonies,\n    coloniesValue: coloniesValue,\n    setColoniesValue: setColoniesValue,\n    zipcodeParentRequired: zipcodeParentRequired,\n    setZipcodeParentRequired: setZipcodeParentRequired,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 17\n    }\n  })));\n}\n\nvar structuredSelector = createStructuredSelector({});\nvar mapDispatchToProps = {};\nexport default connect(structuredSelector, mapDispatchToProps)(EditAdditionalAddress);","map":{"version":3,"sources":["/usr/src/app/javascript/components/customers/EditAdditionalAddress.jsx"],"names":["React","useState","useEffect","ReactDOM","axios","Link","Redirect","connect","createStructuredSelector","flash_alert","ShowCustomer","AdditionalAddressForm","Paper","Grid","useTranslation","EditAdditionalAddress","props","t","customerNames","setCustomerFirstname","customerLastname","setCustomerLastname","customerSurname","setCustomerSurname","addId","setAddId","customer_id","setCustomerId","name","setName","zipcode","setZipcode","state","setState","delegation","setDelegation","colony","setColony","street_type","setStreettype","street_name","setStreetName","ext_number","setExtNumber","int_number","setIntNumber","country","setCountry","selectedPerson","setSelectedPerson","redirect","setRedirect","value","label","administrativeDemarcations","setAdministrativeDemarcations","administrativeDemarcationsValue","setAdministrativeDemarcationsValue","colonies","setColonies","coloniesValue","setColoniesValue","zipcodeParentRequired","setZipcodeParentRequired","fetchData","userId","match","params","id","id_ad","fetch","then","response","json","data","names","lastname","surname","person_type","iso","current_additional_address","additional_addresses","find","additional","String","undefined","fetchadministrativeDemarcationsData","error","console","log","country_code","state_code","zipcode_params","colony_code","zipcode_t","new_admin_data","map","administrativeDemarcation","place_name","admin3_admin1","admin_name_3","admin_name_1","admin_name_2","unique_new_admin_data","filter","v","i","a","findIndex","colonies_data","handleSubmit","event","preventDefault","body","FormData","set","patch","headers","e","key","redirect_check","push","setLoading","structuredSelector","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport ReactDOM from 'react-dom'\nimport axios from 'axios';\nimport { Link } from 'react-router-dom'\nimport { Redirect } from \"react-router-dom\";\nimport { connect } from \"react-redux\"\nimport { createStructuredSelector } from \"reselect\"\nimport { flash_alert } from 'components/App';\nimport ShowCustomer from \"components/customers/ShowCustomer\";\nimport AdditionalAddressForm from \"components/customers/AdditionalAddressForm\";\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport {useTranslation} from 'react-i18next';\n\nfunction EditAdditionalAddress(props){\n    const {t} = useTranslation();\n\n    // Customer Info\n    const [customerNames, setCustomerFirstname] = useState(\"\");\n    const [customerLastname, setCustomerLastname] = useState(\"\");\n    const [customerSurname, setCustomerSurname] = useState(\"\");\n\n    // Additional AddressInf\n    const [addId, setAddId] = useState(\"\");\n    const [customer_id, setCustomerId] = useState(\"\");\n    const [name, setName] = useState(\"\");\n    const [zipcode, setZipcode] = useState(\"\");\n    const [state, setState] = useState(\"\");\n    const [delegation, setDelegation] = useState(\"\");\n    const [colony, setColony] = useState(\"\");\n    const [street_type, setStreettype] = useState(\"\");\n    const [street_name, setStreetName] = useState(\"\");\n    const [ext_number, setExtNumber] = useState(\"\");\n    const [int_number, setIntNumber] = useState(\"\");\n    const [country, setCountry] = useState(\"MX\");\n\t  const [selectedPerson, setSelectedPerson] = useState(\"person_p\");\n    const [redirect, setRedirect] = useState(false);\n    \n      // administrative_demarcations\n\tconst [administrativeDemarcations, setAdministrativeDemarcations] = useState([{value: \"\", label: \"\"}]);\n\tconst [administrativeDemarcationsValue, setAdministrativeDemarcationsValue] = useState({value: \"\", label: \"\"});\n    \n    // colonies\n\tconst [colonies, setColonies] = useState([{value: \"\", label: \"\"}]);\n\tconst [coloniesValue, setColoniesValue] = useState({value: \"\", label: \"\"});\n    const [zipcodeParentRequired, setZipcodeParentRequired] = useState(false);\n    \n\n    useEffect(() => {\n        async function fetchData() {\n            let userId = props.match.params.id;\n            let id_ad =  props.match.params.id_ad;\n                return fetch(`/api/v1/customers/${userId}`)\n                    .then(response => response.json())\n                    .then(json => {\n                        setCustomerId(json.data.id)\n                        setCustomerFirstname(json.data.names)\n                        setCustomerLastname(json.data.lastname)\n                        setCustomerSurname(json.data.surname)\n                        setSelectedPerson(json.data.person_type)\n                        if(json.data.country != null){\n                            setCountry(json.data.country.iso)\n                        }\n                        var current_additional_address = json.data.additional_addresses.find(additional => String(additional.id) === id_ad);\n                        if (current_additional_address !== undefined){\n                            setAddId(current_additional_address.id)\n                            setCustomerId(current_additional_address.customer_id)\n                            setName(current_additional_address.name)\n                            setZipcode(current_additional_address.zipcode)\n                            setState(current_additional_address.state)\n                            setDelegation(current_additional_address.delegation)\n                            setStreettype(current_additional_address.street_type)\n                            setStreetName(current_additional_address.street_name)\n                            setExtNumber(current_additional_address.ext_number)\n                            setIntNumber(current_additional_address.int_number)\n                            fetchadministrativeDemarcationsData(json.data.country.iso, current_additional_address.state, current_additional_address.zipcode, current_additional_address.colony)\n                        }\n                    })\n                    .catch(error => console.log(error));\n            }\n            fetchData();\n\n            \n    }, []);\n\n\n    function fetchadministrativeDemarcationsData(country_code, state_code, zipcode_params,colony_code){\n\t\tvar zipcode_t = ((zipcode_params != \"\" && zipcode_params != \"null\") ? zipcode_params : \"\")\n\t\treturn fetch(`/api/v1/administrative_demarcations?keywords=${country_code}&zipcode=${zipcode_t}`)\n\t\t  .then(response => response.json())\n\t\t  .then(json => {\n\t\t\tconsole.log(json);\n\t\t\tvar new_admin_data = json.data.map(\n\t\t\t  function(administrativeDemarcation) {\n\t\t\t\tvar place_name = administrativeDemarcation.admin3_admin1\n\t\t\t\tif (administrativeDemarcation.country_code != \"CL\"){\n\t\t\t\t  place_name = (administrativeDemarcation.admin_name_3 != null ? administrativeDemarcation.admin_name_3 : administrativeDemarcation.admin_name_1)\n              \n\t\t\t\t  if (zipcode_params != \"\"){\n\t\t\t\t\tsetState(administrativeDemarcation.id)\n\t\t\t\t\tsetAdministrativeDemarcationsValue({ value: administrativeDemarcation.id, label: place_name })\n\t\t\t\t\tsetDelegation(administrativeDemarcation.admin_name_2)\n\t\t\t\t\tsetColony(administrativeDemarcation.place_name)\n\t\t\t\t  }  \n\t\t\t\t}\n\t\t\t\tif(state_code == administrativeDemarcation.id){\n\t\t\t\t  setAdministrativeDemarcationsValue({ value: administrativeDemarcation.id, label: place_name })\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif(colony_code == administrativeDemarcation.place_name){\n\t\t\t\t\tsetColoniesValue({ value: administrativeDemarcation.id, label: administrativeDemarcation.place_name })\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn { value: administrativeDemarcation.id, label: place_name };\n\t\t\t  }\n\t\t\t);\n\t\t\tconst unique_new_admin_data = new_admin_data.filter((v,i,a)=>a.findIndex(t=>(t.label === v.label))===i)\n\t\t\t\n\t\t\tsetAdministrativeDemarcations(unique_new_admin_data)\n\t\t\t\n\t\t\tif (country_code != \"CL\"){\n\t\t\t  var colonies_data = json.data.map(\n\t\t\t\tfunction(administrativeDemarcation) {\n\t\t\t\t  var place_name = administrativeDemarcation.place_name\n\t\n\t\t\t\t  if(colony_code == administrativeDemarcation.place_name){\n\t\t\t\t\tsetColoniesValue({ value: administrativeDemarcation.id, label: place_name })\n\t\t\t\t  }\n\t\t\t\t  return { value: administrativeDemarcation.id, label: place_name };\n\t\t\t\t}\n\t\t\t  );\n\t\t\t  if (zipcode_params != \"\"){\n\t\t\t\tsetColonies(colonies_data);\n\t\t\t  }\n\t\t\t}\n\t\t  })\n\t\t  .catch(error => console.log(error));\n    }\n\n    function handleSubmit(event) {\n        event.preventDefault();\n        var body = new FormData();\n        body.set('id',addId);\n        body.set('customer_id',customer_id);\n        body.set('name',name);\n        body.set('zipcode',zipcode);\n        body.set('state',state);\n        body.set('delegation',delegation);\n        body.set('colony',colony);\n        body.set('street_type',street_type);\n        body.set('street_name',street_name);\n        body.set('ext_number',ext_number);\n        body.set('int_number',int_number);\n        body.set('country',country);\n        return axios.patch(`/api/v1/customersAdditionalAddress/${addId}`, body, { headers: props.headers})\n            .then(response => {\n                flash_alert(t('globalEditForm.flashAlert.created'), t('globalEditForm.flashAlert.createdSuccessfully'), \"success\")\n                setRedirect(true);\n            })\n        .catch(e => {\n            console.log(e.response.data);\n            if(e.response.data){\n                for (var key in e.response.data) {\n                    flash_alert(t('globalEditForm.flashAlert.error'), e.response.data[key], \"danger\")\n                }\n            }\n        });\n    }\n\n    let redirect_check = []\n\tif (redirect){\n\t\tredirect_check.push(\n\t\t\t<Redirect key=\"redirect-to-customers\" to={`/customers/${customer_id}/show`}><ShowCustomer setLoading={props.setLoading} headers={props.headers} match={props.match} /></Redirect>\n\t\t);\n\t}\n\n  \treturn (\n  \t\t<React.Fragment>\n            {redirect_check}\n            \n            <Paper className=\"custom-paper\">\n                <Grid container spacing={3}>\n                    <Link className=\"mdl-navigation__link  back-link customers-edit-link\" to={`/customers/${customer_id}/show`}>\n                      <i className=\"material-icons\">keyboard_arrow_left</i> {t('globalText.back')}\n                    </Link>\n                    <Grid item xs={12}>\n                          <h1>{t('globalEditForm.title#5')} {customerNames} {customerLastname} {customerSurname}</h1>\n                    </Grid>\n                </Grid>\n                <AdditionalAddressForm\n                    customer_id={customer_id}\n                    name={name}\n                    zipcode={zipcode}\n                    state={state}\n                    delegation={delegation}\n                    colony={colony}\n                    street_type={street_type}\n                    street_name={street_name}\n                    ext_number={ext_number}\n                    int_number={int_number}\n                    country={country}\n                    administrativeDemarcations={administrativeDemarcations}\n                    administrativeDemarcationsValue={administrativeDemarcationsValue}\n                    selectedPerson={selectedPerson}\n                    setCustomerId={setCustomerId}\n                    setName={setName}\n                    setZipcode={setZipcode}\n                    setState={setState}\n                    setDelegation={setDelegation}\n                    setColony={setColony}\n                    setStreettype={setStreettype}\n                    setStreetName={setStreetName}\n                    setExtNumber={setExtNumber}\n                    setIntNumber={setIntNumber}\n                    setCountry={setCountry}\n                    setAdministrativeDemarcations={setAdministrativeDemarcations}\n                    setAdministrativeDemarcationsValue={setAdministrativeDemarcationsValue}\n                    fetchadministrativeDemarcationsData={fetchadministrativeDemarcationsData}\n                    setSelectedPerson={setSelectedPerson}\n                    handleSubmit={handleSubmit}\n\n                    // colonies\n                    colonies={colonies}\n                    setColonies={setColonies}\n                    coloniesValue={coloniesValue}\n                    setColoniesValue={setColoniesValue}\n                    \n                    zipcodeParentRequired={zipcodeParentRequired}\n                    setZipcodeParentRequired={setZipcodeParentRequired}\n                />\n            </Paper>\n\t\t</React.Fragment>\n\t);\n  \n}\n\nconst structuredSelector = createStructuredSelector({});\nconst mapDispatchToProps = {};\nexport default connect(structuredSelector, mapDispatchToProps)(EditAdditionalAddress)\n"]},"metadata":{},"sourceType":"module"}