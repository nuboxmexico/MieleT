{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nimport axios from 'axios';\nimport React, { useState, useEffect } from 'react';\n\nfunction useCountries() {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      data = _useState2[0],\n      setData = _useState2[1];\n\n  var _useState3 = useState(true),\n      _useState4 = _slicedToArray(_useState3, 2),\n      loading = _useState4[0],\n      setLoading = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      error = _useState6[0],\n      setError = _useState6[1];\n\n  var _useState7 = useState([]),\n      _useState8 = _slicedToArray(_useState7, 2),\n      isos = _useState8[0],\n      setIsos = _useState8[1];\n\n  useEffect(function () {\n    function getAllCountries() {\n      return _getAllCountries.apply(this, arguments);\n    }\n\n    function _getAllCountries() {\n      _getAllCountries = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var _yield$axios$get, _data;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return axios.get('/api/v1/countries');\n\n              case 3:\n                _yield$axios$get = _context.sent;\n                _data = _yield$axios$get.data;\n                setData(_data);\n                setIsos(_data.map(function (country) {\n                  return country.iso;\n                }));\n                setLoading(false);\n                _context.next = 13;\n                break;\n\n              case 10:\n                _context.prev = 10;\n                _context.t0 = _context[\"catch\"](0);\n                setError(_context.t0);\n\n              case 13:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[0, 10]]);\n      }));\n      return _getAllCountries.apply(this, arguments);\n    }\n\n    getAllCountries();\n  }, []);\n  return {\n    data: data,\n    loading: loading,\n    error: error,\n    isos: isos\n  };\n}\n\nexport default useCountries;","map":{"version":3,"sources":["/usr/src/app/javascript/hooks/useCountries.jsx"],"names":["axios","React","useState","useEffect","useCountries","data","setData","loading","setLoading","error","setError","isos","setIsos","getAllCountries","get","map","country","iso"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;AAEA,SAASC,YAAT,GAAwB;AAEtB,kBAAwBF,QAAQ,CAAC,EAAD,CAAhC;AAAA;AAAA,MAAOG,IAAP;AAAA,MAAaC,OAAb;;AACA,mBAA8BJ,QAAQ,CAAC,IAAD,CAAtC;AAAA;AAAA,MAAOK,OAAP;AAAA,MAAgBC,UAAhB;;AACA,mBAA0BN,QAAQ,CAAC,EAAD,CAAlC;AAAA;AAAA,MAAOO,KAAP;AAAA,MAAcC,QAAd;;AACA,mBAAwBR,QAAQ,CAAC,EAAD,CAAhC;AAAA;AAAA,MAAOS,IAAP;AAAA,MAAaC,OAAb;;AAGAT,EAAAA,SAAS,CAAC,YAAM;AAAA,aACCU,eADD;AAAA;AAAA;;AAAA;AAAA,kFACd;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAE2Bb,KAAK,CAACc,GAAN,CAAU,mBAAV,CAF3B;;AAAA;AAAA;AAEYT,gBAAAA,KAFZ,oBAEYA,IAFZ;AAGIC,gBAAAA,OAAO,CAACD,KAAD,CAAP;AACAO,gBAAAA,OAAO,CAACP,KAAI,CAACU,GAAL,CAAS,UAAAC,OAAO;AAAA,yBAAIA,OAAO,CAACC,GAAZ;AAAA,iBAAhB,CAAD,CAAP;AACAT,gBAAAA,UAAU,CAAC,KAAD,CAAV;AALJ;AAAA;;AAAA;AAAA;AAAA;AAOIE,gBAAAA,QAAQ,aAAR;;AAPJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADc;AAAA;AAAA;;AAYdG,IAAAA,eAAe;AAChB,GAbQ,EAaN,EAbM,CAAT;AAeA,SAAO;AACLR,IAAAA,IAAI,EAAJA,IADK;AAELE,IAAAA,OAAO,EAAPA,OAFK;AAGLE,IAAAA,KAAK,EAALA,KAHK;AAILE,IAAAA,IAAI,EAAJA;AAJK,GAAP;AAMD;;AAED,eAAeP,YAAf","sourcesContent":["import axios from 'axios'\nimport React, { useState, useEffect } from 'react';\n\nfunction useCountries() {\n\n  const [data, setData] = useState([])\n  const [loading, setLoading] = useState(true)\n  const [error, setError] = useState([])\n  const [isos, setIsos] = useState([])\n\n\n  useEffect(() => {\n    async function getAllCountries() {\n      try {\n        const { data } = await axios.get('/api/v1/countries')\n        setData(data)\n        setIsos(data.map(country => country.iso))\n        setLoading(false)\n      } catch (e) {\n        setError(e)\n      }\n    }\n\n    getAllCountries()\n  }, [])\n\n  return {\n    data,\n    loading,\n    error,\n    isos\n  }\n}\n\nexport default useCountries\n"]},"metadata":{},"sourceType":"module"}