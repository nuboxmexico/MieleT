{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/**\n * AutoNumeric.js v4.6.0\n * Â© 2009-2019 Robert J. Knothe, Alexandre Bonneau\n * Released under the MIT License.\n */\n!function (e, t) {\n  \"object\" == (typeof exports === \"undefined\" ? \"undefined\" : _typeof(exports)) && \"object\" == (typeof module === \"undefined\" ? \"undefined\" : _typeof(module)) ? module.exports = t() : \"function\" == typeof define && define.amd ? define([], t) : \"object\" == (typeof exports === \"undefined\" ? \"undefined\" : _typeof(exports)) ? exports.AutoNumeric = t() : e.AutoNumeric = t();\n}(this, function () {\n  return n = {}, a.m = i = [function (e, t, i) {\n    \"use strict\";\n\n    i.r(t);\n    var n = {\n      allowedTagList: [\"b\", \"caption\", \"cite\", \"code\", \"const\", \"dd\", \"del\", \"div\", \"dfn\", \"dt\", \"em\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\", \"input\", \"ins\", \"kdb\", \"label\", \"li\", \"option\", \"output\", \"p\", \"q\", \"s\", \"sample\", \"span\", \"strong\", \"td\", \"th\", \"u\"]\n    };\n    Object.freeze(n.allowedTagList), Object.defineProperty(n, \"allowedTagList\", {\n      configurable: !1,\n      writable: !1\n    }), n.keyCode = {\n      Backspace: 8,\n      Tab: 9,\n      Enter: 13,\n      Shift: 16,\n      Ctrl: 17,\n      Alt: 18,\n      Pause: 19,\n      CapsLock: 20,\n      Esc: 27,\n      Space: 32,\n      PageUp: 33,\n      PageDown: 34,\n      End: 35,\n      Home: 36,\n      LeftArrow: 37,\n      UpArrow: 38,\n      RightArrow: 39,\n      DownArrow: 40,\n      Insert: 45,\n      Delete: 46,\n      num0: 48,\n      num1: 49,\n      num2: 50,\n      num3: 51,\n      num4: 52,\n      num5: 53,\n      num6: 54,\n      num7: 55,\n      num8: 56,\n      num9: 57,\n      a: 65,\n      b: 66,\n      c: 67,\n      d: 68,\n      e: 69,\n      f: 70,\n      g: 71,\n      h: 72,\n      i: 73,\n      j: 74,\n      k: 75,\n      l: 76,\n      m: 77,\n      n: 78,\n      o: 79,\n      p: 80,\n      q: 81,\n      r: 82,\n      s: 83,\n      t: 84,\n      u: 85,\n      v: 86,\n      w: 87,\n      x: 88,\n      y: 89,\n      z: 90,\n      OSLeft: 91,\n      OSRight: 92,\n      ContextMenu: 93,\n      numpad0: 96,\n      numpad1: 97,\n      numpad2: 98,\n      numpad3: 99,\n      numpad4: 100,\n      numpad5: 101,\n      numpad6: 102,\n      numpad7: 103,\n      numpad8: 104,\n      numpad9: 105,\n      MultiplyNumpad: 106,\n      PlusNumpad: 107,\n      MinusNumpad: 109,\n      DotNumpad: 110,\n      SlashNumpad: 111,\n      F1: 112,\n      F2: 113,\n      F3: 114,\n      F4: 115,\n      F5: 116,\n      F6: 117,\n      F7: 118,\n      F8: 119,\n      F9: 120,\n      F10: 121,\n      F11: 122,\n      F12: 123,\n      NumLock: 144,\n      ScrollLock: 145,\n      HyphenFirefox: 173,\n      MyComputer: 182,\n      MyCalculator: 183,\n      Semicolon: 186,\n      Equal: 187,\n      Comma: 188,\n      Hyphen: 189,\n      Dot: 190,\n      Slash: 191,\n      Backquote: 192,\n      LeftBracket: 219,\n      Backslash: 220,\n      RightBracket: 221,\n      Quote: 222,\n      Command: 224,\n      AltGraph: 225,\n      AndroidDefault: 229\n    }, Object.freeze(n.keyCode), Object.defineProperty(n, \"keyCode\", {\n      configurable: !1,\n      writable: !1\n    }), n.fromCharCodeKeyCode = {\n      0: \"LaunchCalculator\",\n      8: \"Backspace\",\n      9: \"Tab\",\n      13: \"Enter\",\n      16: \"Shift\",\n      17: \"Ctrl\",\n      18: \"Alt\",\n      19: \"Pause\",\n      20: \"CapsLock\",\n      27: \"Escape\",\n      32: \" \",\n      33: \"PageUp\",\n      34: \"PageDown\",\n      35: \"End\",\n      36: \"Home\",\n      37: \"ArrowLeft\",\n      38: \"ArrowUp\",\n      39: \"ArrowRight\",\n      40: \"ArrowDown\",\n      45: \"Insert\",\n      46: \"Delete\",\n      48: \"0\",\n      49: \"1\",\n      50: \"2\",\n      51: \"3\",\n      52: \"4\",\n      53: \"5\",\n      54: \"6\",\n      55: \"7\",\n      56: \"8\",\n      57: \"9\",\n      91: \"OS\",\n      92: \"OSRight\",\n      93: \"ContextMenu\",\n      96: \"0\",\n      97: \"1\",\n      98: \"2\",\n      99: \"3\",\n      100: \"4\",\n      101: \"5\",\n      102: \"6\",\n      103: \"7\",\n      104: \"8\",\n      105: \"9\",\n      106: \"*\",\n      107: \"+\",\n      109: \"-\",\n      110: \".\",\n      111: \"/\",\n      112: \"F1\",\n      113: \"F2\",\n      114: \"F3\",\n      115: \"F4\",\n      116: \"F5\",\n      117: \"F6\",\n      118: \"F7\",\n      119: \"F8\",\n      120: \"F9\",\n      121: \"F10\",\n      122: \"F11\",\n      123: \"F12\",\n      144: \"NumLock\",\n      145: \"ScrollLock\",\n      173: \"-\",\n      182: \"MyComputer\",\n      183: \"MyCalculator\",\n      186: \";\",\n      187: \"=\",\n      188: \",\",\n      189: \"-\",\n      190: \".\",\n      191: \"/\",\n      192: \"`\",\n      219: \"[\",\n      220: \"\\\\\",\n      221: \"]\",\n      222: \"'\",\n      224: \"Meta\",\n      225: \"AltGraph\"\n    }, Object.freeze(n.fromCharCodeKeyCode), Object.defineProperty(n, \"fromCharCodeKeyCode\", {\n      configurable: !1,\n      writable: !1\n    }), n.keyName = {\n      Unidentified: \"Unidentified\",\n      AndroidDefault: \"AndroidDefault\",\n      Alt: \"Alt\",\n      AltGr: \"AltGraph\",\n      CapsLock: \"CapsLock\",\n      Ctrl: \"Control\",\n      Fn: \"Fn\",\n      FnLock: \"FnLock\",\n      Hyper: \"Hyper\",\n      Meta: \"Meta\",\n      OSLeft: \"OS\",\n      OSRight: \"OS\",\n      Command: \"OS\",\n      NumLock: \"NumLock\",\n      ScrollLock: \"ScrollLock\",\n      Shift: \"Shift\",\n      Super: \"Super\",\n      Symbol: \"Symbol\",\n      SymbolLock: \"SymbolLock\",\n      Enter: \"Enter\",\n      Tab: \"Tab\",\n      Space: \" \",\n      LeftArrow: \"ArrowLeft\",\n      UpArrow: \"ArrowUp\",\n      RightArrow: \"ArrowRight\",\n      DownArrow: \"ArrowDown\",\n      End: \"End\",\n      Home: \"Home\",\n      PageUp: \"PageUp\",\n      PageDown: \"PageDown\",\n      Backspace: \"Backspace\",\n      Clear: \"Clear\",\n      Copy: \"Copy\",\n      CrSel: \"CrSel\",\n      Cut: \"Cut\",\n      Delete: \"Delete\",\n      EraseEof: \"EraseEof\",\n      ExSel: \"ExSel\",\n      Insert: \"Insert\",\n      Paste: \"Paste\",\n      Redo: \"Redo\",\n      Undo: \"Undo\",\n      Accept: \"Accept\",\n      Again: \"Again\",\n      Attn: \"Attn\",\n      Cancel: \"Cancel\",\n      ContextMenu: \"ContextMenu\",\n      Esc: \"Escape\",\n      Execute: \"Execute\",\n      Find: \"Find\",\n      Finish: \"Finish\",\n      Help: \"Help\",\n      Pause: \"Pause\",\n      Play: \"Play\",\n      Props: \"Props\",\n      Select: \"Select\",\n      ZoomIn: \"ZoomIn\",\n      ZoomOut: \"ZoomOut\",\n      BrightnessDown: \"BrightnessDown\",\n      BrightnessUp: \"BrightnessUp\",\n      Eject: \"Eject\",\n      LogOff: \"LogOff\",\n      Power: \"Power\",\n      PowerOff: \"PowerOff\",\n      PrintScreen: \"PrintScreen\",\n      Hibernate: \"Hibernate\",\n      Standby: \"Standby\",\n      WakeUp: \"WakeUp\",\n      Compose: \"Compose\",\n      Dead: \"Dead\",\n      F1: \"F1\",\n      F2: \"F2\",\n      F3: \"F3\",\n      F4: \"F4\",\n      F5: \"F5\",\n      F6: \"F6\",\n      F7: \"F7\",\n      F8: \"F8\",\n      F9: \"F9\",\n      F10: \"F10\",\n      F11: \"F11\",\n      F12: \"F12\",\n      Print: \"Print\",\n      num0: \"0\",\n      num1: \"1\",\n      num2: \"2\",\n      num3: \"3\",\n      num4: \"4\",\n      num5: \"5\",\n      num6: \"6\",\n      num7: \"7\",\n      num8: \"8\",\n      num9: \"9\",\n      a: \"a\",\n      b: \"b\",\n      c: \"c\",\n      d: \"d\",\n      e: \"e\",\n      f: \"f\",\n      g: \"g\",\n      h: \"h\",\n      i: \"i\",\n      j: \"j\",\n      k: \"k\",\n      l: \"l\",\n      m: \"m\",\n      n: \"n\",\n      o: \"o\",\n      p: \"p\",\n      q: \"q\",\n      r: \"r\",\n      s: \"s\",\n      t: \"t\",\n      u: \"u\",\n      v: \"v\",\n      w: \"w\",\n      x: \"x\",\n      y: \"y\",\n      z: \"z\",\n      A: \"A\",\n      B: \"B\",\n      C: \"C\",\n      D: \"D\",\n      E: \"E\",\n      F: \"F\",\n      G: \"G\",\n      H: \"H\",\n      I: \"I\",\n      J: \"J\",\n      K: \"K\",\n      L: \"L\",\n      M: \"M\",\n      N: \"N\",\n      O: \"O\",\n      P: \"P\",\n      Q: \"Q\",\n      R: \"R\",\n      S: \"S\",\n      T: \"T\",\n      U: \"U\",\n      V: \"V\",\n      W: \"W\",\n      X: \"X\",\n      Y: \"Y\",\n      Z: \"Z\",\n      Semicolon: \";\",\n      Equal: \"=\",\n      Comma: \",\",\n      Hyphen: \"-\",\n      Minus: \"-\",\n      Plus: \"+\",\n      Dot: \".\",\n      Slash: \"/\",\n      Backquote: \"`\",\n      LeftParenthesis: \"(\",\n      RightParenthesis: \")\",\n      LeftBracket: \"[\",\n      RightBracket: \"]\",\n      Backslash: \"\\\\\",\n      Quote: \"'\",\n      numpad0: \"0\",\n      numpad1: \"1\",\n      numpad2: \"2\",\n      numpad3: \"3\",\n      numpad4: \"4\",\n      numpad5: \"5\",\n      numpad6: \"6\",\n      numpad7: \"7\",\n      numpad8: \"8\",\n      numpad9: \"9\",\n      NumpadDot: \".\",\n      NumpadDotAlt: \",\",\n      NumpadMultiply: \"*\",\n      NumpadPlus: \"+\",\n      NumpadMinus: \"-\",\n      NumpadSubtract: \"-\",\n      NumpadSlash: \"/\",\n      NumpadDotObsoleteBrowsers: \"Decimal\",\n      NumpadMultiplyObsoleteBrowsers: \"Multiply\",\n      NumpadPlusObsoleteBrowsers: \"Add\",\n      NumpadMinusObsoleteBrowsers: \"Subtract\",\n      NumpadSlashObsoleteBrowsers: \"Divide\",\n      _allFnKeys: [\"F1\", \"F2\", \"F3\", \"F4\", \"F5\", \"F6\", \"F7\", \"F8\", \"F9\", \"F10\", \"F11\", \"F12\"],\n      _someNonPrintableKeys: [\"Tab\", \"Enter\", \"Shift\", \"ShiftLeft\", \"ShiftRight\", \"Control\", \"ControlLeft\", \"ControlRight\", \"Alt\", \"AltLeft\", \"AltRight\", \"Pause\", \"CapsLock\", \"Escape\"],\n      _directionKeys: [\"PageUp\", \"PageDown\", \"End\", \"Home\", \"ArrowDown\", \"ArrowLeft\", \"ArrowRight\", \"ArrowUp\"]\n    }, Object.freeze(n.keyName._allFnKeys), Object.freeze(n.keyName._someNonPrintableKeys), Object.freeze(n.keyName._directionKeys), Object.freeze(n.keyName), Object.defineProperty(n, \"keyName\", {\n      configurable: !1,\n      writable: !1\n    }), Object.freeze(n);\n    var d = n;\n\n    function a(e) {\n      return function (e) {\n        if (Array.isArray(e)) return o(e);\n      }(e) || function (e) {\n        if (\"undefined\" != typeof Symbol && Symbol.iterator in Object(e)) return Array.from(e);\n      }(e) || s(e) || function () {\n        throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n      }();\n    }\n\n    function r() {\n      return (r = Object.assign || function (e) {\n        for (var t = 1; t < arguments.length; t++) {\n          var i = arguments[t];\n\n          for (var n in i) {\n            Object.prototype.hasOwnProperty.call(i, n) && (e[n] = i[n]);\n          }\n        }\n\n        return e;\n      }).apply(this, arguments);\n    }\n\n    function h(e, t) {\n      return function (e) {\n        if (Array.isArray(e)) return e;\n      }(e) || function (e, t) {\n        if (\"undefined\" != typeof Symbol && Symbol.iterator in Object(e)) {\n          var i = [],\n              n = !0,\n              a = !1,\n              r = void 0;\n\n          try {\n            for (var s, o = e[Symbol.iterator](); !(n = (s = o.next()).done) && (i.push(s.value), !t || i.length !== t); n = !0) {\n              ;\n            }\n          } catch (e) {\n            a = !0, r = e;\n          } finally {\n            try {\n              n || null == o[\"return\"] || o[\"return\"]();\n            } finally {\n              if (a) throw r;\n            }\n          }\n\n          return i;\n        }\n      }(e, t) || s(e, t) || function () {\n        throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n      }();\n    }\n\n    function s(e, t) {\n      if (e) {\n        if (\"string\" == typeof e) return o(e, t);\n        var i = Object.prototype.toString.call(e).slice(8, -1);\n        return \"Object\" === i && e.constructor && (i = e.constructor.name), \"Map\" === i || \"Set\" === i ? Array.from(i) : \"Arguments\" === i || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i) ? o(e, t) : void 0;\n      }\n    }\n\n    function o(e, t) {\n      (null == t || t > e.length) && (t = e.length);\n\n      for (var i = 0, n = new Array(t); i < t; i++) {\n        n[i] = e[i];\n      }\n\n      return n;\n    }\n\n    function l(e) {\n      return (l = \"function\" == typeof Symbol && \"symbol\" == _typeof(Symbol.iterator) ? function (e) {\n        return _typeof(e);\n      } : function (e) {\n        return e && \"function\" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? \"symbol\" : _typeof(e);\n      })(e);\n    }\n\n    var M = function () {\n      function s() {\n        !function (e) {\n          if (!(e instanceof s)) throw new TypeError(\"Cannot call a class as a function\");\n        }(this);\n      }\n\n      return function (e, t) {\n        for (var i = 0; i < t.length; i++) {\n          var n = t[i];\n          n.enumerable = n.enumerable || !1, n.configurable = !0, \"value\" in n && (n.writable = !0), Object.defineProperty(e, n.key, n);\n        }\n      }(s, [{\n        key: \"isNull\",\n        value: function value(e) {\n          return null === e;\n        }\n      }, {\n        key: \"isUndefined\",\n        value: function value(e) {\n          return void 0 === e;\n        }\n      }, {\n        key: \"isUndefinedOrNullOrEmpty\",\n        value: function value(e) {\n          return null == e || \"\" === e;\n        }\n      }, {\n        key: \"isString\",\n        value: function value(e) {\n          return \"string\" == typeof e || e instanceof String;\n        }\n      }, {\n        key: \"isEmptyString\",\n        value: function value(e) {\n          return \"\" === e;\n        }\n      }, {\n        key: \"isBoolean\",\n        value: function value(e) {\n          return \"boolean\" == typeof e;\n        }\n      }, {\n        key: \"isTrueOrFalseString\",\n        value: function value(e) {\n          var t = String(e).toLowerCase();\n          return \"true\" === t || \"false\" === t;\n        }\n      }, {\n        key: \"isObject\",\n        value: function value(e) {\n          return \"object\" === l(e) && null !== e && !Array.isArray(e);\n        }\n      }, {\n        key: \"isEmptyObj\",\n        value: function value(e) {\n          for (var t in e) {\n            if (Object.prototype.hasOwnProperty.call(e, t)) return !1;\n          }\n\n          return !0;\n        }\n      }, {\n        key: \"isNumberStrict\",\n        value: function value(e) {\n          return \"number\" == typeof e;\n        }\n      }, {\n        key: \"isNumber\",\n        value: function value(e) {\n          return !this.isArray(e) && !isNaN(parseFloat(e)) && isFinite(e);\n        }\n      }, {\n        key: \"isDigit\",\n        value: function value(e) {\n          return /\\d/.test(e);\n        }\n      }, {\n        key: \"isNumberOrArabic\",\n        value: function value(e) {\n          var t = this.arabicToLatinNumbers(e, !1, !0, !0);\n          return this.isNumber(t);\n        }\n      }, {\n        key: \"isInt\",\n        value: function value(e) {\n          return \"number\" == typeof e && parseFloat(e) === parseInt(e, 10) && !isNaN(e);\n        }\n      }, {\n        key: \"isFunction\",\n        value: function value(e) {\n          return \"function\" == typeof e;\n        }\n      }, {\n        key: \"isIE11\",\n        value: function value() {\n          return \"undefined\" != typeof window && !!window.MSInputMethodContext && !!document.documentMode;\n        }\n      }, {\n        key: \"contains\",\n        value: function value(e, t) {\n          return !(!this.isString(e) || !this.isString(t) || \"\" === e || \"\" === t) && -1 !== e.indexOf(t);\n        }\n      }, {\n        key: \"isInArray\",\n        value: function value(e, t) {\n          return !(!this.isArray(t) || t === [] || this.isUndefined(e)) && -1 !== t.indexOf(e);\n        }\n      }, {\n        key: \"isArray\",\n        value: function value(e) {\n          if (\"[object Array]\" === Object.prototype.toString.call([])) return Array.isArray(e) || \"object\" === l(e) && \"[object Array]\" === Object.prototype.toString.call(e);\n          throw new Error(\"toString message changed for Object Array\");\n        }\n      }, {\n        key: \"isElement\",\n        value: function value(e) {\n          return \"undefined\" != typeof Element && e instanceof Element;\n        }\n      }, {\n        key: \"isInputElement\",\n        value: function value(e) {\n          return this.isElement(e) && \"input\" === e.tagName.toLowerCase();\n        }\n      }, {\n        key: \"decimalPlaces\",\n        value: function value(e) {\n          var t = h(e.split(\".\"), 2)[1];\n          return this.isUndefined(t) ? 0 : t.length;\n        }\n      }, {\n        key: \"indexFirstNonZeroDecimalPlace\",\n        value: function value(e) {\n          var t = h(String(Math.abs(e)).split(\".\"), 2)[1];\n          if (this.isUndefined(t)) return 0;\n          var i = t.lastIndexOf(\"0\");\n          return -1 === i ? i = 0 : i += 2, i;\n        }\n      }, {\n        key: \"keyCodeNumber\",\n        value: function value(e) {\n          return void 0 === e.which ? e.keyCode : e.which;\n        }\n      }, {\n        key: \"character\",\n        value: function value(e) {\n          var t;\n\n          if (\"Unidentified\" === e.key || void 0 === e.key || this.isSeleniumBot()) {\n            var i = this.keyCodeNumber(e);\n            if (i === d.keyCode.AndroidDefault) return d.keyName.AndroidDefault;\n            var n = d.fromCharCodeKeyCode[i];\n            t = s.isUndefinedOrNullOrEmpty(n) ? String.fromCharCode(i) : n;\n          } else {\n            var a;\n\n            switch (e.key) {\n              case \"Add\":\n                t = d.keyName.NumpadPlus;\n                break;\n\n              case \"Apps\":\n                t = d.keyName.ContextMenu;\n                break;\n\n              case \"Crsel\":\n                t = d.keyName.CrSel;\n                break;\n\n              case \"Decimal\":\n                t = e[\"char\"] ? e[\"char\"] : d.keyName.NumpadDot;\n                break;\n\n              case \"Del\":\n                t = \"firefox\" === (a = this.browser()).name && a.version <= 36 || \"ie\" === a.name && a.version <= 9 ? d.keyName.Dot : d.keyName.Delete;\n                break;\n\n              case \"Divide\":\n                t = d.keyName.NumpadSlash;\n                break;\n\n              case \"Down\":\n                t = d.keyName.DownArrow;\n                break;\n\n              case \"Esc\":\n                t = d.keyName.Esc;\n                break;\n\n              case \"Exsel\":\n                t = d.keyName.ExSel;\n                break;\n\n              case \"Left\":\n                t = d.keyName.LeftArrow;\n                break;\n\n              case \"Meta\":\n              case \"Super\":\n                t = d.keyName.OSLeft;\n                break;\n\n              case \"Multiply\":\n                t = d.keyName.NumpadMultiply;\n                break;\n\n              case \"Right\":\n                t = d.keyName.RightArrow;\n                break;\n\n              case \"Spacebar\":\n                t = d.keyName.Space;\n                break;\n\n              case \"Subtract\":\n                t = d.keyName.NumpadMinus;\n                break;\n\n              case \"Up\":\n                t = d.keyName.UpArrow;\n                break;\n\n              default:\n                t = e.key;\n            }\n          }\n\n          return t;\n        }\n      }, {\n        key: \"browser\",\n        value: function value() {\n          var e,\n              t = navigator.userAgent,\n              i = t.match(/(opera|chrome|safari|firefox|msie|trident(?=\\/))\\/?\\s*(\\d+)/i) || [];\n          return /trident/i.test(i[1]) ? {\n            name: \"ie\",\n            version: (e = /\\brv[ :]+(\\d+)/g.exec(t) || [])[1] || \"\"\n          } : \"Chrome\" === i[1] && null !== (e = t.match(/\\b(OPR|Edge)\\/(\\d+)/)) ? {\n            name: e[1].replace(\"OPR\", \"opera\"),\n            version: e[2]\n          } : (i = i[2] ? [i[1], i[2]] : [navigator.appName, navigator.appVersion, \"-?\"], null !== (e = t.match(/version\\/(\\d+)/i)) && i.splice(1, 1, e[1]), {\n            name: i[0].toLowerCase(),\n            version: i[1]\n          });\n        }\n      }, {\n        key: \"isSeleniumBot\",\n        value: function value() {\n          return !0 === window.navigator.webdriver;\n        }\n      }, {\n        key: \"isNegative\",\n        value: function value(e, t, i) {\n          var n = 1 < arguments.length && void 0 !== t ? t : \"-\",\n              a = !(2 < arguments.length && void 0 !== i) || i;\n          return e === n || \"\" !== e && (s.isNumber(e) ? e < 0 : a ? this.contains(e, n) : this.isNegativeStrict(e, n));\n        }\n      }, {\n        key: \"isNegativeStrict\",\n        value: function value(e, t) {\n          var i = 1 < arguments.length && void 0 !== t ? t : \"-\";\n          return e.charAt(0) === i;\n        }\n      }, {\n        key: \"isNegativeWithBrackets\",\n        value: function value(e, t, i) {\n          return e.charAt(0) === t && this.contains(e, i);\n        }\n      }, {\n        key: \"isZeroOrHasNoValue\",\n        value: function value(e) {\n          return !/[1-9]/g.test(e);\n        }\n      }, {\n        key: \"setRawNegativeSign\",\n        value: function value(e) {\n          return this.isNegativeStrict(e, \"-\") ? e : \"-\".concat(e);\n        }\n      }, {\n        key: \"replaceCharAt\",\n        value: function value(e, t, i) {\n          return \"\".concat(e.substr(0, t)).concat(i).concat(e.substr(t + i.length));\n        }\n      }, {\n        key: \"clampToRangeLimits\",\n        value: function value(e, t) {\n          return Math.max(t.minimumValue, Math.min(t.maximumValue, e));\n        }\n      }, {\n        key: \"countNumberCharactersOnTheCaretLeftSide\",\n        value: function value(e, t, i) {\n          for (var n = new RegExp(\"[0-9\".concat(i, \"-]\")), a = 0, r = 0; r < t; r++) {\n            n.test(e[r]) && a++;\n          }\n\n          return a;\n        }\n      }, {\n        key: \"findCaretPositionInFormattedNumber\",\n        value: function value(e, t, i, n) {\n          var a,\n              r = i.length,\n              s = e.length,\n              o = 0;\n\n          for (a = 0; a < r && o < s && o < t; a++) {\n            (e[o] === i[a] || \".\" === e[o] && i[a] === n) && o++;\n          }\n\n          return a;\n        }\n      }, {\n        key: \"countCharInText\",\n        value: function value(e, t) {\n          for (var i = 0, n = 0; n < t.length; n++) {\n            t[n] === e && i++;\n          }\n\n          return i;\n        }\n      }, {\n        key: \"convertCharacterCountToIndexPosition\",\n        value: function value(e) {\n          return Math.max(e, e - 1);\n        }\n      }, {\n        key: \"getElementSelection\",\n        value: function value(e) {\n          var t,\n              i = {};\n\n          try {\n            t = this.isUndefined(e.selectionStart);\n          } catch (e) {\n            t = !1;\n          }\n\n          try {\n            if (t) {\n              var n = window.getSelection().getRangeAt(0);\n              i.start = n.startOffset, i.end = n.endOffset, i.length = i.end - i.start;\n            } else i.start = e.selectionStart, i.end = e.selectionEnd, i.length = i.end - i.start;\n          } catch (e) {\n            i.start = 0, i.end = 0, i.length = 0;\n          }\n\n          return i;\n        }\n      }, {\n        key: \"setElementSelection\",\n        value: function value(e, t, i) {\n          var n = 2 < arguments.length && void 0 !== i ? i : null;\n          if (this.isUndefinedOrNullOrEmpty(n) && (n = t), this.isInputElement(e)) e.setSelectionRange(t, n);else if (!s.isNull(e.firstChild)) {\n            var a = document.createRange();\n            a.setStart(e.firstChild, t), a.setEnd(e.firstChild, n);\n            var r = window.getSelection();\n            r.removeAllRanges(), r.addRange(a);\n          }\n        }\n      }, {\n        key: \"throwError\",\n        value: function value(e) {\n          throw new Error(e);\n        }\n      }, {\n        key: \"warning\",\n        value: function value(e, t) {\n          1 < arguments.length && void 0 !== t && !t || console.warn(\"Warning: \".concat(e));\n        }\n      }, {\n        key: \"isWheelUpEvent\",\n        value: function value(e) {\n          return e.deltaY || this.throwError(\"The event passed as a parameter is not a valid wheel event, '\".concat(e.type, \"' given.\")), e.deltaY < 0;\n        }\n      }, {\n        key: \"isWheelDownEvent\",\n        value: function value(e) {\n          return e.deltaY || this.throwError(\"The event passed as a parameter is not a valid wheel event, '\".concat(e.type, \"' given.\")), 0 < e.deltaY;\n        }\n      }, {\n        key: \"forceDecimalPlaces\",\n        value: function value(e, t) {\n          var i = h(String(e).split(\".\"), 2),\n              n = i[0],\n              a = i[1];\n          return a ? \"\".concat(n, \".\").concat(a.substr(0, t)) : e;\n        }\n      }, {\n        key: \"roundToNearest\",\n        value: function value(e, t) {\n          var i = 1 < arguments.length && void 0 !== t ? t : 1e3;\n          return 0 === e ? 0 : (0 === i && this.throwError(\"The `stepPlace` used to round is equal to `0`. This value must not be equal to zero.\"), Math.round(e / i) * i);\n        }\n      }, {\n        key: \"modifyAndRoundToNearestAuto\",\n        value: function value(e, t, i) {\n          e = Number(this.forceDecimalPlaces(e, i));\n          var n = Math.abs(e);\n\n          if (0 <= n && n < 1) {\n            var a,\n                r = Math.pow(10, -i);\n            if (0 === e) return t ? r : -r;\n            var s,\n                o = i,\n                l = this.indexFirstNonZeroDecimalPlace(e);\n            return a = o - 1 <= l ? r : Math.pow(10, -(l + 1)), s = t ? e + a : e - a, this.roundToNearest(s, a);\n          }\n\n          e = parseInt(e, 10);\n          var u,\n              c = Math.abs(e).toString().length;\n\n          switch (c) {\n            case 1:\n              u = 0;\n              break;\n\n            case 2:\n            case 3:\n              u = 1;\n              break;\n\n            case 4:\n            case 5:\n              u = 2;\n              break;\n\n            default:\n              u = c - 3;\n          }\n\n          var h,\n              m = Math.pow(10, u);\n          return (h = t ? e + m : e - m) <= 10 && -10 <= h ? h : this.roundToNearest(h, m);\n        }\n      }, {\n        key: \"addAndRoundToNearestAuto\",\n        value: function value(e, t) {\n          return this.modifyAndRoundToNearestAuto(e, !0, t);\n        }\n      }, {\n        key: \"subtractAndRoundToNearestAuto\",\n        value: function value(e, t) {\n          return this.modifyAndRoundToNearestAuto(e, !1, t);\n        }\n      }, {\n        key: \"arabicToLatinNumbers\",\n        value: function value(e, t, i, n) {\n          var a = !(1 < arguments.length && void 0 !== t) || t,\n              r = 2 < arguments.length && void 0 !== i && i,\n              s = 3 < arguments.length && void 0 !== n && n;\n          if (this.isNull(e)) return e;\n          var o = e.toString();\n          if (\"\" === o) return e;\n          if (null === o.match(/[Ù Ù¡Ù¢Ù£Ù¤Ù¥Ù¦Ù§Ù¨Ù©Û´ÛµÛ¶]/g)) return a && (o = Number(o)), o;\n          r && (o = o.replace(/Ù«/, \".\")), s && (o = o.replace(/Ù¬/g, \"\")), o = o.replace(/[Ù Ù¡Ù¢Ù£Ù¤Ù¥Ù¦Ù§Ù¨Ù©]/g, function (e) {\n            return e.charCodeAt(0) - 1632;\n          }).replace(/[Û°Û±Û²Û³Û´ÛµÛ¶Û·Û¸Û¹]/g, function (e) {\n            return e.charCodeAt(0) - 1776;\n          });\n          var l = Number(o);\n          return isNaN(l) ? l : (a && (o = l), o);\n        }\n      }, {\n        key: \"triggerEvent\",\n        value: function value(e, t, i, n, a) {\n          var r,\n              s = 1 < arguments.length && void 0 !== t ? t : document,\n              o = 2 < arguments.length && void 0 !== i ? i : null,\n              l = !(3 < arguments.length && void 0 !== n) || n,\n              u = !(4 < arguments.length && void 0 !== a) || a;\n          window.CustomEvent ? r = new CustomEvent(e, {\n            detail: o,\n            bubbles: l,\n            cancelable: u\n          }) : (r = document.createEvent(\"CustomEvent\")).initCustomEvent(e, l, u, {\n            detail: o\n          }), s.dispatchEvent(r);\n        }\n      }, {\n        key: \"parseStr\",\n        value: function value(e) {\n          var t,\n              i,\n              n,\n              a,\n              r = {};\n          if (0 === e && 1 / e < 0 && (e = \"-0\"), e = e.toString(), this.isNegativeStrict(e, \"-\") ? (e = e.slice(1), r.s = -1) : r.s = 1, -1 < (t = e.indexOf(\".\")) && (e = e.replace(\".\", \"\")), t < 0 && (t = e.length), (i = -1 === e.search(/[1-9]/i) ? e.length : e.search(/[1-9]/i)) === (n = e.length)) r.e = 0, r.c = [0];else {\n            for (a = n - 1; \"0\" === e.charAt(a); --a) {\n              --n;\n            }\n\n            for (--n, r.e = t - i - 1, r.c = [], t = 0; i <= n; i += 1) {\n              r.c[t] = +e.charAt(i), t += 1;\n            }\n          }\n          return r;\n        }\n      }, {\n        key: \"testMinMax\",\n        value: function value(e, t) {\n          var i = t.c,\n              n = e.c,\n              a = t.s,\n              r = e.s,\n              s = t.e,\n              o = e.e;\n          if (!i[0] || !n[0]) return i[0] ? a : n[0] ? -r : 0;\n          if (a !== r) return a;\n          var l = a < 0;\n          if (s !== o) return o < s ^ l ? 1 : -1;\n\n          for (a = -1, r = (s = i.length) < (o = n.length) ? s : o, a += 1; a < r; a += 1) {\n            if (i[a] !== n[a]) return i[a] > n[a] ^ l ? 1 : -1;\n          }\n\n          return s === o ? 0 : o < s ^ l ? 1 : -1;\n        }\n      }, {\n        key: \"randomString\",\n        value: function value(e) {\n          var t = 0 < arguments.length && void 0 !== e ? e : 5;\n          return Math.random().toString(36).substr(2, t);\n        }\n      }, {\n        key: \"domElement\",\n        value: function value(e) {\n          return s.isString(e) ? document.querySelector(e) : e;\n        }\n      }, {\n        key: \"getElementValue\",\n        value: function value(e) {\n          return \"input\" === e.tagName.toLowerCase() ? e.value : this.text(e);\n        }\n      }, {\n        key: \"setElementValue\",\n        value: function value(e, t) {\n          var i = 1 < arguments.length && void 0 !== t ? t : null;\n          \"input\" === e.tagName.toLowerCase() ? e.value = i : e.textContent = i;\n        }\n      }, {\n        key: \"setInvalidState\",\n        value: function value(e, t) {\n          var i = 1 < arguments.length && void 0 !== t ? t : \"Invalid\";\n          \"\" !== i && !this.isNull(i) || this.throwError(\"Cannot set the invalid state with an empty message.\"), e.setCustomValidity(i);\n        }\n      }, {\n        key: \"setValidState\",\n        value: function value(e) {\n          e.setCustomValidity(\"\");\n        }\n      }, {\n        key: \"cloneObject\",\n        value: function value(e) {\n          return r({}, e);\n        }\n      }, {\n        key: \"camelize\",\n        value: function value(e, t, i, n) {\n          var a = 1 < arguments.length && void 0 !== t ? t : \"-\",\n              r = !(2 < arguments.length && void 0 !== i) || i,\n              s = !(3 < arguments.length && void 0 !== n) || n;\n          if (this.isNull(e)) return null;\n          r && (e = e.replace(/^data-/, \"\"));\n          var o = e.split(a).map(function (e) {\n            return \"\".concat(e.charAt(0).toUpperCase()).concat(e.slice(1));\n          });\n          return o = o.join(\"\"), s && (o = \"\".concat(o.charAt(0).toLowerCase()).concat(o.slice(1))), o;\n        }\n      }, {\n        key: \"text\",\n        value: function value(e) {\n          var t = e.nodeType;\n          return t === Node.ELEMENT_NODE || t === Node.DOCUMENT_NODE || t === Node.DOCUMENT_FRAGMENT_NODE ? e.textContent : t === Node.TEXT_NODE ? e.nodeValue : \"\";\n        }\n      }, {\n        key: \"setText\",\n        value: function value(e, t) {\n          var i = e.nodeType;\n          i !== Node.ELEMENT_NODE && i !== Node.DOCUMENT_NODE && i !== Node.DOCUMENT_FRAGMENT_NODE || (e.textContent = t);\n        }\n      }, {\n        key: \"filterOut\",\n        value: function value(e, t) {\n          var i = this;\n          return e.filter(function (e) {\n            return !i.isInArray(e, t);\n          });\n        }\n      }, {\n        key: \"trimPaddedZerosFromDecimalPlaces\",\n        value: function value(e) {\n          if (\"\" === (e = String(e))) return \"\";\n          var t = h(e.split(\".\"), 2),\n              i = t[0],\n              n = t[1];\n          if (this.isUndefinedOrNullOrEmpty(n)) return i;\n          var a = n.replace(/0+$/g, \"\");\n          return \"\" === a ? i : \"\".concat(i, \".\").concat(a);\n        }\n      }, {\n        key: \"getHoveredElement\",\n        value: function value() {\n          var e = a(document.querySelectorAll(\":hover\"));\n          return e[e.length - 1];\n        }\n      }, {\n        key: \"arrayTrim\",\n        value: function value(e, t) {\n          var i = e.length;\n          return 0 === i || i < t ? e : t < 0 ? [] : (e.length = parseInt(t, 10), e);\n        }\n      }, {\n        key: \"arrayUnique\",\n        value: function value() {\n          var e;\n          return a(new Set((e = []).concat.apply(e, arguments)));\n        }\n      }, {\n        key: \"mergeMaps\",\n        value: function value() {\n          for (var e = arguments.length, t = new Array(e), i = 0; i < e; i++) {\n            t[i] = arguments[i];\n          }\n\n          return new Map(t.reduce(function (e, t) {\n            return e.concat(a(t));\n          }, []));\n        }\n      }, {\n        key: \"objectKeyLookup\",\n        value: function value(e, t) {\n          var i = Object.entries(e).find(function (e) {\n            return e[1] === t;\n          }),\n              n = null;\n          return void 0 !== i && (n = i[0]), n;\n        }\n      }, {\n        key: \"insertAt\",\n        value: function value(e, t, i) {\n          if (i > (e = String(e)).length) throw new Error(\"The given index is out of the string range.\");\n          if (1 !== t.length) throw new Error(\"The given string `char` should be only one character long.\");\n          return \"\" === e && 0 === i ? t : \"\".concat(e.slice(0, i)).concat(t).concat(e.slice(i));\n        }\n      }, {\n        key: \"scientificToDecimal\",\n        value: function value(e) {\n          var t = Number(e);\n          if (isNaN(t)) return NaN;\n          if (e = String(e), !this.contains(e, \"e\") && !this.contains(e, \"E\")) return e;\n          var i = h(e.split(/e/i), 2),\n              n = i[0],\n              a = i[1],\n              r = n < 0;\n          r && (n = n.replace(\"-\", \"\"));\n          var s = +a < 0;\n          s && (a = a.replace(\"-\", \"\"));\n          var o,\n              l = h(n.split(/\\./), 2),\n              u = l[0],\n              c = l[1];\n          return o = s ? (o = u.length > a ? this.insertAt(u, \".\", u.length - a) : \"0.\".concat(\"0\".repeat(a - u.length)).concat(u), \"\".concat(o).concat(c || \"\")) : c ? (n = \"\".concat(u).concat(c), a < c.length ? this.insertAt(n, \".\", +a + u.length) : \"\".concat(n).concat(\"0\".repeat(a - c.length))) : (n = n.replace(\".\", \"\"), \"\".concat(n).concat(\"0\".repeat(Number(a)))), r && (o = \"-\".concat(o)), o;\n        }\n      }]), s;\n    }(),\n        u = function () {\n      function t(e) {\n        if (function (e) {\n          if (!(e instanceof t)) throw new TypeError(\"Cannot call a class as a function\");\n        }(this), null === e) throw new Error(\"Invalid AST\");\n      }\n\n      return function (e, t) {\n        for (var i = 0; i < t.length; i++) {\n          var n = t[i];\n          n.enumerable = n.enumerable || !1, n.configurable = !0, \"value\" in n && (n.writable = !0), Object.defineProperty(e, n.key, n);\n        }\n      }(t.prototype, [{\n        key: \"evaluate\",\n        value: function value(e) {\n          if (null == e) throw new Error(\"Invalid AST sub-tree\");\n          if (\"number\" === e.type) return e.value;\n          if (\"unaryMinus\" === e.type) return -this.evaluate(e.left);\n          var t = this.evaluate(e.left),\n              i = this.evaluate(e.right);\n\n          switch (e.type) {\n            case \"op_+\":\n              return Number(t) + Number(i);\n\n            case \"op_-\":\n              return t - i;\n\n            case \"op_*\":\n              return t * i;\n\n            case \"op_/\":\n              return t / i;\n\n            default:\n              throw new Error(\"Invalid operator '\".concat(e.type, \"'\"));\n          }\n        }\n      }]), t;\n    }(),\n        c = function () {\n      function a() {\n        !function (e) {\n          if (!(e instanceof a)) throw new TypeError(\"Cannot call a class as a function\");\n        }(this);\n      }\n\n      return function (e, t) {\n        for (var i = 0; i < t.length; i++) {\n          var n = t[i];\n          n.enumerable = n.enumerable || !1, n.configurable = !0, \"value\" in n && (n.writable = !0), Object.defineProperty(e, n.key, n);\n        }\n      }(a, [{\n        key: \"createNode\",\n        value: function value(e, t, i) {\n          var n = new a();\n          return n.type = e, n.left = t, n.right = i, n;\n        }\n      }, {\n        key: \"createUnaryNode\",\n        value: function value(e) {\n          var t = new a();\n          return t.type = \"unaryMinus\", t.left = e, t.right = null, t;\n        }\n      }, {\n        key: \"createLeaf\",\n        value: function value(e) {\n          var t = new a();\n          return t.type = \"number\", t.value = e, t;\n        }\n      }]), a;\n    }();\n\n    function m(e, t, i) {\n      !function (e) {\n        if (!(e instanceof m)) throw new TypeError(\"Cannot call a class as a function\");\n      }(this), this.type = e, this.value = t, this.symbol = i;\n    }\n\n    var g = function () {\n      function t(e) {\n        !function (e) {\n          if (!(e instanceof t)) throw new TypeError(\"Cannot call a class as a function\");\n        }(this), this.text = e, this.textLength = e.length, this.index = 0, this.token = new m(\"Error\", 0, 0);\n      }\n\n      return function (e, t) {\n        for (var i = 0; i < t.length; i++) {\n          var n = t[i];\n          n.enumerable = n.enumerable || !1, n.configurable = !0, \"value\" in n && (n.writable = !0), Object.defineProperty(e, n.key, n);\n        }\n      }(t.prototype, [{\n        key: \"_skipSpaces\",\n        value: function value() {\n          for (; \" \" === this.text[this.index] && this.index <= this.textLength;) {\n            this.index++;\n          }\n        }\n      }, {\n        key: \"getIndex\",\n        value: function value() {\n          return this.index;\n        }\n      }, {\n        key: \"getNextToken\",\n        value: function value(e) {\n          var t = 0 < arguments.length && void 0 !== e ? e : \".\";\n          if (this._skipSpaces(), this.textLength === this.index) return this.token.type = \"EOT\", this.token;\n          if (M.isDigit(this.text[this.index])) return this.token.type = \"num\", this.token.value = this._getNumber(t), this.token;\n\n          switch (this.token.type = \"Error\", this.text[this.index]) {\n            case \"+\":\n              this.token.type = \"+\";\n              break;\n\n            case \"-\":\n              this.token.type = \"-\";\n              break;\n\n            case \"*\":\n              this.token.type = \"*\";\n              break;\n\n            case \"/\":\n              this.token.type = \"/\";\n              break;\n\n            case \"(\":\n              this.token.type = \"(\";\n              break;\n\n            case \")\":\n              this.token.type = \")\";\n          }\n\n          if (\"Error\" === this.token.type) throw new Error(\"Unexpected token '\".concat(this.token.symbol, \"' at position '\").concat(this.token.index, \"' in the token function\"));\n          return this.token.symbol = this.text[this.index], this.index++, this.token;\n        }\n      }, {\n        key: \"_getNumber\",\n        value: function value(e) {\n          this._skipSpaces();\n\n          for (var t = this.index; this.index <= this.textLength && M.isDigit(this.text[this.index]);) {\n            this.index++;\n          }\n\n          for (this.text[this.index] === e && this.index++; this.index <= this.textLength && M.isDigit(this.text[this.index]);) {\n            this.index++;\n          }\n\n          if (this.index === t) throw new Error(\"No number has been found while it was expected\");\n          return this.text.substring(t, this.index).replace(e, \".\");\n        }\n      }]), t;\n    }(),\n        v = function () {\n      function i(e) {\n        var t = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : \".\";\n        return function (e) {\n          if (!(e instanceof i)) throw new TypeError(\"Cannot call a class as a function\");\n        }(this), this.text = e, this.decimalCharacter = t, this.lexer = new g(e), this.token = this.lexer.getNextToken(this.decimalCharacter), this._exp();\n      }\n\n      return function (e, t) {\n        for (var i = 0; i < t.length; i++) {\n          var n = t[i];\n          n.enumerable = n.enumerable || !1, n.configurable = !0, \"value\" in n && (n.writable = !0), Object.defineProperty(e, n.key, n);\n        }\n      }(i.prototype, [{\n        key: \"_exp\",\n        value: function value() {\n          var e = this._term(),\n              t = this._moreExp();\n\n          return c.createNode(\"op_+\", e, t);\n        }\n      }, {\n        key: \"_moreExp\",\n        value: function value() {\n          var e, t;\n\n          switch (this.token.type) {\n            case \"+\":\n              return this.token = this.lexer.getNextToken(this.decimalCharacter), e = this._term(), t = this._moreExp(), c.createNode(\"op_+\", t, e);\n\n            case \"-\":\n              return this.token = this.lexer.getNextToken(this.decimalCharacter), e = this._term(), t = this._moreExp(), c.createNode(\"op_-\", t, e);\n          }\n\n          return c.createLeaf(0);\n        }\n      }, {\n        key: \"_term\",\n        value: function value() {\n          var e = this._factor(),\n              t = this._moreTerms();\n\n          return c.createNode(\"op_*\", e, t);\n        }\n      }, {\n        key: \"_moreTerms\",\n        value: function value() {\n          var e, t;\n\n          switch (this.token.type) {\n            case \"*\":\n              return this.token = this.lexer.getNextToken(this.decimalCharacter), e = this._factor(), t = this._moreTerms(), c.createNode(\"op_*\", t, e);\n\n            case \"/\":\n              return this.token = this.lexer.getNextToken(this.decimalCharacter), e = this._factor(), t = this._moreTerms(), c.createNode(\"op_/\", t, e);\n          }\n\n          return c.createLeaf(1);\n        }\n      }, {\n        key: \"_factor\",\n        value: function value() {\n          var e, t, i;\n\n          switch (this.token.type) {\n            case \"num\":\n              return i = this.token.value, this.token = this.lexer.getNextToken(this.decimalCharacter), c.createLeaf(i);\n\n            case \"-\":\n              return this.token = this.lexer.getNextToken(this.decimalCharacter), t = this._factor(), c.createUnaryNode(t);\n\n            case \"(\":\n              return this.token = this.lexer.getNextToken(this.decimalCharacter), e = this._exp(), this._match(\")\"), e;\n\n            default:\n              throw new Error(\"Unexpected token '\".concat(this.token.symbol, \"' with type '\").concat(this.token.type, \"' at position '\").concat(this.token.index, \"' in the factor function\"));\n          }\n        }\n      }, {\n        key: \"_match\",\n        value: function value(e) {\n          var t = this.lexer.getIndex() - 1;\n          if (this.text[t] !== e) throw new Error(\"Unexpected token '\".concat(this.token.symbol, \"' at position '\").concat(t, \"' in the match function\"));\n          this.token = this.lexer.getNextToken(this.decimalCharacter);\n        }\n      }]), i;\n    }();\n\n    function p(e) {\n      return function (e) {\n        if (Array.isArray(e)) return y(e);\n      }(e) || function (e) {\n        if (\"undefined\" != typeof Symbol && Symbol.iterator in Object(e)) return Array.from(e);\n      }(e) || f(e) || function () {\n        throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n      }();\n    }\n\n    function S(e, t) {\n      return function (e) {\n        if (Array.isArray(e)) return e;\n      }(e) || function (e, t) {\n        if (\"undefined\" != typeof Symbol && Symbol.iterator in Object(e)) {\n          var i = [],\n              n = !0,\n              a = !1,\n              r = void 0;\n\n          try {\n            for (var s, o = e[Symbol.iterator](); !(n = (s = o.next()).done) && (i.push(s.value), !t || i.length !== t); n = !0) {\n              ;\n            }\n          } catch (e) {\n            a = !0, r = e;\n          } finally {\n            try {\n              n || null == o[\"return\"] || o[\"return\"]();\n            } finally {\n              if (a) throw r;\n            }\n          }\n\n          return i;\n        }\n      }(e, t) || f(e, t) || function () {\n        throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n      }();\n    }\n\n    function f(e, t) {\n      if (e) {\n        if (\"string\" == typeof e) return y(e, t);\n        var i = Object.prototype.toString.call(e).slice(8, -1);\n        return \"Object\" === i && e.constructor && (i = e.constructor.name), \"Map\" === i || \"Set\" === i ? Array.from(i) : \"Arguments\" === i || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i) ? y(e, t) : void 0;\n      }\n    }\n\n    function y(e, t) {\n      (null == t || t > e.length) && (t = e.length);\n\n      for (var i = 0, n = new Array(t); i < t; i++) {\n        n[i] = e[i];\n      }\n\n      return n;\n    }\n\n    function b() {\n      return (b = Object.assign || function (e) {\n        for (var t = 1; t < arguments.length; t++) {\n          var i = arguments[t];\n\n          for (var n in i) {\n            Object.prototype.hasOwnProperty.call(i, n) && (e[n] = i[n]);\n          }\n        }\n\n        return e;\n      }).apply(this, arguments);\n    }\n\n    function w(e) {\n      return (w = \"function\" == typeof Symbol && \"symbol\" == _typeof(Symbol.iterator) ? function (e) {\n        return _typeof(e);\n      } : function (e) {\n        return e && \"function\" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? \"symbol\" : _typeof(e);\n      })(e);\n    }\n\n    function P(e, t) {\n      for (var i = 0; i < t.length; i++) {\n        var n = t[i];\n        n.enumerable = n.enumerable || !1, n.configurable = !0, \"value\" in n && (n.writable = !0), Object.defineProperty(e, n.key, n);\n      }\n    }\n\n    var O,\n        k = function () {\n      function B() {\n        var s = this,\n            e = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : null,\n            t = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : null,\n            i = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null;\n        !function (e) {\n          if (!(e instanceof B)) throw new TypeError(\"Cannot call a class as a function\");\n        }(this);\n\n        var n = B._setArgumentsValues(e, t, i),\n            a = n.domElement,\n            r = n.initialValue,\n            o = n.userOptions;\n\n        if (this.domElement = a, this.defaultRawValue = \"\", this._setSettings(o, !1), this._checkElement(), this.savedCancellableValue = null, this.historyTable = [], this.historyTableIndex = -1, this.onGoingRedo = !1, this.parentForm = this._getParentForm(), !this.runOnce && this.settings.formatOnPageLoad) this._formatDefaultValueOnPageLoad(r);else {\n          var l;\n          if (M.isNull(r)) switch (this.settings.emptyInputBehavior) {\n            case B.options.emptyInputBehavior.min:\n              l = this.settings.minimumValue;\n              break;\n\n            case B.options.emptyInputBehavior.max:\n              l = this.settings.maximumValue;\n              break;\n\n            case B.options.emptyInputBehavior.zero:\n              l = \"0\";\n              break;\n\n            case B.options.emptyInputBehavior.focus:\n            case B.options.emptyInputBehavior.press:\n            case B.options.emptyInputBehavior.always:\n            case B.options.emptyInputBehavior[\"null\"]:\n              l = \"\";\n              break;\n\n            default:\n              l = this.settings.emptyInputBehavior;\n          } else l = r;\n\n          this._setElementAndRawValue(l);\n        }\n        this.runOnce = !0, this.hasEventListeners = !1, (this.isInputElement || this.isContentEditable) && (this.settings.noEventListeners || this._createEventListeners(), this._setWritePermissions(!0)), this._saveInitialValues(r), this.sessionStorageAvailable = this.constructor._storageTest(), this.storageNamePrefix = \"AUTO_\", this._setPersistentStorageName(), this.validState = !0, this.isFocused = !1, this.isWheelEvent = !1, this.isDropEvent = !1, this.isEditing = !1, this.rawValueOnFocus = void 0, this.internalModification = !1, this.attributeToWatch = this._getAttributeToWatch(), this.getterSetter = Object.getOwnPropertyDescriptor(this.domElement.__proto__, this.attributeToWatch), this._addWatcher(), this.settings.createLocalList && this._createLocalList(), this.constructor._addToGlobalList(this), this.global = {\n          set: function set(t, e) {\n            var i = 1 < arguments.length && void 0 !== e ? e : null;\n            s.autoNumericLocalList.forEach(function (e) {\n              e.set(t, i);\n            });\n          },\n          setUnformatted: function setUnformatted(t, e) {\n            var i = 1 < arguments.length && void 0 !== e ? e : null;\n            s.autoNumericLocalList.forEach(function (e) {\n              e.setUnformatted(t, i);\n            });\n          },\n          get: function get(e) {\n            var t = 0 < arguments.length && void 0 !== e ? e : null,\n                i = [];\n            return s.autoNumericLocalList.forEach(function (e) {\n              i.push(e.get());\n            }), s._executeCallback(i, t), i;\n          },\n          getNumericString: function getNumericString(e) {\n            var t = 0 < arguments.length && void 0 !== e ? e : null,\n                i = [];\n            return s.autoNumericLocalList.forEach(function (e) {\n              i.push(e.getNumericString());\n            }), s._executeCallback(i, t), i;\n          },\n          getFormatted: function getFormatted(e) {\n            var t = 0 < arguments.length && void 0 !== e ? e : null,\n                i = [];\n            return s.autoNumericLocalList.forEach(function (e) {\n              i.push(e.getFormatted());\n            }), s._executeCallback(i, t), i;\n          },\n          getNumber: function getNumber(e) {\n            var t = 0 < arguments.length && void 0 !== e ? e : null,\n                i = [];\n            return s.autoNumericLocalList.forEach(function (e) {\n              i.push(e.getNumber());\n            }), s._executeCallback(i, t), i;\n          },\n          getLocalized: function getLocalized(e) {\n            var t = 0 < arguments.length && void 0 !== e ? e : null,\n                i = [];\n            return s.autoNumericLocalList.forEach(function (e) {\n              i.push(e.getLocalized());\n            }), s._executeCallback(i, t), i;\n          },\n          reformat: function reformat() {\n            s.autoNumericLocalList.forEach(function (e) {\n              e.reformat();\n            });\n          },\n          unformat: function unformat() {\n            s.autoNumericLocalList.forEach(function (e) {\n              e.unformat();\n            });\n          },\n          unformatLocalized: function unformatLocalized(e) {\n            var t = 0 < arguments.length && void 0 !== e ? e : null;\n            s.autoNumericLocalList.forEach(function (e) {\n              e.unformatLocalized(t);\n            });\n          },\n          update: function update() {\n            for (var e = arguments.length, t = new Array(e), i = 0; i < e; i++) {\n              t[i] = arguments[i];\n            }\n\n            s.autoNumericLocalList.forEach(function (e) {\n              e.update.apply(e, t);\n            });\n          },\n          isPristine: function isPristine() {\n            var t = !(0 < arguments.length && void 0 !== arguments[0]) || arguments[0],\n                i = !0;\n            return s.autoNumericLocalList.forEach(function (e) {\n              i && !e.isPristine(t) && (i = !1);\n            }), i;\n          },\n          clear: function clear(e) {\n            var t = 0 < arguments.length && void 0 !== e && e;\n            s.autoNumericLocalList.forEach(function (e) {\n              e.clear(t);\n            });\n          },\n          remove: function remove() {\n            s.autoNumericLocalList.forEach(function (e) {\n              e.remove();\n            });\n          },\n          wipe: function wipe() {\n            s.autoNumericLocalList.forEach(function (e) {\n              e.wipe();\n            });\n          },\n          nuke: function nuke() {\n            s.autoNumericLocalList.forEach(function (e) {\n              e.nuke();\n            });\n          },\n          has: function has(e) {\n            return e instanceof B ? s.autoNumericLocalList.has(e.node()) : s.autoNumericLocalList.has(e);\n          },\n          addObject: function addObject(e) {\n            var t, i;\n            i = e instanceof B ? (t = e.node(), e) : B.getAutoNumericElement(t = e), s._hasLocalList() || s._createLocalList();\n\n            var n,\n                a = i._getLocalList();\n\n            0 === a.size && (i._createLocalList(), a = i._getLocalList()), (n = a instanceof Map ? M.mergeMaps(s._getLocalList(), a) : (s._addToLocalList(t, i), s._getLocalList())).forEach(function (e) {\n              e._setLocalList(n);\n            });\n          },\n          removeObject: function removeObject(e, t) {\n            var i,\n                n,\n                a = 1 < arguments.length && void 0 !== t && t;\n            n = e instanceof B ? (i = e.node(), e) : B.getAutoNumericElement(i = e);\n            var r = s.autoNumericLocalList;\n            s.autoNumericLocalList[\"delete\"](i), r.forEach(function (e) {\n              e._setLocalList(s.autoNumericLocalList);\n            }), a || i !== s.node() ? n._createLocalList() : n._setLocalList(new Map());\n          },\n          empty: function empty(e) {\n            var t = 0 < arguments.length && void 0 !== e && e;\n            s.autoNumericLocalList.forEach(function (e) {\n              t ? e._createLocalList() : e._setLocalList(new Map());\n            });\n          },\n          elements: function elements() {\n            var t = [];\n            return s.autoNumericLocalList.forEach(function (e) {\n              t.push(e.node());\n            }), t;\n          },\n          getList: function getList() {\n            return s.autoNumericLocalList;\n          },\n          size: function size() {\n            return s.autoNumericLocalList.size;\n          }\n        }, this.options = {\n          reset: function reset() {\n            return s.settings = {\n              rawValue: s.defaultRawValue\n            }, s.update(B.defaultSettings), s;\n          },\n          allowDecimalPadding: function allowDecimalPadding(e) {\n            return s.update({\n              allowDecimalPadding: e\n            }), s;\n          },\n          alwaysAllowDecimalCharacter: function alwaysAllowDecimalCharacter(e) {\n            return s.update({\n              alwaysAllowDecimalCharacter: e\n            }), s;\n          },\n          caretPositionOnFocus: function caretPositionOnFocus(e) {\n            return s.settings.caretPositionOnFocus = e, s;\n          },\n          createLocalList: function createLocalList(e) {\n            return s.settings.createLocalList = e, s.settings.createLocalList ? s._hasLocalList() || s._createLocalList() : s._deleteLocalList(), s;\n          },\n          currencySymbol: function currencySymbol(e) {\n            return s.update({\n              currencySymbol: e\n            }), s;\n          },\n          currencySymbolPlacement: function currencySymbolPlacement(e) {\n            return s.update({\n              currencySymbolPlacement: e\n            }), s;\n          },\n          decimalCharacter: function decimalCharacter(e) {\n            return s.update({\n              decimalCharacter: e\n            }), s;\n          },\n          decimalCharacterAlternative: function decimalCharacterAlternative(e) {\n            return s.settings.decimalCharacterAlternative = e, s;\n          },\n          decimalPlaces: function decimalPlaces(e) {\n            return M.warning(\"Using `options.decimalPlaces()` instead of calling the specific `options.decimalPlacesRawValue()`, `options.decimalPlacesShownOnFocus()` and `options.decimalPlacesShownOnBlur()` methods will reset those options.\\nPlease call the specific methods if you do not want to reset those.\", s.settings.showWarnings), s.update({\n              decimalPlaces: e\n            }), s;\n          },\n          decimalPlacesRawValue: function decimalPlacesRawValue(e) {\n            return s.update({\n              decimalPlacesRawValue: e\n            }), s;\n          },\n          decimalPlacesShownOnBlur: function decimalPlacesShownOnBlur(e) {\n            return s.update({\n              decimalPlacesShownOnBlur: e\n            }), s;\n          },\n          decimalPlacesShownOnFocus: function decimalPlacesShownOnFocus(e) {\n            return s.update({\n              decimalPlacesShownOnFocus: e\n            }), s;\n          },\n          defaultValueOverride: function defaultValueOverride(e) {\n            return s.update({\n              defaultValueOverride: e\n            }), s;\n          },\n          digitalGroupSpacing: function digitalGroupSpacing(e) {\n            return s.update({\n              digitalGroupSpacing: e\n            }), s;\n          },\n          digitGroupSeparator: function digitGroupSeparator(e) {\n            return s.update({\n              digitGroupSeparator: e\n            }), s;\n          },\n          divisorWhenUnfocused: function divisorWhenUnfocused(e) {\n            return s.update({\n              divisorWhenUnfocused: e\n            }), s;\n          },\n          emptyInputBehavior: function emptyInputBehavior(e) {\n            return null === s.rawValue && e !== B.options.emptyInputBehavior[\"null\"] && (M.warning(\"You are trying to modify the `emptyInputBehavior` option to something different than `'null'` (\".concat(e, \"), but the element raw value is currently set to `null`. This would result in an invalid `rawValue`. In order to fix that, the element value has been changed to the empty string `''`.\"), s.settings.showWarnings), s.rawValue = \"\"), s.update({\n              emptyInputBehavior: e\n            }), s;\n          },\n          eventBubbles: function eventBubbles(e) {\n            return s.settings.eventBubbles = e, s;\n          },\n          eventIsCancelable: function eventIsCancelable(e) {\n            return s.settings.eventIsCancelable = e, s;\n          },\n          failOnUnknownOption: function failOnUnknownOption(e) {\n            return s.settings.failOnUnknownOption = e, s;\n          },\n          formatOnPageLoad: function formatOnPageLoad(e) {\n            return s.settings.formatOnPageLoad = e, s;\n          },\n          formulaMode: function formulaMode(e) {\n            return s.settings.formulaMode = e, s;\n          },\n          historySize: function historySize(e) {\n            return s.settings.historySize = e, s;\n          },\n          invalidClass: function invalidClass(e) {\n            return s.settings.invalidClass = e, s;\n          },\n          isCancellable: function isCancellable(e) {\n            return s.settings.isCancellable = e, s;\n          },\n          leadingZero: function leadingZero(e) {\n            return s.update({\n              leadingZero: e\n            }), s;\n          },\n          maximumValue: function maximumValue(e) {\n            return s.update({\n              maximumValue: e\n            }), s;\n          },\n          minimumValue: function minimumValue(e) {\n            return s.update({\n              minimumValue: e\n            }), s;\n          },\n          modifyValueOnWheel: function modifyValueOnWheel(e) {\n            return s.settings.modifyValueOnWheel = e, s;\n          },\n          negativeBracketsTypeOnBlur: function negativeBracketsTypeOnBlur(e) {\n            return s.update({\n              negativeBracketsTypeOnBlur: e\n            }), s;\n          },\n          negativePositiveSignPlacement: function negativePositiveSignPlacement(e) {\n            return s.update({\n              negativePositiveSignPlacement: e\n            }), s;\n          },\n          negativeSignCharacter: function negativeSignCharacter(e) {\n            return s.update({\n              negativeSignCharacter: e\n            }), s;\n          },\n          noEventListeners: function noEventListeners(e) {\n            return e === B.options.noEventListeners.noEvents && s.settings.noEventListeners === B.options.noEventListeners.addEvents && s._removeEventListeners(), s.update({\n              noEventListeners: e\n            }), s;\n          },\n          onInvalidPaste: function onInvalidPaste(e) {\n            return s.settings.onInvalidPaste = e, s;\n          },\n          outputFormat: function outputFormat(e) {\n            return s.settings.outputFormat = e, s;\n          },\n          overrideMinMaxLimits: function overrideMinMaxLimits(e) {\n            return s.update({\n              overrideMinMaxLimits: e\n            }), s;\n          },\n          positiveSignCharacter: function positiveSignCharacter(e) {\n            return s.update({\n              positiveSignCharacter: e\n            }), s;\n          },\n          rawValueDivisor: function rawValueDivisor(e) {\n            return s.update({\n              rawValueDivisor: e\n            }), s;\n          },\n          readOnly: function readOnly(e) {\n            return s.settings.readOnly = e, s._setWritePermissions(), s;\n          },\n          roundingMethod: function roundingMethod(e) {\n            return s.update({\n              roundingMethod: e\n            }), s;\n          },\n          saveValueToSessionStorage: function saveValueToSessionStorage(e) {\n            return s.update({\n              saveValueToSessionStorage: e\n            }), s;\n          },\n          symbolWhenUnfocused: function symbolWhenUnfocused(e) {\n            return s.update({\n              symbolWhenUnfocused: e\n            }), s;\n          },\n          selectNumberOnly: function selectNumberOnly(e) {\n            return s.settings.selectNumberOnly = e, s;\n          },\n          selectOnFocus: function selectOnFocus(e) {\n            return s.settings.selectOnFocus = e, s;\n          },\n          serializeSpaces: function serializeSpaces(e) {\n            return s.settings.serializeSpaces = e, s;\n          },\n          showOnlyNumbersOnFocus: function showOnlyNumbersOnFocus(e) {\n            return s.update({\n              showOnlyNumbersOnFocus: e\n            }), s;\n          },\n          showPositiveSign: function showPositiveSign(e) {\n            return s.update({\n              showPositiveSign: e\n            }), s;\n          },\n          showWarnings: function showWarnings(e) {\n            return s.settings.showWarnings = e, s;\n          },\n          styleRules: function styleRules(e) {\n            return s.update({\n              styleRules: e\n            }), s;\n          },\n          suffixText: function suffixText(e) {\n            return s.update({\n              suffixText: e\n            }), s;\n          },\n          unformatOnHover: function unformatOnHover(e) {\n            return s.settings.unformatOnHover = e, s;\n          },\n          unformatOnSubmit: function unformatOnSubmit(e) {\n            return s.settings.unformatOnSubmit = e, s;\n          },\n          valuesToStrings: function valuesToStrings(e) {\n            return s.update({\n              valuesToStrings: e\n            }), s;\n          },\n          watchExternalChanges: function watchExternalChanges(e) {\n            return s.update({\n              watchExternalChanges: e\n            }), s;\n          },\n          wheelOn: function wheelOn(e) {\n            return s.settings.wheelOn = e, s;\n          },\n          wheelStep: function wheelStep(e) {\n            return s.settings.wheelStep = e, s;\n          }\n        }, this._triggerEvent(B.events.initialized, this.domElement, {\n          newValue: M.getElementValue(this.domElement),\n          newRawValue: this.rawValue,\n          error: null,\n          aNElement: this\n        });\n      }\n\n      var e, t;\n      return t = [{\n        key: \"version\",\n        value: function value() {\n          return \"4.6.0\";\n        }\n      }, {\n        key: \"_setArgumentsValues\",\n        value: function value(e, t, i) {\n          M.isNull(e) && M.throwError(\"At least one valid parameter is needed in order to initialize an AutoNumeric object\");\n\n          var n,\n              a,\n              r,\n              s = M.isElement(e),\n              o = M.isString(e),\n              l = M.isObject(t),\n              u = Array.isArray(t) && 0 < t.length,\n              c = M.isNumberOrArabic(t) || \"\" === t,\n              h = this._isPreDefinedOptionValid(t),\n              m = M.isNull(t),\n              g = M.isEmptyString(t),\n              d = M.isObject(i),\n              v = Array.isArray(i) && 0 < i.length,\n              p = M.isNull(i),\n              f = this._isPreDefinedOptionValid(i);\n\n          return s && m && p ? (n = e, a = r = null) : s && c && p ? (n = e, r = t, a = null) : s && l && p ? (n = e, r = null, a = t) : s && h && p ? (n = e, r = null, a = this._getOptionObject(t)) : s && u && p ? (n = e, r = null, a = this.mergeOptions(t)) : s && (m || g) && d ? (n = e, r = null, a = i) : s && (m || g) && v ? (n = e, r = null, a = this.mergeOptions(i)) : o && m && p ? (n = document.querySelector(e), a = r = null) : o && l && p ? (n = document.querySelector(e), r = null, a = t) : o && h && p ? (n = document.querySelector(e), r = null, a = this._getOptionObject(t)) : o && u && p ? (n = document.querySelector(e), r = null, a = this.mergeOptions(t)) : o && (m || g) && d ? (n = document.querySelector(e), r = null, a = i) : o && (m || g) && v ? (n = document.querySelector(e), r = null, a = this.mergeOptions(i)) : o && c && p ? (n = document.querySelector(e), r = t, a = null) : o && c && d ? (n = document.querySelector(e), r = t, a = i) : o && c && f ? (n = document.querySelector(e), r = t, a = this._getOptionObject(i)) : o && c && v ? (n = document.querySelector(e), r = t, a = this.mergeOptions(i)) : s && c && d ? (n = e, r = t, a = i) : s && c && f ? (n = e, r = t, a = this._getOptionObject(i)) : s && c && v ? (n = e, r = t, a = this.mergeOptions(i)) : M.throwError(\"The parameters given to the AutoNumeric object are not valid, '\".concat(e, \"', '\").concat(t, \"' and '\").concat(i, \"' given.\")), M.isNull(n) && M.throwError(\"The selector '\".concat(e, \"' did not select any valid DOM element. Please check on which element you called AutoNumeric.\")), {\n            domElement: n,\n            initialValue: r,\n            userOptions: a\n          };\n        }\n      }, {\n        key: \"mergeOptions\",\n        value: function value(e) {\n          var t = this,\n              i = {};\n          return e.forEach(function (e) {\n            b(i, t._getOptionObject(e));\n          }), i;\n        }\n      }, {\n        key: \"_isPreDefinedOptionValid\",\n        value: function value(e) {\n          return Object.prototype.hasOwnProperty.call(B.predefinedOptions, e);\n        }\n      }, {\n        key: \"_getOptionObject\",\n        value: function value(e) {\n          var t;\n          return M.isString(e) ? null == (t = B.getPredefinedOptions()[e]) && M.warning(\"The given pre-defined option [\".concat(e, \"] is not recognized by autoNumeric. Please check that pre-defined option name.\"), !0) : t = e, t;\n        }\n      }, {\n        key: \"_doesFormHandlerListExists\",\n        value: function value() {\n          var e = w(window.aNFormHandlerMap);\n          return \"undefined\" !== e && \"object\" === e;\n        }\n      }, {\n        key: \"_createFormHandlerList\",\n        value: function value() {\n          window.aNFormHandlerMap = new Map();\n        }\n      }, {\n        key: \"_checkValuesToStringsArray\",\n        value: function value(e, t) {\n          return M.isInArray(String(e), t);\n        }\n      }, {\n        key: \"_checkValuesToStringsSettings\",\n        value: function value(e, t) {\n          return this._checkValuesToStringsArray(e, Object.keys(t.valuesToStrings));\n        }\n      }, {\n        key: \"_checkStringsToValuesSettings\",\n        value: function value(e, t) {\n          return this._checkValuesToStringsArray(e, Object.values(t.valuesToStrings));\n        }\n      }, {\n        key: \"_unformatAltHovered\",\n        value: function value(e) {\n          e.hoveredWithAlt = !0, e.unformat();\n        }\n      }, {\n        key: \"_reformatAltHovered\",\n        value: function value(e) {\n          e.hoveredWithAlt = !1, e.reformat();\n        }\n      }, {\n        key: \"_getChildANInputElement\",\n        value: function value(e) {\n          var t = this,\n              i = e.getElementsByTagName(\"input\"),\n              n = [];\n          return Array.prototype.slice.call(i, 0).forEach(function (e) {\n            t.test(e) && n.push(e);\n          }), n;\n        }\n      }, {\n        key: \"test\",\n        value: function value(e) {\n          return this._isInGlobalList(M.domElement(e));\n        }\n      }, {\n        key: \"_createWeakMap\",\n        value: function value(e) {\n          window[e] = new WeakMap();\n        }\n      }, {\n        key: \"_createGlobalList\",\n        value: function value() {\n          this.autoNumericGlobalListName = \"autoNumericGlobalList\", this._createWeakMap(this.autoNumericGlobalListName);\n        }\n      }, {\n        key: \"_doesGlobalListExists\",\n        value: function value() {\n          var e = w(window[this.autoNumericGlobalListName]);\n          return \"undefined\" !== e && \"object\" === e;\n        }\n      }, {\n        key: \"_addToGlobalList\",\n        value: function value(e) {\n          this._doesGlobalListExists() || this._createGlobalList();\n          var t = e.node();\n\n          if (this._isInGlobalList(t)) {\n            if (this._getFromGlobalList(t) === this) return;\n            M.warning(\"A reference to the DOM element you just initialized already exists in the global AutoNumeric element list. Please make sure to not initialize the same DOM element multiple times.\", e.getSettings().showWarnings);\n          }\n\n          window[this.autoNumericGlobalListName].set(t, e);\n        }\n      }, {\n        key: \"_removeFromGlobalList\",\n        value: function value(e) {\n          this._doesGlobalListExists() && window[this.autoNumericGlobalListName][\"delete\"](e.node());\n        }\n      }, {\n        key: \"_getFromGlobalList\",\n        value: function value(e) {\n          return this._doesGlobalListExists() ? window[this.autoNumericGlobalListName].get(e) : null;\n        }\n      }, {\n        key: \"_isInGlobalList\",\n        value: function value(e) {\n          return !!this._doesGlobalListExists() && window[this.autoNumericGlobalListName].has(e);\n        }\n      }, {\n        key: \"validate\",\n        value: function value(e, t, i) {\n          var n = !(1 < arguments.length && void 0 !== t) || t,\n              a = 2 < arguments.length && void 0 !== i ? i : null;\n          !M.isUndefinedOrNullOrEmpty(e) && M.isObject(e) || M.throwError(\"The userOptions are invalid ; it should be a valid object, [\".concat(e, \"] given.\"));\n          var r,\n              s = M.isObject(a);\n          s || M.isNull(a) || M.throwError(\"The 'originalOptions' parameter is invalid ; it should either be a valid option object or `null`, [\".concat(e, \"] given.\")), M.isNull(e) || this._convertOldOptionsToNewOnes(e), r = n ? b({}, this.getDefaultConfig(), e) : e, M.isTrueOrFalseString(r.showWarnings) || M.isBoolean(r.showWarnings) || M.throwError(\"The debug option 'showWarnings' is invalid ; it should be either 'true' or 'false', [\".concat(r.showWarnings, \"] given.\"));\n          var o,\n              l = /^[0-9]+$/,\n              u = /[0-9]+/,\n              c = /^-?[0-9]+(\\.?[0-9]+)?$/,\n              h = /^[0-9]+(\\.?[0-9]+)?$/;\n          M.isTrueOrFalseString(r.allowDecimalPadding) || M.isBoolean(r.allowDecimalPadding) || r.allowDecimalPadding === B.options.allowDecimalPadding.floats || M.throwError(\"The decimal padding option 'allowDecimalPadding' is invalid ; it should either be `false`, `true` or `'floats'`, [\".concat(r.allowDecimalPadding, \"] given.\")), r.allowDecimalPadding !== B.options.allowDecimalPadding.never && \"false\" !== r.allowDecimalPadding || r.decimalPlaces === B.options.decimalPlaces.none && r.decimalPlacesShownOnBlur === B.options.decimalPlacesShownOnBlur.none && r.decimalPlacesShownOnFocus === B.options.decimalPlacesShownOnFocus.none || M.warning(\"Setting 'allowDecimalPadding' to [\".concat(r.allowDecimalPadding, \"] will override the current 'decimalPlaces*' settings [\").concat(r.decimalPlaces, \", \").concat(r.decimalPlacesShownOnBlur, \" and \").concat(r.decimalPlacesShownOnFocus, \"].\"), r.showWarnings), M.isTrueOrFalseString(r.alwaysAllowDecimalCharacter) || M.isBoolean(r.alwaysAllowDecimalCharacter) || M.throwError(\"The option 'alwaysAllowDecimalCharacter' is invalid ; it should either be `true` or `false`, [\".concat(r.alwaysAllowDecimalCharacter, \"] given.\")), M.isNull(r.caretPositionOnFocus) || M.isInArray(r.caretPositionOnFocus, [B.options.caretPositionOnFocus.start, B.options.caretPositionOnFocus.end, B.options.caretPositionOnFocus.decimalLeft, B.options.caretPositionOnFocus.decimalRight]) || M.throwError(\"The display on empty string option 'caretPositionOnFocus' is invalid ; it should either be `null`, 'focus', 'press', 'always' or 'zero', [\".concat(r.caretPositionOnFocus, \"] given.\")), o = s ? a : this._correctCaretPositionOnFocusAndSelectOnFocusOptions(e), M.isNull(o) || o.caretPositionOnFocus === B.options.caretPositionOnFocus.doNoForceCaretPosition || o.selectOnFocus !== B.options.selectOnFocus.select || M.warning(\"The 'selectOnFocus' option is set to 'select', which is in conflict with the 'caretPositionOnFocus' which is set to '\".concat(o.caretPositionOnFocus, \"'. As a result, if this has been called when instantiating an AutoNumeric object, the 'selectOnFocus' option is forced to 'doNotSelect'.\"), r.showWarnings), M.isInArray(r.digitGroupSeparator, [B.options.digitGroupSeparator.comma, B.options.digitGroupSeparator.dot, B.options.digitGroupSeparator.normalSpace, B.options.digitGroupSeparator.thinSpace, B.options.digitGroupSeparator.narrowNoBreakSpace, B.options.digitGroupSeparator.noBreakSpace, B.options.digitGroupSeparator.noSeparator, B.options.digitGroupSeparator.apostrophe, B.options.digitGroupSeparator.arabicThousandsSeparator, B.options.digitGroupSeparator.dotAbove, B.options.digitGroupSeparator.privateUseTwo]) || M.throwError(\"The thousand separator character option 'digitGroupSeparator' is invalid ; it should be ',', '.', 'Ù¬', 'Ë', \\\"'\\\", 'Â', ' ', 'â', 'â¯', 'Â ' or empty (''), [\".concat(r.digitGroupSeparator, \"] given.\")), M.isTrueOrFalseString(r.showOnlyNumbersOnFocus) || M.isBoolean(r.showOnlyNumbersOnFocus) || M.throwError(\"The 'showOnlyNumbersOnFocus' option is invalid ; it should be either 'true' or 'false', [\".concat(r.showOnlyNumbersOnFocus, \"] given.\")), M.isInArray(r.digitalGroupSpacing, [B.options.digitalGroupSpacing.two, B.options.digitalGroupSpacing.twoScaled, B.options.digitalGroupSpacing.three, B.options.digitalGroupSpacing.four]) || 2 <= r.digitalGroupSpacing && r.digitalGroupSpacing <= 4 || M.throwError(\"The grouping separator option for thousands 'digitalGroupSpacing' is invalid ; it should be '2', '2s', '3', or '4', [\".concat(r.digitalGroupSpacing, \"] given.\")), M.isInArray(r.decimalCharacter, [B.options.decimalCharacter.comma, B.options.decimalCharacter.dot, B.options.decimalCharacter.middleDot, B.options.decimalCharacter.arabicDecimalSeparator, B.options.decimalCharacter.decimalSeparatorKeySymbol]) || M.throwError(\"The decimal separator character option 'decimalCharacter' is invalid ; it should be '.', ',', 'Â·', 'â' or 'Ù«', [\".concat(r.decimalCharacter, \"] given.\")), r.decimalCharacter === r.digitGroupSeparator && M.throwError(\"autoNumeric will not function properly when the decimal character 'decimalCharacter' [\".concat(r.decimalCharacter, \"] and the thousand separator 'digitGroupSeparator' [\").concat(r.digitGroupSeparator, \"] are the same character.\")), M.isNull(r.decimalCharacterAlternative) || M.isString(r.decimalCharacterAlternative) || M.throwError(\"The alternate decimal separator character option 'decimalCharacterAlternative' is invalid ; it should be a string, [\".concat(r.decimalCharacterAlternative, \"] given.\")), \"\" === r.currencySymbol || M.isString(r.currencySymbol) || M.throwError(\"The currency symbol option 'currencySymbol' is invalid ; it should be a string, [\".concat(r.currencySymbol, \"] given.\")), M.isInArray(r.currencySymbolPlacement, [B.options.currencySymbolPlacement.prefix, B.options.currencySymbolPlacement.suffix]) || M.throwError(\"The placement of the currency sign option 'currencySymbolPlacement' is invalid ; it should either be 'p' (prefix) or 's' (suffix), [\".concat(r.currencySymbolPlacement, \"] given.\")), M.isInArray(r.negativePositiveSignPlacement, [B.options.negativePositiveSignPlacement.prefix, B.options.negativePositiveSignPlacement.suffix, B.options.negativePositiveSignPlacement.left, B.options.negativePositiveSignPlacement.right, B.options.negativePositiveSignPlacement.none]) || M.throwError(\"The placement of the negative sign option 'negativePositiveSignPlacement' is invalid ; it should either be 'p' (prefix), 's' (suffix), 'l' (left), 'r' (right) or 'null', [\".concat(r.negativePositiveSignPlacement, \"] given.\")), M.isTrueOrFalseString(r.showPositiveSign) || M.isBoolean(r.showPositiveSign) || M.throwError(\"The show positive sign option 'showPositiveSign' is invalid ; it should be either 'true' or 'false', [\".concat(r.showPositiveSign, \"] given.\")), M.isString(r.suffixText) && (\"\" === r.suffixText || !M.isNegative(r.suffixText, r.negativeSignCharacter) && !u.test(r.suffixText)) || M.throwError(\"The additional suffix option 'suffixText' is invalid ; it should not contains the negative sign '\".concat(r.negativeSignCharacter, \"' nor any numerical characters, [\").concat(r.suffixText, \"] given.\")), M.isString(r.negativeSignCharacter) && 1 === r.negativeSignCharacter.length && !M.isUndefinedOrNullOrEmpty(r.negativeSignCharacter) && !u.test(r.negativeSignCharacter) || M.throwError(\"The negative sign character option 'negativeSignCharacter' is invalid ; it should be a single character, and cannot be any numerical characters, [\".concat(r.negativeSignCharacter, \"] given.\")), M.isString(r.positiveSignCharacter) && 1 === r.positiveSignCharacter.length && !M.isUndefinedOrNullOrEmpty(r.positiveSignCharacter) && !u.test(r.positiveSignCharacter) || M.throwError(\"The positive sign character option 'positiveSignCharacter' is invalid ; it should be a single character, and cannot be any numerical characters, [\".concat(r.positiveSignCharacter, \"] given.\\nIf you want to hide the positive sign character, you need to set the `showPositiveSign` option to `true`.\")), r.negativeSignCharacter === r.positiveSignCharacter && M.throwError(\"The positive 'positiveSignCharacter' and negative 'negativeSignCharacter' sign characters cannot be identical ; [\".concat(r.negativeSignCharacter, \"] given.\"));\n          var m = S(M.isNull(r.negativeBracketsTypeOnBlur) ? [\"\", \"\"] : r.negativeBracketsTypeOnBlur.split(\",\"), 2),\n              g = m[0],\n              d = m[1];\n          (M.contains(r.digitGroupSeparator, r.negativeSignCharacter) || M.contains(r.decimalCharacter, r.negativeSignCharacter) || M.contains(r.decimalCharacterAlternative, r.negativeSignCharacter) || M.contains(g, r.negativeSignCharacter) || M.contains(d, r.negativeSignCharacter) || M.contains(r.suffixText, r.negativeSignCharacter)) && M.throwError(\"The negative sign character option 'negativeSignCharacter' is invalid ; it should not be equal or a part of the digit separator, the decimal character, the decimal character alternative, the negative brackets or the suffix text, [\".concat(r.negativeSignCharacter, \"] given.\")), (M.contains(r.digitGroupSeparator, r.positiveSignCharacter) || M.contains(r.decimalCharacter, r.positiveSignCharacter) || M.contains(r.decimalCharacterAlternative, r.positiveSignCharacter) || M.contains(g, r.positiveSignCharacter) || M.contains(d, r.positiveSignCharacter) || M.contains(r.suffixText, r.positiveSignCharacter)) && M.throwError(\"The positive sign character option 'positiveSignCharacter' is invalid ; it should not be equal or a part of the digit separator, the decimal character, the decimal character alternative, the negative brackets or the suffix text, [\".concat(r.positiveSignCharacter, \"] given.\")), M.isNull(r.overrideMinMaxLimits) || M.isInArray(r.overrideMinMaxLimits, [B.options.overrideMinMaxLimits.ceiling, B.options.overrideMinMaxLimits.floor, B.options.overrideMinMaxLimits.ignore, B.options.overrideMinMaxLimits.invalid]) || M.throwError(\"The override min & max limits option 'overrideMinMaxLimits' is invalid ; it should either be 'ceiling', 'floor', 'ignore' or 'invalid', [\".concat(r.overrideMinMaxLimits, \"] given.\")), r.overrideMinMaxLimits !== B.options.overrideMinMaxLimits.invalid && r.overrideMinMaxLimits !== B.options.overrideMinMaxLimits.ignore && (0 < r.minimumValue || r.maximumValue < 0) && M.warning(\"You've set a `minimumValue` or a `maximumValue` excluding the value `0`. AutoNumeric will force the users to always have a valid value in the input, hence preventing them to clear the field. If you want to allow for temporary invalid values (ie. out-of-range), you should use the 'invalid' option for the 'overrideMinMaxLimits' setting.\"), M.isString(r.maximumValue) && c.test(r.maximumValue) || M.throwError(\"The maximum possible value option 'maximumValue' is invalid ; it should be a string that represents a positive or negative number, [\".concat(r.maximumValue, \"] given.\")), M.isString(r.minimumValue) && c.test(r.minimumValue) || M.throwError(\"The minimum possible value option 'minimumValue' is invalid ; it should be a string that represents a positive or negative number, [\".concat(r.minimumValue, \"] given.\")), parseFloat(r.minimumValue) > parseFloat(r.maximumValue) && M.throwError(\"The minimum possible value option is greater than the maximum possible value option ; 'minimumValue' [\".concat(r.minimumValue, \"] should be smaller than 'maximumValue' [\").concat(r.maximumValue, \"].\")), M.isInt(r.decimalPlaces) && 0 <= r.decimalPlaces || M.isString(r.decimalPlaces) && l.test(r.decimalPlaces) || M.throwError(\"The number of decimal places option 'decimalPlaces' is invalid ; it should be a positive integer, [\".concat(r.decimalPlaces, \"] given.\")), M.isNull(r.decimalPlacesRawValue) || M.isInt(r.decimalPlacesRawValue) && 0 <= r.decimalPlacesRawValue || M.isString(r.decimalPlacesRawValue) && l.test(r.decimalPlacesRawValue) || M.throwError(\"The number of decimal places for the raw value option 'decimalPlacesRawValue' is invalid ; it should be a positive integer or `null`, [\".concat(r.decimalPlacesRawValue, \"] given.\")), this._validateDecimalPlacesRawValue(r), M.isNull(r.decimalPlacesShownOnFocus) || l.test(String(r.decimalPlacesShownOnFocus)) || M.throwError(\"The number of expanded decimal places option 'decimalPlacesShownOnFocus' is invalid ; it should be a positive integer or `null`, [\".concat(r.decimalPlacesShownOnFocus, \"] given.\")), !M.isNull(r.decimalPlacesShownOnFocus) && Number(r.decimalPlaces) > Number(r.decimalPlacesShownOnFocus) && M.warning(\"The extended decimal places 'decimalPlacesShownOnFocus' [\".concat(r.decimalPlacesShownOnFocus, \"] should be greater than the 'decimalPlaces' [\").concat(r.decimalPlaces, \"] value. Currently, this will limit the ability of your user to manually change some of the decimal places. Do you really want to do that?\"), r.showWarnings), (M.isNull(r.divisorWhenUnfocused) || h.test(r.divisorWhenUnfocused)) && 0 !== r.divisorWhenUnfocused && \"0\" !== r.divisorWhenUnfocused && 1 !== r.divisorWhenUnfocused && \"1\" !== r.divisorWhenUnfocused || M.throwError(\"The divisor option 'divisorWhenUnfocused' is invalid ; it should be a positive number higher than one, preferably an integer, [\".concat(r.divisorWhenUnfocused, \"] given.\")), M.isNull(r.decimalPlacesShownOnBlur) || l.test(r.decimalPlacesShownOnBlur) || M.throwError(\"The number of decimals shown when unfocused option 'decimalPlacesShownOnBlur' is invalid ; it should be a positive integer or `null`, [\".concat(r.decimalPlacesShownOnBlur, \"] given.\")), M.isNull(r.symbolWhenUnfocused) || M.isString(r.symbolWhenUnfocused) || M.throwError(\"The symbol to show when unfocused option 'symbolWhenUnfocused' is invalid ; it should be a string, [\".concat(r.symbolWhenUnfocused, \"] given.\")), M.isTrueOrFalseString(r.saveValueToSessionStorage) || M.isBoolean(r.saveValueToSessionStorage) || M.throwError(\"The save to session storage option 'saveValueToSessionStorage' is invalid ; it should be either 'true' or 'false', [\".concat(r.saveValueToSessionStorage, \"] given.\")), M.isInArray(r.onInvalidPaste, [B.options.onInvalidPaste.error, B.options.onInvalidPaste.ignore, B.options.onInvalidPaste.clamp, B.options.onInvalidPaste.truncate, B.options.onInvalidPaste.replace]) || M.throwError(\"The paste behavior option 'onInvalidPaste' is invalid ; it should either be 'error', 'ignore', 'clamp', 'truncate' or 'replace' (cf. documentation), [\".concat(r.onInvalidPaste, \"] given.\")), M.isInArray(r.roundingMethod, [B.options.roundingMethod.halfUpSymmetric, B.options.roundingMethod.halfUpAsymmetric, B.options.roundingMethod.halfDownSymmetric, B.options.roundingMethod.halfDownAsymmetric, B.options.roundingMethod.halfEvenBankersRounding, B.options.roundingMethod.upRoundAwayFromZero, B.options.roundingMethod.downRoundTowardZero, B.options.roundingMethod.toCeilingTowardPositiveInfinity, B.options.roundingMethod.toFloorTowardNegativeInfinity, B.options.roundingMethod.toNearest05, B.options.roundingMethod.toNearest05Alt, B.options.roundingMethod.upToNext05, B.options.roundingMethod.downToNext05]) || M.throwError(\"The rounding method option 'roundingMethod' is invalid ; it should either be 'S', 'A', 's', 'a', 'B', 'U', 'D', 'C', 'F', 'N05', 'CHF', 'U05' or 'D05' (cf. documentation), [\".concat(r.roundingMethod, \"] given.\")), M.isNull(r.negativeBracketsTypeOnBlur) || M.isInArray(r.negativeBracketsTypeOnBlur, [B.options.negativeBracketsTypeOnBlur.parentheses, B.options.negativeBracketsTypeOnBlur.brackets, B.options.negativeBracketsTypeOnBlur.chevrons, B.options.negativeBracketsTypeOnBlur.curlyBraces, B.options.negativeBracketsTypeOnBlur.angleBrackets, B.options.negativeBracketsTypeOnBlur.japaneseQuotationMarks, B.options.negativeBracketsTypeOnBlur.halfBrackets, B.options.negativeBracketsTypeOnBlur.whiteSquareBrackets, B.options.negativeBracketsTypeOnBlur.quotationMarks, B.options.negativeBracketsTypeOnBlur.guillemets]) || M.throwError(\"The brackets for negative values option 'negativeBracketsTypeOnBlur' is invalid ; it should either be '(,)', '[,]', '<,>', '{,}', 'ã,ã', 'ï½¢,ï½£', 'â¸¤,â¸¥', 'â¦,â§', 'â¹,âº' or 'Â«,Â»', [\".concat(r.negativeBracketsTypeOnBlur, \"] given.\")), (M.isString(r.emptyInputBehavior) || M.isNumber(r.emptyInputBehavior)) && (M.isInArray(r.emptyInputBehavior, [B.options.emptyInputBehavior.focus, B.options.emptyInputBehavior.press, B.options.emptyInputBehavior.always, B.options.emptyInputBehavior.min, B.options.emptyInputBehavior.max, B.options.emptyInputBehavior.zero, B.options.emptyInputBehavior[\"null\"]]) || c.test(r.emptyInputBehavior)) || M.throwError(\"The display on empty string option 'emptyInputBehavior' is invalid ; it should either be 'focus', 'press', 'always', 'min', 'max', 'zero', 'null', a number, or a string that represents a number, [\".concat(r.emptyInputBehavior, \"] given.\")), r.emptyInputBehavior === B.options.emptyInputBehavior.zero && (0 < r.minimumValue || r.maximumValue < 0) && M.throwError(\"The 'emptyInputBehavior' option is set to 'zero', but this value is outside of the range defined by 'minimumValue' and 'maximumValue' [\".concat(r.minimumValue, \", \").concat(r.maximumValue, \"].\")), c.test(String(r.emptyInputBehavior)) && (this._isWithinRangeWithOverrideOption(r.emptyInputBehavior, r) || M.throwError(\"The 'emptyInputBehavior' option is set to a number or a string that represents a number, but its value [\".concat(r.emptyInputBehavior, \"] is outside of the range defined by the 'minimumValue' and 'maximumValue' options [\").concat(r.minimumValue, \", \").concat(r.maximumValue, \"].\"))), M.isTrueOrFalseString(r.eventBubbles) || M.isBoolean(r.eventBubbles) || M.throwError(\"The event bubbles option 'eventBubbles' is invalid ; it should be either 'true' or 'false', [\".concat(r.eventBubbles, \"] given.\")), M.isTrueOrFalseString(r.eventIsCancelable) || M.isBoolean(r.eventIsCancelable) || M.throwError(\"The event is cancelable option 'eventIsCancelable' is invalid ; it should be either 'true' or 'false', [\".concat(r.eventIsCancelable, \"] given.\")), !M.isBoolean(r.invalidClass) && /^-?[_a-zA-Z]+[_a-zA-Z0-9-]*$/.test(r.invalidClass) || M.throwError(\"The name of the 'invalidClass' option is not a valid CSS class name ; it should not be empty, and should follow the '^-?[_a-zA-Z]+[_a-zA-Z0-9-]*$' regex, [\".concat(r.invalidClass, \"] given.\")), M.isInArray(r.leadingZero, [B.options.leadingZero.allow, B.options.leadingZero.deny, B.options.leadingZero.keep]) || M.throwError(\"The leading zero behavior option 'leadingZero' is invalid ; it should either be 'allow', 'deny' or 'keep', [\".concat(r.leadingZero, \"] given.\")), M.isTrueOrFalseString(r.formatOnPageLoad) || M.isBoolean(r.formatOnPageLoad) || M.throwError(\"The format on initialization option 'formatOnPageLoad' is invalid ; it should be either 'true' or 'false', [\".concat(r.formatOnPageLoad, \"] given.\")), M.isTrueOrFalseString(r.formulaMode) || M.isBoolean(r.formulaMode) || M.throwError(\"The formula mode option 'formulaMode' is invalid ; it should be either 'true' or 'false', [\".concat(r.formulaMode, \"] given.\")), l.test(r.historySize) && 0 !== r.historySize || M.throwError(\"The history size option 'historySize' is invalid ; it should be a positive integer, [\".concat(r.historySize, \"] given.\")), M.isTrueOrFalseString(r.selectNumberOnly) || M.isBoolean(r.selectNumberOnly) || M.throwError(\"The select number only option 'selectNumberOnly' is invalid ; it should be either 'true' or 'false', [\".concat(r.selectNumberOnly, \"] given.\")), M.isTrueOrFalseString(r.selectOnFocus) || M.isBoolean(r.selectOnFocus) || M.throwError(\"The select on focus option 'selectOnFocus' is invalid ; it should be either 'true' or 'false', [\".concat(r.selectOnFocus, \"] given.\")), M.isNull(r.defaultValueOverride) || \"\" === r.defaultValueOverride || c.test(r.defaultValueOverride) || M.throwError(\"The unformatted default value option 'defaultValueOverride' is invalid ; it should be a string that represents a positive or negative number, [\".concat(r.defaultValueOverride, \"] given.\")), M.isTrueOrFalseString(r.unformatOnSubmit) || M.isBoolean(r.unformatOnSubmit) || M.throwError(\"The remove formatting on submit option 'unformatOnSubmit' is invalid ; it should be either 'true' or 'false', [\".concat(r.unformatOnSubmit, \"] given.\")), M.isNull(r.valuesToStrings) || M.isObject(r.valuesToStrings) || M.throwError(\"The option 'valuesToStrings' is invalid ; it should be an object, ideally with 'key -> value' entries, [\".concat(r.valuesToStrings, \"] given.\")), M.isNull(r.outputFormat) || M.isInArray(r.outputFormat, [B.options.outputFormat.string, B.options.outputFormat.number, B.options.outputFormat.dot, B.options.outputFormat.negativeDot, B.options.outputFormat.comma, B.options.outputFormat.negativeComma, B.options.outputFormat.dotNegative, B.options.outputFormat.commaNegative]) || M.throwError(\"The custom locale format option 'outputFormat' is invalid ; it should either be null, 'string', 'number', '.', '-.', ',', '-,', '.-' or ',-', [\".concat(r.outputFormat, \"] given.\")), M.isTrueOrFalseString(r.isCancellable) || M.isBoolean(r.isCancellable) || M.throwError(\"The cancellable behavior option 'isCancellable' is invalid ; it should be either 'true' or 'false', [\".concat(r.isCancellable, \"] given.\")), M.isTrueOrFalseString(r.modifyValueOnWheel) || M.isBoolean(r.modifyValueOnWheel) || M.throwError(\"The increment/decrement on mouse wheel option 'modifyValueOnWheel' is invalid ; it should be either 'true' or 'false', [\".concat(r.modifyValueOnWheel, \"] given.\")), M.isTrueOrFalseString(r.watchExternalChanges) || M.isBoolean(r.watchExternalChanges) || M.throwError(\"The option 'watchExternalChanges' is invalid ; it should be either 'true' or 'false', [\".concat(r.watchExternalChanges, \"] given.\")), M.isInArray(r.wheelOn, [B.options.wheelOn.focus, B.options.wheelOn.hover]) || M.throwError(\"The wheel behavior option 'wheelOn' is invalid ; it should either be 'focus' or 'hover', [\".concat(r.wheelOn, \"] given.\")), (M.isString(r.wheelStep) || M.isNumber(r.wheelStep)) && (\"progressive\" === r.wheelStep || h.test(r.wheelStep)) && 0 !== Number(r.wheelStep) || M.throwError(\"The wheel step value option 'wheelStep' is invalid ; it should either be the string 'progressive', or a number or a string that represents a positive number (excluding zero), [\".concat(r.wheelStep, \"] given.\")), M.isInArray(r.serializeSpaces, [B.options.serializeSpaces.plus, B.options.serializeSpaces.percent]) || M.throwError(\"The space replacement character option 'serializeSpaces' is invalid ; it should either be '+' or '%20', [\".concat(r.serializeSpaces, \"] given.\")), M.isTrueOrFalseString(r.noEventListeners) || M.isBoolean(r.noEventListeners) || M.throwError(\"The option 'noEventListeners' that prevent the creation of event listeners is invalid ; it should be either 'true' or 'false', [\".concat(r.noEventListeners, \"] given.\")), M.isNull(r.styleRules) || M.isObject(r.styleRules) && (Object.prototype.hasOwnProperty.call(r.styleRules, \"positive\") || Object.prototype.hasOwnProperty.call(r.styleRules, \"negative\") || Object.prototype.hasOwnProperty.call(r.styleRules, \"ranges\") || Object.prototype.hasOwnProperty.call(r.styleRules, \"userDefined\")) || M.throwError(\"The option 'styleRules' is invalid ; it should be a correctly structured object, with one or more 'positive', 'negative', 'ranges' or 'userDefined' attributes, [\".concat(r.styleRules, \"] given.\")), M.isNull(r.styleRules) || !Object.prototype.hasOwnProperty.call(r.styleRules, \"userDefined\") || M.isNull(r.styleRules.userDefined) || r.styleRules.userDefined.forEach(function (e) {\n            Object.prototype.hasOwnProperty.call(e, \"callback\") && !M.isFunction(e.callback) && M.throwError(\"The callback defined in the `userDefined` attribute is not a function, \".concat(w(e.callback), \" given.\"));\n          }), (M.isNull(r.rawValueDivisor) || h.test(r.rawValueDivisor)) && 0 !== r.rawValueDivisor && \"0\" !== r.rawValueDivisor && 1 !== r.rawValueDivisor && \"1\" !== r.rawValueDivisor || M.throwError(\"The raw value divisor option 'rawValueDivisor' is invalid ; it should be a positive number higher than one, preferably an integer, [\".concat(r.rawValueDivisor, \"] given.\")), M.isTrueOrFalseString(r.readOnly) || M.isBoolean(r.readOnly) || M.throwError(\"The option 'readOnly' is invalid ; it should be either 'true' or 'false', [\".concat(r.readOnly, \"] given.\")), M.isTrueOrFalseString(r.unformatOnHover) || M.isBoolean(r.unformatOnHover) || M.throwError(\"The option 'unformatOnHover' is invalid ; it should be either 'true' or 'false', [\".concat(r.unformatOnHover, \"] given.\")), M.isTrueOrFalseString(r.failOnUnknownOption) || M.isBoolean(r.failOnUnknownOption) || M.throwError(\"The debug option 'failOnUnknownOption' is invalid ; it should be either 'true' or 'false', [\".concat(r.failOnUnknownOption, \"] given.\")), M.isTrueOrFalseString(r.createLocalList) || M.isBoolean(r.createLocalList) || M.throwError(\"The debug option 'createLocalList' is invalid ; it should be either 'true' or 'false', [\".concat(r.createLocalList, \"] given.\"));\n        }\n      }, {\n        key: \"_validateDecimalPlacesRawValue\",\n        value: function value(e) {\n          M.isNull(e.decimalPlacesRawValue) || (e.decimalPlacesRawValue < e.decimalPlaces && M.warning(\"The number of decimal places to store in the raw value [\".concat(e.decimalPlacesRawValue, \"] is lower than the ones to display [\").concat(e.decimalPlaces, \"]. This will likely confuse your users.\\nTo solve that, you'd need to either set `decimalPlacesRawValue` to `null`, or set a number of decimal places for the raw value equal of bigger than `decimalPlaces`.\"), e.showWarnings), e.decimalPlacesRawValue < e.decimalPlacesShownOnFocus && M.warning(\"The number of decimal places to store in the raw value [\".concat(e.decimalPlacesRawValue, \"] is lower than the ones shown on focus [\").concat(e.decimalPlacesShownOnFocus, \"]. This will likely confuse your users.\\nTo solve that, you'd need to either set `decimalPlacesRawValue` to `null`, or set a number of decimal places for the raw value equal of bigger than `decimalPlacesShownOnFocus`.\"), e.showWarnings), e.decimalPlacesRawValue < e.decimalPlacesShownOnBlur && M.warning(\"The number of decimal places to store in the raw value [\".concat(e.decimalPlacesRawValue, \"] is lower than the ones shown when unfocused [\").concat(e.decimalPlacesShownOnBlur, \"]. This will likely confuse your users.\\nTo solve that, you'd need to either set `decimalPlacesRawValue` to `null`, or set a number of decimal places for the raw value equal of bigger than `decimalPlacesShownOnBlur`.\"), e.showWarnings));\n        }\n      }, {\n        key: \"areSettingsValid\",\n        value: function value(e) {\n          var t = !0;\n\n          try {\n            this.validate(e, !0);\n          } catch (e) {\n            t = !1;\n          }\n\n          return t;\n        }\n      }, {\n        key: \"getDefaultConfig\",\n        value: function value() {\n          return B.defaultSettings;\n        }\n      }, {\n        key: \"getPredefinedOptions\",\n        value: function value() {\n          return B.predefinedOptions;\n        }\n      }, {\n        key: \"_generateOptionsObjectFromOptionsArray\",\n        value: function value(e) {\n          var t,\n              i = this;\n          return M.isUndefinedOrNullOrEmpty(e) || 0 === e.length ? t = null : (t = {}, 1 === e.length && Array.isArray(e[0]) ? e[0].forEach(function (e) {\n            b(t, i._getOptionObject(e));\n          }) : 1 <= e.length && e.forEach(function (e) {\n            b(t, i._getOptionObject(e));\n          })), t;\n        }\n      }, {\n        key: \"format\",\n        value: function value(e) {\n          if (M.isUndefined(e) || null === e) return null;\n          var t;\n          t = M.isElement(e) ? M.getElementValue(e) : e, M.isString(t) || M.isNumber(t) || M.throwError('The value \"'.concat(t, '\" being \"set\" is not numeric and therefore cannot be used appropriately.'));\n\n          for (var i = arguments.length, n = new Array(1 < i ? i - 1 : 0), a = 1; a < i; a++) {\n            n[a - 1] = arguments[a];\n          }\n\n          var r = this._generateOptionsObjectFromOptionsArray(n),\n              s = b({}, this.getDefaultConfig(), r);\n\n          s.isNegativeSignAllowed = t < 0, s.isPositiveSignAllowed = 0 <= t, this._setBrackets(s), this._cachesUsualRegularExpressions(s, {});\n\n          var o = this._toNumericValue(t, s);\n\n          return isNaN(Number(o)) && M.throwError(\"The value [\".concat(o, \"] that you are trying to format is not a recognized number.\")), this._isWithinRangeWithOverrideOption(o, s) || (M.triggerEvent(B.events.formatted, document, {\n            oldValue: null,\n            newValue: null,\n            oldRawValue: null,\n            newRawValue: null,\n            isPristine: null,\n            error: \"Range test failed\",\n            aNElement: null\n          }, !0, !0), M.throwError(\"The value [\".concat(o, \"] being set falls outside of the minimumValue [\").concat(s.minimumValue, \"] and maximumValue [\").concat(s.maximumValue, \"] range set for this element\"))), s.valuesToStrings && this._checkValuesToStringsSettings(t, s) ? s.valuesToStrings[t] : (this._correctNegativePositiveSignPlacementOption(s), this._calculateDecimalPlacesOnInit(s), M.isUndefinedOrNullOrEmpty(s.rawValueDivisor) || 0 === s.rawValueDivisor || \"\" === o || null === o || (o *= s.rawValueDivisor), o = this._roundFormattedValueShownOnFocus(o, s), o = this._modifyNegativeSignAndDecimalCharacterForFormattedValue(o, s), o = this._addGroupSeparators(o, s, !1, o));\n        }\n      }, {\n        key: \"formatAndSet\",\n        value: function value(e, t) {\n          var i = 1 < arguments.length && void 0 !== t ? t : null,\n              n = this.format(e, i);\n          return M.setElementValue(e, n), n;\n        }\n      }, {\n        key: \"unformat\",\n        value: function value(e) {\n          if (M.isNumberStrict(e)) return e;\n          var t;\n          if (\"\" === (t = M.isElement(e) ? M.getElementValue(e) : e)) return \"\";\n          if (M.isUndefined(t) || null === t) return null;\n          (M.isArray(t) || M.isObject(t)) && M.throwError(\"A number or a string representing a number is needed to be able to unformat it, [\".concat(t, \"] given.\"));\n\n          for (var i = arguments.length, n = new Array(1 < i ? i - 1 : 0), a = 1; a < i; a++) {\n            n[a - 1] = arguments[a];\n          }\n\n          var r = this._generateOptionsObjectFromOptionsArray(n),\n              s = b({}, this.getDefaultConfig(), r);\n\n          if (s.isNegativeSignAllowed = !1, s.isPositiveSignAllowed = !0, t = t.toString(), s.valuesToStrings && this._checkStringsToValuesSettings(t, s)) return M.objectKeyLookup(s.valuesToStrings, t);\n          if (M.isNegative(t, s.negativeSignCharacter)) s.isNegativeSignAllowed = !0, s.isPositiveSignAllowed = !1;else if (!M.isNull(s.negativeBracketsTypeOnBlur)) {\n            var o = S(s.negativeBracketsTypeOnBlur.split(\",\"), 2);\n            s.firstBracket = o[0], s.lastBracket = o[1], t.charAt(0) === s.firstBracket && t.charAt(t.length - 1) === s.lastBracket && (s.isNegativeSignAllowed = !0, s.isPositiveSignAllowed = !1, t = this._removeBrackets(t, s, !1));\n          }\n          return t = this._convertToNumericString(t, s), new RegExp(\"[^+-0123456789.]\", \"gi\").test(t) ? NaN : (this._correctNegativePositiveSignPlacementOption(s), s.decimalPlacesRawValue ? s.originalDecimalPlacesRawValue = s.decimalPlacesRawValue : s.originalDecimalPlacesRawValue = s.decimalPlaces, this._calculateDecimalPlacesOnInit(s), M.isUndefinedOrNullOrEmpty(s.rawValueDivisor) || 0 === s.rawValueDivisor || \"\" === t || null === t || (t /= s.rawValueDivisor), t = (t = this._roundRawValue(t, s)).replace(s.decimalCharacter, \".\"), t = this._toLocale(t, s.outputFormat, s));\n        }\n      }, {\n        key: \"unformatAndSet\",\n        value: function value(e, t) {\n          var i = 1 < arguments.length && void 0 !== t ? t : null,\n              n = this.unformat(e, i);\n          return M.setElementValue(e, n), n;\n        }\n      }, {\n        key: \"localize\",\n        value: function value(e, t) {\n          var i,\n              n,\n              a = 1 < arguments.length && void 0 !== t ? t : null;\n          return \"\" === (i = M.isElement(e) ? M.getElementValue(e) : e) ? \"\" : (M.isNull(a) && (a = B.defaultSettings), i = this.unformat(i, a), 0 === Number(i) && a.leadingZero !== B.options.leadingZero.keep && (i = \"0\"), n = M.isNull(a) ? a.outputFormat : B.defaultSettings.outputFormat, this._toLocale(i, n, a));\n        }\n      }, {\n        key: \"localizeAndSet\",\n        value: function value(e, t) {\n          var i = 1 < arguments.length && void 0 !== t ? t : null,\n              n = this.localize(e, i);\n          return M.setElementValue(e, n), n;\n        }\n      }, {\n        key: \"isManagedByAutoNumeric\",\n        value: function value(e) {\n          return this._isInGlobalList(M.domElement(e));\n        }\n      }, {\n        key: \"getAutoNumericElement\",\n        value: function value(e) {\n          var t = M.domElement(e);\n          return this.isManagedByAutoNumeric(t) ? this._getFromGlobalList(t) : null;\n        }\n      }, {\n        key: \"set\",\n        value: function value(e, t, i, n) {\n          var a,\n              r = 2 < arguments.length && void 0 !== i ? i : null,\n              s = !(3 < arguments.length && void 0 !== n) || n,\n              o = M.domElement(e);\n          return this.isManagedByAutoNumeric(o) ? this.getAutoNumericElement(o).set(t, r, s) : (a = !(!M.isNull(r) && Object.prototype.hasOwnProperty.call(r, \"showWarnings\")) || r.showWarnings, M.warning(\"Impossible to find an AutoNumeric object for the given DOM element or selector.\", a), null);\n        }\n      }, {\n        key: \"getNumericString\",\n        value: function value(e, t) {\n          var i = 1 < arguments.length && void 0 !== t ? t : null;\n          return this._get(e, \"getNumericString\", i);\n        }\n      }, {\n        key: \"getFormatted\",\n        value: function value(e, t) {\n          var i = 1 < arguments.length && void 0 !== t ? t : null;\n          return this._get(e, \"getFormatted\", i);\n        }\n      }, {\n        key: \"getNumber\",\n        value: function value(e, t) {\n          var i = 1 < arguments.length && void 0 !== t ? t : null;\n          return this._get(e, \"getNumber\", i);\n        }\n      }, {\n        key: \"_get\",\n        value: function value(e, t, i) {\n          var n = 2 < arguments.length && void 0 !== i ? i : null,\n              a = M.domElement(e);\n          return this.isManagedByAutoNumeric(a) || M.throwError(\"Impossible to find an AutoNumeric object for the given DOM element or selector.\"), this.getAutoNumericElement(a)[t](n);\n        }\n      }, {\n        key: \"getLocalized\",\n        value: function value(e, t, i) {\n          var n = 1 < arguments.length && void 0 !== t ? t : null,\n              a = 2 < arguments.length && void 0 !== i ? i : null,\n              r = M.domElement(e);\n          return this.isManagedByAutoNumeric(r) || M.throwError(\"Impossible to find an AutoNumeric object for the given DOM element or selector.\"), this.getAutoNumericElement(r).getLocalized(n, a);\n        }\n      }, {\n        key: \"_stripAllNonNumberCharacters\",\n        value: function value(e, t, i, n) {\n          return this._stripAllNonNumberCharactersExceptCustomDecimalChar(e, t, i, n).replace(t.decimalCharacter, \".\");\n        }\n      }, {\n        key: \"_stripAllNonNumberCharactersExceptCustomDecimalChar\",\n        value: function value(e, t, i, n) {\n          var a = (e = (e = this._normalizeCurrencySuffixAndNegativeSignCharacters(e, t)).replace(t.allowedAutoStrip, \"\")).match(t.numRegAutoStrip);\n\n          if (e = a ? [a[1], a[2], a[3]].join(\"\") : \"\", t.leadingZero === B.options.leadingZero.allow || t.leadingZero === B.options.leadingZero.keep) {\n            var r = \"\",\n                s = S(e.split(t.decimalCharacter), 2),\n                o = s[0],\n                l = s[1],\n                u = o;\n            M.contains(u, t.negativeSignCharacter) && (r = t.negativeSignCharacter, u = u.replace(t.negativeSignCharacter, \"\")), \"\" === r && u.length > t.mIntPos && \"0\" === u.charAt(0) && (u = u.slice(1)), \"\" !== r && u.length > t.mIntNeg && \"0\" === u.charAt(0) && (u = u.slice(1)), e = \"\".concat(r).concat(u).concat(M.isUndefined(l) ? \"\" : t.decimalCharacter + l);\n          }\n\n          return (i && t.leadingZero === B.options.leadingZero.deny || !n && t.leadingZero === B.options.leadingZero.allow) && (e = e.replace(t.stripReg, \"$1$2\")), e;\n        }\n      }, {\n        key: \"_toggleNegativeBracket\",\n        value: function value(e, t, i) {\n          return i ? this._removeBrackets(e, t) : this._addBrackets(e, t);\n        }\n      }, {\n        key: \"_addBrackets\",\n        value: function value(e, t) {\n          return M.isNull(t.negativeBracketsTypeOnBlur) ? e : \"\".concat(t.firstBracket).concat(e.replace(t.negativeSignCharacter, \"\")).concat(t.lastBracket);\n        }\n      }, {\n        key: \"_removeBrackets\",\n        value: function value(e, t, i) {\n          var n,\n              a = !(2 < arguments.length && void 0 !== i) || i;\n          return M.isNull(t.negativeBracketsTypeOnBlur) || e.charAt(0) !== t.firstBracket ? e : (n = (n = e.replace(t.firstBracket, \"\")).replace(t.lastBracket, \"\"), a ? (n = n.replace(t.currencySymbol, \"\"), this._mergeCurrencySignNegativePositiveSignAndValue(n, t, !0, !1)) : \"\".concat(t.negativeSignCharacter).concat(n));\n        }\n      }, {\n        key: \"_setBrackets\",\n        value: function value(e) {\n          if (M.isNull(e.negativeBracketsTypeOnBlur)) e.firstBracket = \"\", e.lastBracket = \"\";else {\n            var t = S(e.negativeBracketsTypeOnBlur.split(\",\"), 2),\n                i = t[0],\n                n = t[1];\n            e.firstBracket = i, e.lastBracket = n;\n          }\n        }\n      }, {\n        key: \"_convertToNumericString\",\n        value: function value(e, t) {\n          e = this._removeBrackets(e, t, !1), e = (e = this._normalizeCurrencySuffixAndNegativeSignCharacters(e, t)).replace(new RegExp(\"[\".concat(t.digitGroupSeparator, \"]\"), \"g\"), \"\"), \".\" !== t.decimalCharacter && (e = e.replace(t.decimalCharacter, \".\")), M.isNegative(e) && e.lastIndexOf(\"-\") === e.length - 1 && (e = e.replace(\"-\", \"\"), e = \"-\".concat(e)), t.showPositiveSign && (e = e.replace(t.positiveSignCharacter, \"\"));\n          var i = t.leadingZero !== B.options.leadingZero.keep,\n              n = M.arabicToLatinNumbers(e, i, !1, !1);\n          return isNaN(n) || (e = n.toString()), e;\n        }\n      }, {\n        key: \"_normalizeCurrencySuffixAndNegativeSignCharacters\",\n        value: function value(e, t) {\n          return e = String(e), t.currencySymbol !== B.options.currencySymbol.none && (e = e.replace(t.currencySymbol, \"\")), t.suffixText !== B.options.suffixText.none && (e = e.replace(t.suffixText, \"\")), t.negativeSignCharacter !== B.options.negativeSignCharacter.hyphen && (e = e.replace(t.negativeSignCharacter, \"-\")), e;\n        }\n      }, {\n        key: \"_toLocale\",\n        value: function value(e, t, i) {\n          if (M.isNull(t) || t === B.options.outputFormat.string) return e;\n          var n;\n\n          switch (t) {\n            case B.options.outputFormat.number:\n              n = Number(e);\n              break;\n\n            case B.options.outputFormat.dotNegative:\n              n = M.isNegative(e) ? e.replace(\"-\", \"\") + \"-\" : e;\n              break;\n\n            case B.options.outputFormat.comma:\n            case B.options.outputFormat.negativeComma:\n              n = e.replace(\".\", \",\");\n              break;\n\n            case B.options.outputFormat.commaNegative:\n              n = e.replace(\".\", \",\"), n = M.isNegative(n) ? n.replace(\"-\", \"\") + \"-\" : n;\n              break;\n\n            case B.options.outputFormat.dot:\n            case B.options.outputFormat.negativeDot:\n              n = e;\n              break;\n\n            default:\n              M.throwError(\"The given outputFormat [\".concat(t, \"] option is not recognized.\"));\n          }\n\n          return t !== B.options.outputFormat.number && \"-\" !== i.negativeSignCharacter && (n = n.replace(\"-\", i.negativeSignCharacter)), n;\n        }\n      }, {\n        key: \"_modifyNegativeSignAndDecimalCharacterForFormattedValue\",\n        value: function value(e, t) {\n          return \"-\" !== t.negativeSignCharacter && (e = e.replace(\"-\", t.negativeSignCharacter)), \".\" !== t.decimalCharacter && (e = e.replace(\".\", t.decimalCharacter)), e;\n        }\n      }, {\n        key: \"_isElementValueEmptyOrOnlyTheNegativeSign\",\n        value: function value(e, t) {\n          return \"\" === e || e === t.negativeSignCharacter;\n        }\n      }, {\n        key: \"_orderValueCurrencySymbolAndSuffixText\",\n        value: function value(e, t, i) {\n          var n;\n          if (t.emptyInputBehavior === B.options.emptyInputBehavior.always || i) switch (t.negativePositiveSignPlacement) {\n            case B.options.negativePositiveSignPlacement.left:\n            case B.options.negativePositiveSignPlacement.prefix:\n            case B.options.negativePositiveSignPlacement.none:\n              n = e + t.currencySymbol + t.suffixText;\n              break;\n\n            default:\n              n = t.currencySymbol + e + t.suffixText;\n          } else n = e;\n          return n;\n        }\n      }, {\n        key: \"_addGroupSeparators\",\n        value: function value(e, t, i, n, a) {\n          var r,\n              s = 4 < arguments.length && void 0 !== a ? a : null;\n          if (r = M.isNull(s) ? M.isNegative(e, t.negativeSignCharacter) || M.isNegativeWithBrackets(e, t.firstBracket, t.lastBracket) : s < 0, e = this._stripAllNonNumberCharactersExceptCustomDecimalChar(e, t, !1, i), this._isElementValueEmptyOrOnlyTheNegativeSign(e, t)) return this._orderValueCurrencySymbolAndSuffixText(e, t, !0);\n          var o,\n              l = M.isZeroOrHasNoValue(e);\n\n          switch (r && (e = e.replace(\"-\", \"\")), t.digitalGroupSpacing = t.digitalGroupSpacing.toString(), t.digitalGroupSpacing) {\n            case B.options.digitalGroupSpacing.two:\n              o = /(\\d)((\\d)(\\d{2}?)+)$/;\n              break;\n\n            case B.options.digitalGroupSpacing.twoScaled:\n              o = /(\\d)((?:\\d{2}){0,2}\\d{3}(?:(?:\\d{2}){2}\\d{3})*?)$/;\n              break;\n\n            case B.options.digitalGroupSpacing.four:\n              o = /(\\d)((\\d{4}?)+)$/;\n              break;\n\n            case B.options.digitalGroupSpacing.three:\n            default:\n              o = /(\\d)((\\d{3}?)+)$/;\n          }\n\n          var u,\n              c = S(e.split(t.decimalCharacter), 2),\n              h = c[0],\n              m = c[1];\n\n          if (t.decimalCharacterAlternative && M.isUndefined(m)) {\n            var g = S(e.split(t.decimalCharacterAlternative), 2);\n            h = g[0], m = g[1];\n          }\n\n          if (\"\" !== t.digitGroupSeparator) for (; o.test(h);) {\n            h = h.replace(o, \"$1\".concat(t.digitGroupSeparator, \"$2\"));\n          }\n          return e = 0 === (u = i ? t.decimalPlacesShownOnFocus : t.decimalPlacesShownOnBlur) || M.isUndefined(m) ? h : (m.length > u && (m = m.substring(0, u)), \"\".concat(h).concat(t.decimalCharacter).concat(m)), e = B._mergeCurrencySignNegativePositiveSignAndValue(e, t, r, l), M.isNull(s) && (s = n), null !== t.negativeBracketsTypeOnBlur && (s < 0 || M.isNegativeStrict(e, t.negativeSignCharacter)) && (e = this._toggleNegativeBracket(e, t, i)), t.suffixText ? \"\".concat(e).concat(t.suffixText) : e;\n        }\n      }, {\n        key: \"_mergeCurrencySignNegativePositiveSignAndValue\",\n        value: function value(e, t, i, n) {\n          var a,\n              r = \"\";\n          if (i ? r = t.negativeSignCharacter : t.showPositiveSign && !n && (r = t.positiveSignCharacter), t.currencySymbolPlacement === B.options.currencySymbolPlacement.prefix) {\n            if (t.negativePositiveSignPlacement !== B.options.negativePositiveSignPlacement.none && (i || !i && t.showPositiveSign && !n)) switch (t.negativePositiveSignPlacement) {\n              case B.options.negativePositiveSignPlacement.prefix:\n              case B.options.negativePositiveSignPlacement.left:\n                a = \"\".concat(r).concat(t.currencySymbol).concat(e);\n                break;\n\n              case B.options.negativePositiveSignPlacement.right:\n                a = \"\".concat(t.currencySymbol).concat(r).concat(e);\n                break;\n\n              case B.options.negativePositiveSignPlacement.suffix:\n                a = \"\".concat(t.currencySymbol).concat(e).concat(r);\n            } else a = t.currencySymbol + e;\n          } else if (t.currencySymbolPlacement === B.options.currencySymbolPlacement.suffix) if (t.negativePositiveSignPlacement !== B.options.negativePositiveSignPlacement.none && (i || !i && t.showPositiveSign && !n)) switch (t.negativePositiveSignPlacement) {\n            case B.options.negativePositiveSignPlacement.suffix:\n            case B.options.negativePositiveSignPlacement.right:\n              a = \"\".concat(e).concat(t.currencySymbol).concat(r);\n              break;\n\n            case B.options.negativePositiveSignPlacement.left:\n              a = \"\".concat(e).concat(r).concat(t.currencySymbol);\n              break;\n\n            case B.options.negativePositiveSignPlacement.prefix:\n              a = \"\".concat(r).concat(e).concat(t.currencySymbol);\n          } else a = e + t.currencySymbol;\n          return a;\n        }\n      }, {\n        key: \"_truncateZeros\",\n        value: function value(e, t) {\n          var i;\n\n          switch (t) {\n            case 0:\n              i = /(\\.(?:\\d*[1-9])?)0*$/;\n              break;\n\n            case 1:\n              i = /(\\.\\d(?:\\d*[1-9])?)0*$/;\n              break;\n\n            default:\n              i = new RegExp(\"(\\\\.\\\\d{\".concat(t, \"}(?:\\\\d*[1-9])?)0*\"));\n          }\n\n          return e = e.replace(i, \"$1\"), 0 === t && (e = e.replace(/\\.$/, \"\")), e;\n        }\n      }, {\n        key: \"_roundRawValue\",\n        value: function value(e, t) {\n          return this._roundValue(e, t, t.decimalPlacesRawValue);\n        }\n      }, {\n        key: \"_roundFormattedValueShownOnFocus\",\n        value: function value(e, t) {\n          return this._roundValue(e, t, Number(t.decimalPlacesShownOnFocus));\n        }\n      }, {\n        key: \"_roundFormattedValueShownOnBlur\",\n        value: function value(e, t) {\n          return this._roundValue(e, t, Number(t.decimalPlacesShownOnBlur));\n        }\n      }, {\n        key: \"_roundFormattedValueShownOnFocusOrBlur\",\n        value: function value(e, t, i) {\n          return i ? this._roundFormattedValueShownOnFocus(e, t) : this._roundFormattedValueShownOnBlur(e, t);\n        }\n      }, {\n        key: \"_roundValue\",\n        value: function value(e, t, i) {\n          if (M.isNull(e)) return e;\n          if (e = \"\" === e ? \"0\" : e.toString(), t.roundingMethod === B.options.roundingMethod.toNearest05 || t.roundingMethod === B.options.roundingMethod.toNearest05Alt || t.roundingMethod === B.options.roundingMethod.upToNext05 || t.roundingMethod === B.options.roundingMethod.downToNext05) return this._roundCloseTo05(e, t);\n          var n,\n              a = S(B._prepareValueForRounding(e, t), 2),\n              r = a[0],\n              s = (e = a[1]).lastIndexOf(\".\"),\n              o = -1 === s,\n              l = S(e.split(\".\"), 2),\n              u = l[0];\n          if (!(0 < l[1] || t.allowDecimalPadding !== B.options.allowDecimalPadding.never && t.allowDecimalPadding !== B.options.allowDecimalPadding.floats)) return 0 === Number(e) ? u : \"\".concat(r).concat(u);\n          n = t.allowDecimalPadding === B.options.allowDecimalPadding.always || t.allowDecimalPadding === B.options.allowDecimalPadding.floats ? i : 0;\n          var c,\n              h = o ? e.length - 1 : s,\n              m = e.length - 1 - h,\n              g = \"\";\n\n          if (m <= i) {\n            if (g = e, m < n) {\n              o && (g = \"\".concat(g).concat(t.decimalCharacter));\n\n              for (var d = \"000000\"; m < n;) {\n                g += d = d.substring(0, n - m), m += d.length;\n              }\n            } else n < m ? g = this._truncateZeros(g, n) : 0 === m && 0 === n && (g = g.replace(/\\.$/, \"\"));\n\n            return 0 === Number(g) ? g : \"\".concat(r).concat(g);\n          }\n\n          c = o ? i - 1 : Number(i) + Number(s);\n          var v,\n              p = Number(e.charAt(c + 1)),\n              f = e.substring(0, c + 1).split(\"\");\n          if (v = \".\" === e.charAt(c) ? e.charAt(c - 1) % 2 : e.charAt(c) % 2, this._shouldRoundUp(p, t, r, v)) for (var y = f.length - 1; 0 <= y; --y) {\n            if (\".\" !== f[y]) {\n              if (f[y] = +f[y] + 1, f[y] < 10) break;\n              0 < y && (f[y] = \"0\");\n            }\n          }\n          return f = f.slice(0, c + 1), g = this._truncateZeros(f.join(\"\"), n), 0 === Number(g) ? g : \"\".concat(r).concat(g);\n        }\n      }, {\n        key: \"_roundCloseTo05\",\n        value: function value(e, t) {\n          switch (t.roundingMethod) {\n            case B.options.roundingMethod.toNearest05:\n            case B.options.roundingMethod.toNearest05Alt:\n              e = (Math.round(20 * e) / 20).toString();\n              break;\n\n            case B.options.roundingMethod.upToNext05:\n              e = (Math.ceil(20 * e) / 20).toString();\n              break;\n\n            default:\n              e = (Math.floor(20 * e) / 20).toString();\n          }\n\n          return M.contains(e, \".\") ? e.length - e.indexOf(\".\") < 3 ? e + \"0\" : e : e + \".00\";\n        }\n      }, {\n        key: \"_prepareValueForRounding\",\n        value: function value(e, t) {\n          var i = \"\";\n          return M.isNegativeStrict(e, \"-\") && (i = \"-\", e = e.replace(\"-\", \"\")), e.match(/^\\d/) || (e = \"0\".concat(e)), 0 === Number(e) && (i = \"\"), (0 < Number(e) && t.leadingZero !== B.options.leadingZero.keep || 0 < e.length && t.leadingZero === B.options.leadingZero.allow) && (e = e.replace(/^0*(\\d)/, \"$1\")), [i, e];\n        }\n      }, {\n        key: \"_shouldRoundUp\",\n        value: function value(e, t, i, n) {\n          return 4 < e && t.roundingMethod === B.options.roundingMethod.halfUpSymmetric || 4 < e && t.roundingMethod === B.options.roundingMethod.halfUpAsymmetric && \"\" === i || 5 < e && t.roundingMethod === B.options.roundingMethod.halfUpAsymmetric && \"-\" === i || 5 < e && t.roundingMethod === B.options.roundingMethod.halfDownSymmetric || 5 < e && t.roundingMethod === B.options.roundingMethod.halfDownAsymmetric && \"\" === i || 4 < e && t.roundingMethod === B.options.roundingMethod.halfDownAsymmetric && \"-\" === i || 5 < e && t.roundingMethod === B.options.roundingMethod.halfEvenBankersRounding || 5 === e && t.roundingMethod === B.options.roundingMethod.halfEvenBankersRounding && 1 === n || 0 < e && t.roundingMethod === B.options.roundingMethod.toCeilingTowardPositiveInfinity && \"\" === i || 0 < e && t.roundingMethod === B.options.roundingMethod.toFloorTowardNegativeInfinity && \"-\" === i || 0 < e && t.roundingMethod === B.options.roundingMethod.upRoundAwayFromZero;\n        }\n      }, {\n        key: \"_truncateDecimalPlaces\",\n        value: function value(e, t, i, n) {\n          i && (e = this._roundFormattedValueShownOnFocus(e, t));\n          var a = S(e.split(t.decimalCharacter), 2),\n              r = a[0],\n              s = a[1];\n          if (s && s.length > n) if (0 < n) {\n            var o = s.substring(0, n);\n            e = \"\".concat(r).concat(t.decimalCharacter).concat(o);\n          } else e = r;\n          return e;\n        }\n      }, {\n        key: \"_checkIfInRangeWithOverrideOption\",\n        value: function value(e, t) {\n          if (M.isNull(e) && t.emptyInputBehavior === B.options.emptyInputBehavior[\"null\"] || t.overrideMinMaxLimits === B.options.overrideMinMaxLimits.ignore || t.overrideMinMaxLimits === B.options.overrideMinMaxLimits.invalid) return [!0, !0];\n          e = (e = e.toString()).replace(\",\", \".\");\n          var i,\n              n = M.parseStr(t.minimumValue),\n              a = M.parseStr(t.maximumValue),\n              r = M.parseStr(e);\n\n          switch (t.overrideMinMaxLimits) {\n            case B.options.overrideMinMaxLimits.floor:\n              i = [-1 < M.testMinMax(n, r), !0];\n              break;\n\n            case B.options.overrideMinMaxLimits.ceiling:\n              i = [!0, M.testMinMax(a, r) < 1];\n              break;\n\n            default:\n              i = [-1 < M.testMinMax(n, r), M.testMinMax(a, r) < 1];\n          }\n\n          return i;\n        }\n      }, {\n        key: \"_isWithinRangeWithOverrideOption\",\n        value: function value(e, t) {\n          var i = S(this._checkIfInRangeWithOverrideOption(e, t), 2),\n              n = i[0],\n              a = i[1];\n          return n && a;\n        }\n      }, {\n        key: \"_cleanValueForRangeParse\",\n        value: function value(e) {\n          return e = e.toString().replace(\",\", \".\"), M.parseStr(e);\n        }\n      }, {\n        key: \"_isMinimumRangeRespected\",\n        value: function value(e, t) {\n          return -1 < M.testMinMax(M.parseStr(t.minimumValue), this._cleanValueForRangeParse(e));\n        }\n      }, {\n        key: \"_isMaximumRangeRespected\",\n        value: function value(e, t) {\n          return M.testMinMax(M.parseStr(t.maximumValue), this._cleanValueForRangeParse(e)) < 1;\n        }\n      }, {\n        key: \"_readCookie\",\n        value: function value(e) {\n          for (var t = e + \"=\", i = document.cookie.split(\";\"), n = \"\", a = 0; a < i.length; a += 1) {\n            for (n = i[a]; \" \" === n.charAt(0);) {\n              n = n.substring(1, n.length);\n            }\n\n            if (0 === n.indexOf(t)) return n.substring(t.length, n.length);\n          }\n\n          return null;\n        }\n      }, {\n        key: \"_storageTest\",\n        value: function value() {\n          var e = \"modernizr\";\n\n          try {\n            return sessionStorage.setItem(e, e), sessionStorage.removeItem(e), !0;\n          } catch (e) {\n            return !1;\n          }\n        }\n      }, {\n        key: \"_correctNegativePositiveSignPlacementOption\",\n        value: function value(e) {\n          if (M.isNull(e.negativePositiveSignPlacement)) if (M.isUndefined(e) || !M.isUndefinedOrNullOrEmpty(e.negativePositiveSignPlacement) || M.isUndefinedOrNullOrEmpty(e.currencySymbol)) e.negativePositiveSignPlacement = B.options.negativePositiveSignPlacement.left;else switch (e.currencySymbolPlacement) {\n            case B.options.currencySymbolPlacement.suffix:\n              e.negativePositiveSignPlacement = B.options.negativePositiveSignPlacement.prefix;\n              break;\n\n            case B.options.currencySymbolPlacement.prefix:\n              e.negativePositiveSignPlacement = B.options.negativePositiveSignPlacement.left;\n          }\n        }\n      }, {\n        key: \"_correctCaretPositionOnFocusAndSelectOnFocusOptions\",\n        value: function value(e) {\n          return M.isNull(e) ? null : (!M.isUndefinedOrNullOrEmpty(e.caretPositionOnFocus) && M.isUndefinedOrNullOrEmpty(e.selectOnFocus) && (e.selectOnFocus = B.options.selectOnFocus.doNotSelect), M.isUndefinedOrNullOrEmpty(e.caretPositionOnFocus) && !M.isUndefinedOrNullOrEmpty(e.selectOnFocus) && e.selectOnFocus === B.options.selectOnFocus.select && (e.caretPositionOnFocus = B.options.caretPositionOnFocus.doNoForceCaretPosition), e);\n        }\n      }, {\n        key: \"_calculateDecimalPlacesOnInit\",\n        value: function value(e) {\n          this._validateDecimalPlacesRawValue(e), e.decimalPlacesShownOnFocus === B.options.decimalPlacesShownOnFocus.useDefault && (e.decimalPlacesShownOnFocus = e.decimalPlaces), e.decimalPlacesShownOnBlur === B.options.decimalPlacesShownOnBlur.useDefault && (e.decimalPlacesShownOnBlur = e.decimalPlaces), e.decimalPlacesRawValue === B.options.decimalPlacesRawValue.useDefault && (e.decimalPlacesRawValue = e.decimalPlaces);\n          var t = 0;\n          e.rawValueDivisor && e.rawValueDivisor !== B.options.rawValueDivisor.none && (t = String(e.rawValueDivisor).length - 1) < 0 && (t = 0), e.decimalPlacesRawValue = Math.max(Math.max(e.decimalPlacesShownOnBlur, e.decimalPlacesShownOnFocus) + t, Number(e.originalDecimalPlacesRawValue) + t);\n        }\n      }, {\n        key: \"_calculateDecimalPlacesOnUpdate\",\n        value: function value(e, t) {\n          var i = 1 < arguments.length && void 0 !== t ? t : null;\n          this._validateDecimalPlacesRawValue(e), M.isNull(i) && M.throwError(\"When updating the settings, the previous ones should be passed as an argument.\");\n          var n = (\"decimalPlaces\" in e);\n\n          if (n || \"decimalPlacesRawValue\" in e || \"decimalPlacesShownOnFocus\" in e || \"decimalPlacesShownOnBlur\" in e || \"rawValueDivisor\" in e) {\n            n ? (\"decimalPlacesShownOnFocus\" in e && e.decimalPlacesShownOnFocus !== B.options.decimalPlacesShownOnFocus.useDefault || (e.decimalPlacesShownOnFocus = e.decimalPlaces), \"decimalPlacesShownOnBlur\" in e && e.decimalPlacesShownOnBlur !== B.options.decimalPlacesShownOnBlur.useDefault || (e.decimalPlacesShownOnBlur = e.decimalPlaces), \"decimalPlacesRawValue\" in e && e.decimalPlacesRawValue !== B.options.decimalPlacesRawValue.useDefault || (e.decimalPlacesRawValue = e.decimalPlaces)) : (M.isUndefined(e.decimalPlacesShownOnFocus) && (e.decimalPlacesShownOnFocus = i.decimalPlacesShownOnFocus), M.isUndefined(e.decimalPlacesShownOnBlur) && (e.decimalPlacesShownOnBlur = i.decimalPlacesShownOnBlur));\n            var a = 0;\n            e.rawValueDivisor && e.rawValueDivisor !== B.options.rawValueDivisor.none && (a = String(e.rawValueDivisor).length - 1) < 0 && (a = 0), e.decimalPlaces || e.decimalPlacesRawValue ? e.decimalPlacesRawValue = Math.max(Math.max(e.decimalPlacesShownOnBlur, e.decimalPlacesShownOnFocus) + a, Number(e.decimalPlacesRawValue) + a) : e.decimalPlacesRawValue = Math.max(Math.max(e.decimalPlacesShownOnBlur, e.decimalPlacesShownOnFocus) + a, Number(i.originalDecimalPlacesRawValue) + a);\n          }\n        }\n      }, {\n        key: \"_cachesUsualRegularExpressions\",\n        value: function value(e, t) {\n          var i;\n          i = e.negativeSignCharacter !== B.options.negativeSignCharacter.hyphen ? \"([-\\\\\".concat(e.negativeSignCharacter, \"]?)\") : \"(-?)\", t.aNegRegAutoStrip = i, e.allowedAutoStrip = new RegExp(\"[^-0123456789\\\\\".concat(e.decimalCharacter, \"]\"), \"g\"), e.numRegAutoStrip = new RegExp(\"\".concat(i, \"(?:\\\\\").concat(e.decimalCharacter, \"?([0-9]+\\\\\").concat(e.decimalCharacter, \"[0-9]+)|([0-9]*(?:\\\\\").concat(e.decimalCharacter, \"[0-9]*)?))\")), e.stripReg = new RegExp(\"^\".concat(t.aNegRegAutoStrip, \"0*([0-9])\")), e.formulaChars = new RegExp(\"[0-9\".concat(e.decimalCharacter, \"+\\\\-*/() ]\"));\n        }\n      }, {\n        key: \"_convertOldOptionsToNewOnes\",\n        value: function value(e) {\n          var t = {\n            aSep: \"digitGroupSeparator\",\n            nSep: \"showOnlyNumbersOnFocus\",\n            dGroup: \"digitalGroupSpacing\",\n            aDec: \"decimalCharacter\",\n            altDec: \"decimalCharacterAlternative\",\n            aSign: \"currencySymbol\",\n            pSign: \"currencySymbolPlacement\",\n            pNeg: \"negativePositiveSignPlacement\",\n            aSuffix: \"suffixText\",\n            oLimits: \"overrideMinMaxLimits\",\n            vMax: \"maximumValue\",\n            vMin: \"minimumValue\",\n            mDec: \"decimalPlacesOverride\",\n            eDec: \"decimalPlacesShownOnFocus\",\n            scaleDecimal: \"decimalPlacesShownOnBlur\",\n            aStor: \"saveValueToSessionStorage\",\n            mRound: \"roundingMethod\",\n            aPad: \"allowDecimalPadding\",\n            nBracket: \"negativeBracketsTypeOnBlur\",\n            wEmpty: \"emptyInputBehavior\",\n            lZero: \"leadingZero\",\n            aForm: \"formatOnPageLoad\",\n            sNumber: \"selectNumberOnly\",\n            anDefault: \"defaultValueOverride\",\n            unSetOnSubmit: \"unformatOnSubmit\",\n            outputType: \"outputFormat\",\n            debug: \"showWarnings\",\n            allowDecimalPadding: !0,\n            alwaysAllowDecimalCharacter: !0,\n            caretPositionOnFocus: !0,\n            createLocalList: !0,\n            currencySymbol: !0,\n            currencySymbolPlacement: !0,\n            decimalCharacter: !0,\n            decimalCharacterAlternative: !0,\n            decimalPlaces: !0,\n            decimalPlacesRawValue: !0,\n            decimalPlacesShownOnBlur: !0,\n            decimalPlacesShownOnFocus: !0,\n            defaultValueOverride: !0,\n            digitalGroupSpacing: !0,\n            digitGroupSeparator: !0,\n            divisorWhenUnfocused: !0,\n            emptyInputBehavior: !0,\n            eventBubbles: !0,\n            eventIsCancelable: !0,\n            failOnUnknownOption: !0,\n            formatOnPageLoad: !0,\n            formulaMode: !0,\n            historySize: !0,\n            isCancellable: !0,\n            leadingZero: !0,\n            maximumValue: !0,\n            minimumValue: !0,\n            modifyValueOnWheel: !0,\n            negativeBracketsTypeOnBlur: !0,\n            negativePositiveSignPlacement: !0,\n            negativeSignCharacter: !0,\n            noEventListeners: !0,\n            onInvalidPaste: !0,\n            outputFormat: !0,\n            overrideMinMaxLimits: !0,\n            positiveSignCharacter: !0,\n            rawValueDivisor: !0,\n            readOnly: !0,\n            roundingMethod: !0,\n            saveValueToSessionStorage: !0,\n            selectNumberOnly: !0,\n            selectOnFocus: !0,\n            serializeSpaces: !0,\n            showOnlyNumbersOnFocus: !0,\n            showPositiveSign: !0,\n            showWarnings: !0,\n            styleRules: !0,\n            suffixText: !0,\n            symbolWhenUnfocused: !0,\n            unformatOnHover: !0,\n            unformatOnSubmit: !0,\n            valuesToStrings: !0,\n            watchExternalChanges: !0,\n            wheelOn: !0,\n            wheelStep: !0,\n            allowedAutoStrip: !0,\n            formulaChars: !0,\n            isNegativeSignAllowed: !0,\n            isPositiveSignAllowed: !0,\n            mIntNeg: !0,\n            mIntPos: !0,\n            numRegAutoStrip: !0,\n            originalDecimalPlaces: !0,\n            originalDecimalPlacesRawValue: !0,\n            stripReg: !0\n          };\n\n          for (var i in e) {\n            if (Object.prototype.hasOwnProperty.call(e, i)) {\n              if (!0 === t[i]) continue;\n              Object.prototype.hasOwnProperty.call(t, i) ? (M.warning(\"You are using the deprecated option name '\".concat(i, \"'. Please use '\").concat(t[i], \"' instead from now on. The old option name will be dropped very soonâ¢.\"), !0), e[t[i]] = e[i], delete e[i]) : e.failOnUnknownOption && M.throwError(\"Option name '\".concat(i, \"' is unknown. Please fix the options passed to autoNumeric\"));\n            }\n          }\n\n          \"mDec\" in e && M.warning(\"The old `mDec` option has been deprecated in favor of more accurate options ; `decimalPlaces`, `decimalPlacesRawValue`, `decimalPlacesShownOnFocus` and `decimalPlacesShownOnBlur`.\", !0);\n        }\n      }, {\n        key: \"_setNegativePositiveSignPermissions\",\n        value: function value(e) {\n          e.isNegativeSignAllowed = e.minimumValue < 0, e.isPositiveSignAllowed = 0 <= e.maximumValue;\n        }\n      }, {\n        key: \"_toNumericValue\",\n        value: function value(e, t) {\n          var i;\n          return M.isNumber(Number(e)) ? i = M.scientificToDecimal(e) : (i = this._convertToNumericString(e.toString(), t), M.isNumber(Number(i)) || (M.warning('The given value \"'.concat(e, '\" cannot be converted to a numeric one and therefore cannot be used appropriately.'), t.showWarnings), i = NaN)), i;\n        }\n      }, {\n        key: \"_checkIfInRange\",\n        value: function value(e, t, i) {\n          var n = M.parseStr(e);\n          return -1 < M.testMinMax(t, n) && M.testMinMax(i, n) < 1;\n        }\n      }, {\n        key: \"_shouldSkipEventKey\",\n        value: function value(e) {\n          var t = M.isInArray(e, d.keyName._allFnKeys),\n              i = e === d.keyName.OSLeft || e === d.keyName.OSRight,\n              n = e === d.keyName.ContextMenu,\n              a = M.isInArray(e, d.keyName._someNonPrintableKeys),\n              r = e === d.keyName.NumLock || e === d.keyName.ScrollLock || e === d.keyName.Insert || e === d.keyName.Command,\n              s = e === d.keyName.Unidentified;\n          return t || i || n || a || s || r;\n        }\n      }, {\n        key: \"_serialize\",\n        value: function value(e, t, i, n, a) {\n          var r,\n              s = this,\n              o = 1 < arguments.length && void 0 !== t && t,\n              l = 2 < arguments.length && void 0 !== i ? i : \"unformatted\",\n              u = 3 < arguments.length && void 0 !== n ? n : \"+\",\n              c = 4 < arguments.length && void 0 !== a ? a : null,\n              h = [];\n          return \"object\" === w(e) && \"form\" === e.nodeName.toLowerCase() && Array.prototype.slice.call(e.elements).forEach(function (t) {\n            if (t.name && !t.disabled && -1 === [\"file\", \"reset\", \"submit\", \"button\"].indexOf(t.type)) if (\"select-multiple\" === t.type) Array.prototype.slice.call(t.options).forEach(function (e) {\n              e.selected && (o ? h.push({\n                name: t.name,\n                value: e.value\n              }) : h.push(\"\".concat(encodeURIComponent(t.name), \"=\").concat(encodeURIComponent(e.value))));\n            });else if (-1 === [\"checkbox\", \"radio\"].indexOf(t.type) || t.checked) {\n              var e, i;\n              if (s.isManagedByAutoNumeric(t)) switch (l) {\n                case \"unformatted\":\n                  i = s.getAutoNumericElement(t), M.isNull(i) || (e = s.unformat(t, i.getSettings()));\n                  break;\n\n                case \"localized\":\n                  if (i = s.getAutoNumericElement(t), !M.isNull(i)) {\n                    var n = M.cloneObject(i.getSettings());\n                    M.isNull(c) || (n.outputFormat = c), e = s.localize(t, n);\n                  }\n\n                  break;\n\n                case \"formatted\":\n                default:\n                  e = t.value;\n              } else e = t.value;\n              M.isUndefined(e) && M.throwError(\"This error should never be hit. If it has, something really wrong happened!\"), o ? h.push({\n                name: t.name,\n                value: e\n              }) : h.push(\"\".concat(encodeURIComponent(t.name), \"=\").concat(encodeURIComponent(e)));\n            }\n          }), o ? r = h : (r = h.join(\"&\"), \"+\" === u && (r = r.replace(/%20/g, \"+\"))), r;\n        }\n      }, {\n        key: \"_serializeNumericString\",\n        value: function value(e, t) {\n          var i = 1 < arguments.length && void 0 !== t ? t : \"+\";\n          return this._serialize(e, !1, \"unformatted\", i);\n        }\n      }, {\n        key: \"_serializeFormatted\",\n        value: function value(e, t) {\n          var i = 1 < arguments.length && void 0 !== t ? t : \"+\";\n          return this._serialize(e, !1, \"formatted\", i);\n        }\n      }, {\n        key: \"_serializeLocalized\",\n        value: function value(e, t, i) {\n          var n = 1 < arguments.length && void 0 !== t ? t : \"+\",\n              a = 2 < arguments.length && void 0 !== i ? i : null;\n          return this._serialize(e, !1, \"localized\", n, a);\n        }\n      }, {\n        key: \"_serializeNumericStringArray\",\n        value: function value(e, t) {\n          var i = 1 < arguments.length && void 0 !== t ? t : \"+\";\n          return this._serialize(e, !0, \"unformatted\", i);\n        }\n      }, {\n        key: \"_serializeFormattedArray\",\n        value: function value(e, t) {\n          var i = 1 < arguments.length && void 0 !== t ? t : \"+\";\n          return this._serialize(e, !0, \"formatted\", i);\n        }\n      }, {\n        key: \"_serializeLocalizedArray\",\n        value: function value(e, t, i) {\n          var n = 1 < arguments.length && void 0 !== t ? t : \"+\",\n              a = 2 < arguments.length && void 0 !== i ? i : null;\n          return this._serialize(e, !0, \"localized\", n, a);\n        }\n      }], P((e = B).prototype, [{\n        key: \"_saveInitialValues\",\n        value: function value(e) {\n          this.initialValueHtmlAttribute = M.scientificToDecimal(this.domElement.getAttribute(\"value\")), M.isNull(this.initialValueHtmlAttribute) && (this.initialValueHtmlAttribute = \"\"), this.initialValue = e, M.isNull(this.initialValue) && (this.initialValue = \"\");\n        }\n      }, {\n        key: \"_createEventListeners\",\n        value: function value() {\n          var t = this;\n          this.formulaMode = !1, this._onFocusInFunc = function (e) {\n            t._onFocusIn(e);\n          }, this._onFocusInAndMouseEnterFunc = function (e) {\n            t._onFocusInAndMouseEnter(e);\n          }, this._onFocusFunc = function () {\n            t._onFocus();\n          }, this._onKeydownFunc = function (e) {\n            t._onKeydown(e);\n          }, this._onKeypressFunc = function (e) {\n            t._onKeypress(e);\n          }, this._onKeyupFunc = function (e) {\n            t._onKeyup(e);\n          }, this._onFocusOutAndMouseLeaveFunc = function (e) {\n            t._onFocusOutAndMouseLeave(e);\n          }, this._onPasteFunc = function (e) {\n            t._onPaste(e);\n          }, this._onWheelFunc = function (e) {\n            t._onWheel(e);\n          }, this._onDropFunc = function (e) {\n            t._onDrop(e);\n          }, this._onKeydownGlobalFunc = function (e) {\n            t._onKeydownGlobal(e);\n          }, this._onKeyupGlobalFunc = function (e) {\n            t._onKeyupGlobal(e);\n          }, this.domElement.addEventListener(\"focusin\", this._onFocusInFunc, !1), this.domElement.addEventListener(\"focus\", this._onFocusInAndMouseEnterFunc, !1), this.domElement.addEventListener(\"focus\", this._onFocusFunc, !1), this.domElement.addEventListener(\"mouseenter\", this._onFocusInAndMouseEnterFunc, !1), this.domElement.addEventListener(\"keydown\", this._onKeydownFunc, !1), this.domElement.addEventListener(\"keypress\", this._onKeypressFunc, !1), this.domElement.addEventListener(\"keyup\", this._onKeyupFunc, !1), this.domElement.addEventListener(\"blur\", this._onFocusOutAndMouseLeaveFunc, !1), this.domElement.addEventListener(\"mouseleave\", this._onFocusOutAndMouseLeaveFunc, !1), this.domElement.addEventListener(\"paste\", this._onPasteFunc, !1), this.domElement.addEventListener(\"wheel\", this._onWheelFunc, !1), this.domElement.addEventListener(\"drop\", this._onDropFunc, !1), this._setupFormListener(), this.hasEventListeners = !0, B._doesGlobalListExists() || (document.addEventListener(\"keydown\", this._onKeydownGlobalFunc, !1), document.addEventListener(\"keyup\", this._onKeyupGlobalFunc, !1));\n        }\n      }, {\n        key: \"_removeEventListeners\",\n        value: function value() {\n          this.domElement.removeEventListener(\"focusin\", this._onFocusInFunc, !1), this.domElement.removeEventListener(\"focus\", this._onFocusInAndMouseEnterFunc, !1), this.domElement.removeEventListener(\"focus\", this._onFocusFunc, !1), this.domElement.removeEventListener(\"mouseenter\", this._onFocusInAndMouseEnterFunc, !1), this.domElement.removeEventListener(\"blur\", this._onFocusOutAndMouseLeaveFunc, !1), this.domElement.removeEventListener(\"mouseleave\", this._onFocusOutAndMouseLeaveFunc, !1), this.domElement.removeEventListener(\"keydown\", this._onKeydownFunc, !1), this.domElement.removeEventListener(\"keypress\", this._onKeypressFunc, !1), this.domElement.removeEventListener(\"keyup\", this._onKeyupFunc, !1), this.domElement.removeEventListener(\"paste\", this._onPasteFunc, !1), this.domElement.removeEventListener(\"wheel\", this._onWheelFunc, !1), this.domElement.removeEventListener(\"drop\", this._onDropFunc, !1), this._removeFormListener(), this.hasEventListeners = !1, document.removeEventListener(\"keydown\", this._onKeydownGlobalFunc, !1), document.removeEventListener(\"keyup\", this._onKeyupGlobalFunc, !1);\n        }\n      }, {\n        key: \"_updateEventListeners\",\n        value: function value() {\n          this.settings.noEventListeners || this.hasEventListeners || this._createEventListeners(), this.settings.noEventListeners && this.hasEventListeners && this._removeEventListeners();\n        }\n      }, {\n        key: \"_setupFormListener\",\n        value: function value() {\n          var e = this;\n          M.isNull(this.parentForm) || (this._onFormSubmitFunc = function () {\n            e._onFormSubmit();\n          }, this._onFormResetFunc = function () {\n            e._onFormReset();\n          }, this._hasParentFormCounter() ? this._incrementParentFormCounter() : (this._initializeFormCounterToOne(), this.parentForm.addEventListener(\"submit\", this._onFormSubmitFunc, !1), this.parentForm.addEventListener(\"reset\", this._onFormResetFunc, !1), this._storeFormHandlerFunction()));\n        }\n      }, {\n        key: \"_removeFormListener\",\n        value: function value() {\n          if (!M.isNull(this.parentForm)) {\n            var e = this._getParentFormCounter();\n\n            1 === e ? (this.parentForm.removeEventListener(\"submit\", this._getFormHandlerFunction().submitFn, !1), this.parentForm.removeEventListener(\"reset\", this._getFormHandlerFunction().resetFn, !1), this._removeFormDataSetInfo()) : 1 < e ? this._decrementParentFormCounter() : M.throwError(\"The AutoNumeric object count on the form is incoherent.\");\n          }\n        }\n      }, {\n        key: \"_hasParentFormCounter\",\n        value: function value() {\n          return \"anCount\" in this.parentForm.dataset;\n        }\n      }, {\n        key: \"_getParentFormCounter\",\n        value: function value() {\n          return Number(this.parentForm.dataset.anCount);\n        }\n      }, {\n        key: \"_initializeFormCounterToOne\",\n        value: function value(e) {\n          var t = 0 < arguments.length && void 0 !== e ? e : null;\n          this._getFormElement(t).dataset.anCount = 1;\n        }\n      }, {\n        key: \"_incrementParentFormCounter\",\n        value: function value(e) {\n          var t = 0 < arguments.length && void 0 !== e ? e : null;\n          this._getFormElement(t).dataset.anCount++;\n        }\n      }, {\n        key: \"_decrementParentFormCounter\",\n        value: function value() {\n          this.parentForm.dataset.anCount--;\n        }\n      }, {\n        key: \"_hasFormHandlerFunction\",\n        value: function value(e) {\n          var t = 0 < arguments.length && void 0 !== e ? e : null;\n          return \"anFormHandler\" in this._getFormElement(t).dataset;\n        }\n      }, {\n        key: \"_getFormElement\",\n        value: function value(e) {\n          var t = 0 < arguments.length && void 0 !== e ? e : null;\n          return M.isNull(t) ? this.parentForm : t;\n        }\n      }, {\n        key: \"_storeFormHandlerFunction\",\n        value: function value(e) {\n          var t = 0 < arguments.length && void 0 !== e ? e : null;\n          this.constructor._doesFormHandlerListExists() || this.constructor._createFormHandlerList();\n          var i = M.randomString();\n          this._getFormElement(t).dataset.anFormHandler = i, window.aNFormHandlerMap.set(i, {\n            submitFn: this._onFormSubmitFunc,\n            resetFn: this._onFormResetFunc\n          });\n        }\n      }, {\n        key: \"_getFormHandlerKey\",\n        value: function value() {\n          this._hasFormHandlerFunction() || M.throwError(\"Unable to retrieve the form handler name\");\n          var e = this.parentForm.dataset.anFormHandler;\n          return \"\" === e && M.throwError(\"The form handler name is invalid\"), e;\n        }\n      }, {\n        key: \"_getFormHandlerFunction\",\n        value: function value() {\n          var e = this._getFormHandlerKey();\n\n          return window.aNFormHandlerMap.get(e);\n        }\n      }, {\n        key: \"_removeFormDataSetInfo\",\n        value: function value() {\n          this._decrementParentFormCounter(), window.aNFormHandlerMap[\"delete\"](this._getFormHandlerKey()), this.parentForm.removeAttribute(\"data-an-count\"), this.parentForm.removeAttribute(\"data-an-form-handler\");\n        }\n      }, {\n        key: \"_setWritePermissions\",\n        value: function value(e) {\n          0 < arguments.length && void 0 !== e && e && this.domElement.readOnly || this.settings.readOnly ? this._setReadOnly() : this._setReadWrite();\n        }\n      }, {\n        key: \"_setReadOnly\",\n        value: function value() {\n          this.isInputElement ? this.domElement.readOnly = !0 : this.domElement.setAttribute(\"contenteditable\", !1);\n        }\n      }, {\n        key: \"_setReadWrite\",\n        value: function value() {\n          this.isInputElement ? this.domElement.readOnly = !1 : this.domElement.setAttribute(\"contenteditable\", !0);\n        }\n      }, {\n        key: \"_addWatcher\",\n        value: function value() {\n          var t = this;\n\n          if (!M.isUndefined(this.getterSetter)) {\n            var e = this.getterSetter,\n                i = e.set,\n                n = e.get;\n            Object.defineProperty(this.domElement, this.attributeToWatch, {\n              configurable: !0,\n              get: function get() {\n                return n.call(t.domElement);\n              },\n              set: function set(e) {\n                i.call(t.domElement, e), t.settings.watchExternalChanges && !t.internalModification && t.set(e);\n              }\n            });\n          }\n        }\n      }, {\n        key: \"_removeWatcher\",\n        value: function value() {\n          var t = this;\n\n          if (!M.isUndefined(this.getterSetter)) {\n            var e = this.getterSetter,\n                i = e.set,\n                n = e.get;\n            Object.defineProperty(this.domElement, this.attributeToWatch, {\n              configurable: !0,\n              get: function get() {\n                return n.call(t.domElement);\n              },\n              set: function set(e) {\n                i.call(t.domElement, e);\n              }\n            });\n          }\n        }\n      }, {\n        key: \"_getAttributeToWatch\",\n        value: function value() {\n          var e;\n          if (this.isInputElement) e = \"value\";else {\n            var t = this.domElement.nodeType;\n            t === Node.ELEMENT_NODE || t === Node.DOCUMENT_NODE || t === Node.DOCUMENT_FRAGMENT_NODE ? e = \"textContent\" : t === Node.TEXT_NODE && (e = \"nodeValue\");\n          }\n          return e;\n        }\n      }, {\n        key: \"_historyTableAdd\",\n        value: function value() {\n          var e = 0 === this.historyTable.length;\n\n          if (e || this.rawValue !== this._historyTableCurrentValueUsed()) {\n            var t = !0;\n\n            if (!e) {\n              var i = this.historyTableIndex + 1;\n              i < this.historyTable.length && this.rawValue === this.historyTable[i].value ? t = !1 : M.arrayTrim(this.historyTable, this.historyTableIndex + 1);\n            }\n\n            if (this.historyTableIndex++, t) {\n              var n = M.getElementSelection(this.domElement);\n              this.selectionStart = n.start, this.selectionEnd = n.end, this.historyTable.push({\n                value: this.rawValue,\n                start: this.selectionStart + 1,\n                end: this.selectionEnd + 1\n              }), 1 < this.historyTable.length && (this.historyTable[this.historyTableIndex - 1].start = this.selectionStart, this.historyTable[this.historyTableIndex - 1].end = this.selectionEnd);\n            }\n\n            this.historyTable.length > this.settings.historySize && this._historyTableForget();\n          }\n        }\n      }, {\n        key: \"_historyTableUndoOrRedo\",\n        value: function value(e) {\n          var t;\n\n          if (0 < arguments.length && void 0 !== e && !e ? (t = this.historyTableIndex + 1 < this.historyTable.length) && this.historyTableIndex++ : (t = 0 < this.historyTableIndex) && this.historyTableIndex--, t) {\n            var i = this.historyTable[this.historyTableIndex];\n            this.set(i.value, null, !1), M.setElementSelection(this.domElement, i.start, i.end);\n          }\n        }\n      }, {\n        key: \"_historyTableUndo\",\n        value: function value() {\n          this._historyTableUndoOrRedo(!0);\n        }\n      }, {\n        key: \"_historyTableRedo\",\n        value: function value() {\n          this._historyTableUndoOrRedo(!1);\n        }\n      }, {\n        key: \"_historyTableForget\",\n        value: function value(e) {\n          for (var t = 0 < arguments.length && void 0 !== e ? e : 1, i = [], n = 0; n < t; n++) {\n            i.push(this.historyTable.shift()), this.historyTableIndex--, this.historyTableIndex < 0 && (this.historyTableIndex = 0);\n          }\n\n          return 1 === i.length ? i[0] : i;\n        }\n      }, {\n        key: \"_historyTableCurrentValueUsed\",\n        value: function value() {\n          var e = this.historyTableIndex;\n          return e < 0 && (e = 0), M.isUndefinedOrNullOrEmpty(this.historyTable[e]) ? \"\" : this.historyTable[e].value;\n        }\n      }, {\n        key: \"_parseStyleRules\",\n        value: function value() {\n          var n = this;\n          M.isUndefinedOrNullOrEmpty(this.settings.styleRules) || \"\" === this.rawValue || (M.isUndefinedOrNullOrEmpty(this.settings.styleRules.positive) || (0 <= this.rawValue ? this._addCSSClass(this.settings.styleRules.positive) : this._removeCSSClass(this.settings.styleRules.positive)), M.isUndefinedOrNullOrEmpty(this.settings.styleRules.negative) || (this.rawValue < 0 ? this._addCSSClass(this.settings.styleRules.negative) : this._removeCSSClass(this.settings.styleRules.negative)), M.isUndefinedOrNullOrEmpty(this.settings.styleRules.ranges) || 0 === this.settings.styleRules.ranges.length || this.settings.styleRules.ranges.forEach(function (e) {\n            n.rawValue >= e.min && n.rawValue < e.max ? n._addCSSClass(e[\"class\"]) : n._removeCSSClass(e[\"class\"]);\n          }), M.isUndefinedOrNullOrEmpty(this.settings.styleRules.userDefined) || 0 === this.settings.styleRules.userDefined.length || this.settings.styleRules.userDefined.forEach(function (e) {\n            if (M.isFunction(e.callback)) {\n              if (M.isString(e.classes)) e.callback(n.rawValue) ? n._addCSSClass(e.classes) : n._removeCSSClass(e.classes);else if (M.isArray(e.classes)) {\n                if (2 === e.classes.length) e.callback(n.rawValue) ? (n._addCSSClass(e.classes[0]), n._removeCSSClass(e.classes[1])) : (n._removeCSSClass(e.classes[0]), n._addCSSClass(e.classes[1]));else if (2 < e.classes.length) {\n                  var i = e.callback(n.rawValue);\n                  M.isArray(i) ? e.classes.forEach(function (e, t) {\n                    M.isInArray(t, i) ? n._addCSSClass(e) : n._removeCSSClass(e);\n                  }) : M.isInt(i) ? e.classes.forEach(function (e, t) {\n                    t === i ? n._addCSSClass(e) : n._removeCSSClass(e);\n                  }) : M.isNull(i) ? e.classes.forEach(function (e) {\n                    n._removeCSSClass(e);\n                  }) : M.throwError(\"The callback result is not an array nor a valid array index, \".concat(w(i), \" given.\"));\n                } else M.throwError(\"The classes attribute is not valid for the `styleRules` option.\");\n              } else M.isUndefinedOrNullOrEmpty(e.classes) ? e.callback(n) : M.throwError(\"The callback/classes structure is not valid for the `styleRules` option.\");\n            } else M.warning(\"The given `styleRules` callback is not a function, \".concat(\"undefined\" == typeof callback ? \"undefined\" : w(callback), \" given.\"), n.settings.showWarnings);\n          }));\n        }\n      }, {\n        key: \"_addCSSClass\",\n        value: function value(e) {\n          this.domElement.classList.add(e);\n        }\n      }, {\n        key: \"_removeCSSClass\",\n        value: function value(e) {\n          this.domElement.classList.remove(e);\n        }\n      }, {\n        key: \"update\",\n        value: function value() {\n          for (var t = this, e = arguments.length, i = new Array(e), n = 0; n < e; n++) {\n            i[n] = arguments[n];\n          }\n\n          Array.isArray(i) && Array.isArray(i[0]) && (i = i[0]);\n          var a = M.cloneObject(this.settings),\n              r = this.rawValue,\n              s = {};\n          M.isUndefinedOrNullOrEmpty(i) || 0 === i.length ? s = null : 1 <= i.length && i.forEach(function (e) {\n            t.constructor._isPreDefinedOptionValid(e) && (e = t.constructor._getOptionObject(e)), b(s, e);\n          });\n\n          try {\n            this._setSettings(s, !0), this._setWritePermissions(), this._updateEventListeners(), this.set(r);\n          } catch (e) {\n            return this._setSettings(a, !0), M.throwError(\"Unable to update the settings, those are invalid: [\".concat(e, \"]\")), this;\n          }\n\n          return this;\n        }\n      }, {\n        key: \"getSettings\",\n        value: function value() {\n          return this.settings;\n        }\n      }, {\n        key: \"set\",\n        value: function value(e, t, i) {\n          var n,\n              a = 1 < arguments.length && void 0 !== t ? t : null,\n              r = !(2 < arguments.length && void 0 !== i) || i;\n          if (M.isUndefined(e)) return M.warning(\"You are trying to set an 'undefined' value ; an error could have occurred.\", this.settings.showWarnings), this;\n          if (M.isNull(a) || this._setSettings(a, !0), null === e && this.settings.emptyInputBehavior !== B.options.emptyInputBehavior[\"null\"]) return M.warning(\"You are trying to set the `null` value while the `emptyInputBehavior` option is set to \".concat(this.settings.emptyInputBehavior, \". If you want to be able to set the `null` value, you need to change the 'emptyInputBehavior' option to `'null'`.\"), this.settings.showWarnings), this;\n          if (null === e) return this._setElementAndRawValue(null, null, r), this._saveValueToPersistentStorage(), this;\n          if (n = this.constructor._toNumericValue(e, this.settings), isNaN(Number(n))) return M.warning(\"The value you are trying to set results in `NaN`. The element value is set to the empty string instead.\", this.settings.showWarnings), this.setValue(\"\", r), this;\n          if (\"\" === n) switch (this.settings.emptyInputBehavior) {\n            case B.options.emptyInputBehavior.zero:\n              n = 0;\n              break;\n\n            case B.options.emptyInputBehavior.min:\n              n = this.settings.minimumValue;\n              break;\n\n            case B.options.emptyInputBehavior.max:\n              n = this.settings.maximumValue;\n              break;\n\n            default:\n              M.isNumber(this.settings.emptyInputBehavior) && (n = Number(this.settings.emptyInputBehavior));\n          }\n          if (\"\" === n) return s = this.settings.emptyInputBehavior === B.options.emptyInputBehavior.always ? this.settings.currencySymbol : \"\", this._setElementAndRawValue(s, \"\", r), this;\n          var s,\n              o = S(this.constructor._checkIfInRangeWithOverrideOption(n, this.settings), 2),\n              l = o[0],\n              u = o[1];\n          if (l && u && this.settings.valuesToStrings && this._checkValuesToStrings(n)) return this._setElementAndRawValue(this.settings.valuesToStrings[n], n, r), this._saveValueToPersistentStorage(), this;\n\n          if (M.isZeroOrHasNoValue(n) && (n = \"0\"), l && u) {\n            var c = this.constructor._roundRawValue(n, this.settings);\n\n            return c = this._trimLeadingAndTrailingZeros(c.replace(this.settings.decimalCharacter, \".\")), n = this._getRawValueToFormat(n), n = this.isFocused ? this.constructor._roundFormattedValueShownOnFocus(n, this.settings) : (this.settings.divisorWhenUnfocused && (n = (n /= this.settings.divisorWhenUnfocused).toString()), this.constructor._roundFormattedValueShownOnBlur(n, this.settings)), n = this.constructor._modifyNegativeSignAndDecimalCharacterForFormattedValue(n, this.settings), n = this.constructor._addGroupSeparators(n, this.settings, this.isFocused, this.rawValue, c), !this.isFocused && this.settings.symbolWhenUnfocused && (n = \"\".concat(n).concat(this.settings.symbolWhenUnfocused)), (this.settings.decimalPlacesShownOnFocus || this.settings.divisorWhenUnfocused) && this._saveValueToPersistentStorage(), this._setElementAndRawValue(n, c, r), this._setValidOrInvalidState(c), this;\n          }\n\n          return this._triggerRangeEvents(l, u), M.throwError(\"The value [\".concat(n, \"] being set falls outside of the minimumValue [\").concat(this.settings.minimumValue, \"] and maximumValue [\").concat(this.settings.maximumValue, \"] range set for this element\")), this._removeValueFromPersistentStorage(), this.setValue(\"\", r), this;\n        }\n      }, {\n        key: \"setUnformatted\",\n        value: function value(e, t) {\n          var i = 1 < arguments.length && void 0 !== t ? t : null;\n          if (null === e || M.isUndefined(e)) return this;\n          M.isNull(i) || this._setSettings(i, !0);\n\n          var n = this.constructor._removeBrackets(e, this.settings),\n              a = this.constructor._stripAllNonNumberCharacters(n, this.settings, !0, this.isFocused);\n\n          return M.isNumber(a) || M.throwError(\"The value is not a valid one, it's not a numeric string nor a recognized currency.\"), this.constructor._isWithinRangeWithOverrideOption(a, this.settings) ? this.setValue(e) : M.throwError(\"The value is out of the range limits [\".concat(this.settings.minimumValue, \", \").concat(this.settings.maximumValue, \"].\")), this;\n        }\n      }, {\n        key: \"setValue\",\n        value: function value(e, t) {\n          var i = !(1 < arguments.length && void 0 !== t) || t;\n          return this._setElementAndRawValue(e, i), this;\n        }\n      }, {\n        key: \"_setRawValue\",\n        value: function value(e, t) {\n          var i = !(1 < arguments.length && void 0 !== t) || t;\n\n          if (this.rawValue !== e) {\n            var n = this.rawValue;\n            this.rawValue = e, !M.isNull(this.settings.rawValueDivisor) && 0 !== this.settings.rawValueDivisor && \"\" !== e && null !== e && this._isUserManuallyEditingTheValue() && (this.rawValue /= this.settings.rawValueDivisor), this._triggerEvent(B.events.rawValueModified, this.domElement, {\n              oldRawValue: n,\n              newRawValue: this.rawValue,\n              isPristine: this.isPristine(!0),\n              error: null,\n              aNElement: this\n            }), this._parseStyleRules(), i && this._historyTableAdd();\n          }\n        }\n      }, {\n        key: \"_setElementValue\",\n        value: function value(e, t) {\n          var i = !(1 < arguments.length && void 0 !== t) || t,\n              n = M.getElementValue(this.domElement);\n          return e !== n && (this.internalModification = !0, M.setElementValue(this.domElement, e), this.internalModification = !1, i && this._triggerEvent(B.events.formatted, this.domElement, {\n            oldValue: n,\n            newValue: e,\n            oldRawValue: this.rawValue,\n            newRawValue: this.rawValue,\n            isPristine: this.isPristine(!1),\n            error: null,\n            aNElement: this\n          })), this;\n        }\n      }, {\n        key: \"_setElementAndRawValue\",\n        value: function value(e, t, i) {\n          var n = 1 < arguments.length && void 0 !== t ? t : null,\n              a = !(2 < arguments.length && void 0 !== i) || i;\n          return M.isNull(n) ? n = e : M.isBoolean(n) && (a = n, n = e), this._setElementValue(e), this._setRawValue(n, a), this;\n        }\n      }, {\n        key: \"_getRawValueToFormat\",\n        value: function value(e) {\n          return M.isNull(this.settings.rawValueDivisor) || 0 === this.settings.rawValueDivisor || \"\" === e || null === e ? e : e * this.settings.rawValueDivisor;\n        }\n      }, {\n        key: \"_checkValuesToStrings\",\n        value: function value(e) {\n          return this.constructor._checkValuesToStringsArray(e, this.valuesToStringsKeys);\n        }\n      }, {\n        key: \"_isUserManuallyEditingTheValue\",\n        value: function value() {\n          return this.isFocused && this.isEditing || this.isDropEvent;\n        }\n      }, {\n        key: \"_executeCallback\",\n        value: function value(e, t) {\n          !M.isNull(t) && M.isFunction(t) && t(e, this);\n        }\n      }, {\n        key: \"_triggerEvent\",\n        value: function value(e, t, i) {\n          var n = 1 < arguments.length && void 0 !== t ? t : document,\n              a = 2 < arguments.length && void 0 !== i ? i : null;\n          M.triggerEvent(e, n, a, this.settings.eventBubbles, this.settings.eventIsCancelable);\n        }\n      }, {\n        key: \"get\",\n        value: function value(e) {\n          var t = 0 < arguments.length && void 0 !== e ? e : null;\n          return this.getNumericString(t);\n        }\n      }, {\n        key: \"getNumericString\",\n        value: function value(e) {\n          var t,\n              i = 0 < arguments.length && void 0 !== e ? e : null;\n          return t = M.isNull(this.rawValue) ? null : M.trimPaddedZerosFromDecimalPlaces(this.rawValue), this._executeCallback(t, i), t;\n        }\n      }, {\n        key: \"getFormatted\",\n        value: function value(e) {\n          var t = 0 < arguments.length && void 0 !== e ? e : null;\n          \"value\" in this.domElement || \"textContent\" in this.domElement || M.throwError(\"Unable to get the formatted string from the element.\");\n          var i = M.getElementValue(this.domElement);\n          return this._executeCallback(i, t), i;\n        }\n      }, {\n        key: \"getNumber\",\n        value: function value(e) {\n          var t,\n              i = 0 < arguments.length && void 0 !== e ? e : null;\n          return t = null === this.rawValue ? null : this.constructor._toLocale(this.getNumericString(), \"number\", this.settings), this._executeCallback(t, i), t;\n        }\n      }, {\n        key: \"getLocalized\",\n        value: function value(e, t) {\n          var i,\n              n,\n              a = 0 < arguments.length && void 0 !== e ? e : null,\n              r = 1 < arguments.length && void 0 !== t ? t : null;\n          M.isFunction(a) && M.isNull(r) && (r = a, a = null), (i = M.isEmptyString(this.rawValue) ? \"\" : \"\" + Number(this.rawValue)) && 0 === Number(i) && this.settings.leadingZero !== B.options.leadingZero.keep && (i = \"0\"), n = M.isNull(a) ? this.settings.outputFormat : a;\n\n          var s = this.constructor._toLocale(i, n, this.settings);\n\n          return this._executeCallback(s, r), s;\n        }\n      }, {\n        key: \"reformat\",\n        value: function value() {\n          return this.set(this.rawValue), this;\n        }\n      }, {\n        key: \"unformat\",\n        value: function value() {\n          return this._setElementValue(this.getNumericString()), this;\n        }\n      }, {\n        key: \"unformatLocalized\",\n        value: function value(e) {\n          var t = 0 < arguments.length && void 0 !== e ? e : null;\n          return this._setElementValue(this.getLocalized(t)), this;\n        }\n      }, {\n        key: \"isPristine\",\n        value: function value(e) {\n          return 0 < arguments.length && void 0 !== e && !e ? this.initialValueHtmlAttribute === this.getFormatted() : this.initialValue === this.getNumericString();\n        }\n      }, {\n        key: \"select\",\n        value: function value() {\n          return this.settings.selectNumberOnly ? this.selectNumber() : this._defaultSelectAll(), this;\n        }\n      }, {\n        key: \"_defaultSelectAll\",\n        value: function value() {\n          M.setElementSelection(this.domElement, 0, M.getElementValue(this.domElement).length);\n        }\n      }, {\n        key: \"selectNumber\",\n        value: function value() {\n          var e,\n              t,\n              i = M.getElementValue(this.domElement),\n              n = i.length,\n              a = this.settings.currencySymbol.length,\n              r = this.settings.currencySymbolPlacement,\n              s = M.isNegative(i, this.settings.negativeSignCharacter) ? 1 : 0,\n              o = this.settings.suffixText.length;\n          if (e = r === B.options.currencySymbolPlacement.suffix ? 0 : this.settings.negativePositiveSignPlacement === B.options.negativePositiveSignPlacement.left && 1 == s && 0 < a ? a + 1 : a, r === B.options.currencySymbolPlacement.prefix) t = n - o;else switch (this.settings.negativePositiveSignPlacement) {\n            case B.options.negativePositiveSignPlacement.left:\n              t = n - (o + a);\n              break;\n\n            case B.options.negativePositiveSignPlacement.right:\n              t = 0 < a ? n - (a + s + o) : n - (a + o);\n              break;\n\n            default:\n              t = n - (a + o);\n          }\n          return M.setElementSelection(this.domElement, e, t), this;\n        }\n      }, {\n        key: \"selectInteger\",\n        value: function value() {\n          var e = 0,\n              t = 0 <= this.rawValue;\n          this.settings.currencySymbolPlacement !== B.options.currencySymbolPlacement.prefix && (this.settings.currencySymbolPlacement !== B.options.currencySymbolPlacement.suffix || this.settings.negativePositiveSignPlacement !== B.options.negativePositiveSignPlacement.prefix && this.settings.negativePositiveSignPlacement !== B.options.negativePositiveSignPlacement.none) || (this.settings.showPositiveSign && t || !t && this.settings.currencySymbolPlacement === B.options.currencySymbolPlacement.prefix && this.settings.negativePositiveSignPlacement === B.options.negativePositiveSignPlacement.left) && (e += 1), this.settings.currencySymbolPlacement === B.options.currencySymbolPlacement.prefix && (e += this.settings.currencySymbol.length);\n          var i = M.getElementValue(this.domElement),\n              n = i.indexOf(this.settings.decimalCharacter);\n          return -1 === n && (n = this.settings.currencySymbolPlacement === B.options.currencySymbolPlacement.suffix ? i.length - this.settings.currencySymbol.length : i.length, t || this.settings.negativePositiveSignPlacement !== B.options.negativePositiveSignPlacement.suffix && this.settings.currencySymbolPlacement !== B.options.currencySymbolPlacement.suffix || --n, n -= this.settings.suffixText.length), M.setElementSelection(this.domElement, e, n), this;\n        }\n      }, {\n        key: \"selectDecimal\",\n        value: function value() {\n          var e,\n              t,\n              i = M.getElementValue(this.domElement).indexOf(this.settings.decimalCharacter);\n          return e = -1 === i ? i = 0 : (i += 1, t = this.isFocused ? this.settings.decimalPlacesShownOnFocus : this.settings.decimalPlacesShownOnBlur, i + Number(t)), M.setElementSelection(this.domElement, i, e), this;\n        }\n      }, {\n        key: \"node\",\n        value: function value() {\n          return this.domElement;\n        }\n      }, {\n        key: \"parent\",\n        value: function value() {\n          return this.domElement.parentNode;\n        }\n      }, {\n        key: \"detach\",\n        value: function value(e) {\n          var t,\n              i = 0 < arguments.length && void 0 !== e ? e : null;\n          return t = M.isNull(i) ? this.domElement : i.node(), this._removeFromLocalList(t), this;\n        }\n      }, {\n        key: \"attach\",\n        value: function value(e, t) {\n          var i = !(1 < arguments.length && void 0 !== t) || t;\n          return this._addToLocalList(e.node()), i && e.update(this.settings), this;\n        }\n      }, {\n        key: \"formatOther\",\n        value: function value(e, t) {\n          var i = 1 < arguments.length && void 0 !== t ? t : null;\n          return this._formatOrUnformatOther(!0, e, i);\n        }\n      }, {\n        key: \"unformatOther\",\n        value: function value(e, t) {\n          var i = 1 < arguments.length && void 0 !== t ? t : null;\n          return this._formatOrUnformatOther(!1, e, i);\n        }\n      }, {\n        key: \"_formatOrUnformatOther\",\n        value: function value(e, t, i) {\n          var n,\n              a,\n              r = 2 < arguments.length && void 0 !== i ? i : null;\n\n          if (n = M.isNull(r) ? this.settings : this._cloneAndMergeSettings(r), M.isElement(t)) {\n            var s = M.getElementValue(t);\n            return a = e ? B.format(s, n) : B.unformat(s, n), M.setElementValue(t, a), null;\n          }\n\n          return e ? B.format(t, n) : B.unformat(t, n);\n        }\n      }, {\n        key: \"init\",\n        value: function value(e, t) {\n          var n = this,\n              a = !(1 < arguments.length && void 0 !== t) || t,\n              i = !1,\n              r = [];\n          if (M.isString(e) ? r = p(document.querySelectorAll(e)) : M.isElement(e) ? (r.push(e), i = !0) : M.isArray(e) ? r = e : M.throwError(\"The given parameters to the 'init' function are invalid.\"), 0 === r.length) return M.warning(\"No valid DOM elements were given hence no AutoNumeric object were instantiated.\", !0), [];\n\n          var s = this._getLocalList(),\n              o = [];\n\n          return r.forEach(function (e) {\n            var t = n.settings.createLocalList;\n            a && (n.settings.createLocalList = !1);\n            var i = new B(e, M.getElementValue(e), n.settings);\n            a && (i._setLocalList(s), n._addToLocalList(e, i), n.settings.createLocalList = t), o.push(i);\n          }), i ? o[0] : o;\n        }\n      }, {\n        key: \"clear\",\n        value: function value(e) {\n          if (0 < arguments.length && void 0 !== e && e) {\n            var t = {\n              emptyInputBehavior: B.options.emptyInputBehavior.focus\n            };\n            this.set(\"\", t);\n          } else this.set(\"\");\n\n          return this;\n        }\n      }, {\n        key: \"remove\",\n        value: function value() {\n          this._removeValueFromPersistentStorage(), this._removeEventListeners(), this._removeWatcher(), this._removeFromLocalList(this.domElement), this.constructor._removeFromGlobalList(this);\n        }\n      }, {\n        key: \"wipe\",\n        value: function value() {\n          this._setElementValue(\"\", !1), this.remove();\n        }\n      }, {\n        key: \"nuke\",\n        value: function value() {\n          this.remove(), this.domElement.parentNode.removeChild(this.domElement);\n        }\n      }, {\n        key: \"form\",\n        value: function value(e) {\n          if (0 < arguments.length && void 0 !== e && e || M.isUndefinedOrNullOrEmpty(this.parentForm)) {\n            var t = this._getParentForm();\n\n            if (!M.isNull(t) && t !== this.parentForm) {\n              var i = this._getFormAutoNumericChildren(this.parentForm);\n\n              this.parentForm.dataset.anCount = i.length, this._hasFormHandlerFunction(t) ? this._incrementParentFormCounter(t) : (this._storeFormHandlerFunction(t), this._initializeFormCounterToOne(t));\n            }\n\n            this.parentForm = t;\n          }\n\n          return this.parentForm;\n        }\n      }, {\n        key: \"_getFormAutoNumericChildren\",\n        value: function value(e) {\n          var t = this;\n          return p(e.querySelectorAll(\"input\")).filter(function (e) {\n            return t.constructor.isManagedByAutoNumeric(e);\n          });\n        }\n      }, {\n        key: \"_getParentForm\",\n        value: function value() {\n          if (\"body\" === this.domElement.tagName.toLowerCase()) return null;\n          var e,\n              t = this.domElement;\n\n          do {\n            if (t = t.parentNode, M.isNull(t)) return null;\n            if (\"body\" === (e = t.tagName ? t.tagName.toLowerCase() : \"\")) break;\n          } while (\"form\" !== e);\n\n          return \"form\" === e ? t : null;\n        }\n      }, {\n        key: \"formNumericString\",\n        value: function value() {\n          return this.constructor._serializeNumericString(this.form(), this.settings.serializeSpaces);\n        }\n      }, {\n        key: \"formFormatted\",\n        value: function value() {\n          return this.constructor._serializeFormatted(this.form(), this.settings.serializeSpaces);\n        }\n      }, {\n        key: \"formLocalized\",\n        value: function value(e) {\n          var t,\n              i = 0 < arguments.length && void 0 !== e ? e : null;\n          return t = M.isNull(i) ? this.settings.outputFormat : i, this.constructor._serializeLocalized(this.form(), this.settings.serializeSpaces, t);\n        }\n      }, {\n        key: \"formArrayNumericString\",\n        value: function value() {\n          return this.constructor._serializeNumericStringArray(this.form(), this.settings.serializeSpaces);\n        }\n      }, {\n        key: \"formArrayFormatted\",\n        value: function value() {\n          return this.constructor._serializeFormattedArray(this.form(), this.settings.serializeSpaces);\n        }\n      }, {\n        key: \"formArrayLocalized\",\n        value: function value(e) {\n          var t,\n              i = 0 < arguments.length && void 0 !== e ? e : null;\n          return t = M.isNull(i) ? this.settings.outputFormat : i, this.constructor._serializeLocalizedArray(this.form(), this.settings.serializeSpaces, t);\n        }\n      }, {\n        key: \"formJsonNumericString\",\n        value: function value() {\n          return JSON.stringify(this.formArrayNumericString());\n        }\n      }, {\n        key: \"formJsonFormatted\",\n        value: function value() {\n          return JSON.stringify(this.formArrayFormatted());\n        }\n      }, {\n        key: \"formJsonLocalized\",\n        value: function value(e) {\n          var t = 0 < arguments.length && void 0 !== e ? e : null;\n          return JSON.stringify(this.formArrayLocalized(t));\n        }\n      }, {\n        key: \"formUnformat\",\n        value: function value() {\n          return this.constructor._getChildANInputElement(this.form()).forEach(function (e) {\n            B.getAutoNumericElement(e).unformat();\n          }), this;\n        }\n      }, {\n        key: \"formUnformatLocalized\",\n        value: function value() {\n          return this.constructor._getChildANInputElement(this.form()).forEach(function (e) {\n            B.getAutoNumericElement(e).unformatLocalized();\n          }), this;\n        }\n      }, {\n        key: \"formReformat\",\n        value: function value() {\n          return this.constructor._getChildANInputElement(this.form()).forEach(function (e) {\n            B.getAutoNumericElement(e).reformat();\n          }), this;\n        }\n      }, {\n        key: \"formSubmitNumericString\",\n        value: function value(e) {\n          var t = 0 < arguments.length && void 0 !== e ? e : null;\n          return M.isNull(t) ? (this.formUnformat(), this.form().submit(), this.formReformat()) : M.isFunction(t) ? t(this.formNumericString()) : M.throwError(\"The given callback is not a function.\"), this;\n        }\n      }, {\n        key: \"formSubmitFormatted\",\n        value: function value(e) {\n          var t = 0 < arguments.length && void 0 !== e ? e : null;\n          return M.isNull(t) ? this.form().submit() : M.isFunction(t) ? t(this.formFormatted()) : M.throwError(\"The given callback is not a function.\"), this;\n        }\n      }, {\n        key: \"formSubmitLocalized\",\n        value: function value(e, t) {\n          var i = 0 < arguments.length && void 0 !== e ? e : null,\n              n = 1 < arguments.length && void 0 !== t ? t : null;\n          return M.isNull(n) ? (this.formUnformatLocalized(), this.form().submit(), this.formReformat()) : M.isFunction(n) ? n(this.formLocalized(i)) : M.throwError(\"The given callback is not a function.\"), this;\n        }\n      }, {\n        key: \"formSubmitArrayNumericString\",\n        value: function value(e) {\n          return M.isFunction(e) ? e(this.formArrayNumericString()) : M.throwError(\"The given callback is not a function.\"), this;\n        }\n      }, {\n        key: \"formSubmitArrayFormatted\",\n        value: function value(e) {\n          return M.isFunction(e) ? e(this.formArrayFormatted()) : M.throwError(\"The given callback is not a function.\"), this;\n        }\n      }, {\n        key: \"formSubmitArrayLocalized\",\n        value: function value(e, t) {\n          var i = 1 < arguments.length && void 0 !== t ? t : null;\n          return M.isFunction(e) ? e(this.formArrayLocalized(i)) : M.throwError(\"The given callback is not a function.\"), this;\n        }\n      }, {\n        key: \"formSubmitJsonNumericString\",\n        value: function value(e) {\n          return M.isFunction(e) ? e(this.formJsonNumericString()) : M.throwError(\"The given callback is not a function.\"), this;\n        }\n      }, {\n        key: \"formSubmitJsonFormatted\",\n        value: function value(e) {\n          return M.isFunction(e) ? e(this.formJsonFormatted()) : M.throwError(\"The given callback is not a function.\"), this;\n        }\n      }, {\n        key: \"formSubmitJsonLocalized\",\n        value: function value(e, t) {\n          var i = 1 < arguments.length && void 0 !== t ? t : null;\n          return M.isFunction(e) ? e(this.formJsonLocalized(i)) : M.throwError(\"The given callback is not a function.\"), this;\n        }\n      }, {\n        key: \"_createLocalList\",\n        value: function value() {\n          this.autoNumericLocalList = new Map(), this._addToLocalList(this.domElement);\n        }\n      }, {\n        key: \"_deleteLocalList\",\n        value: function value() {\n          delete this.autoNumericLocalList;\n        }\n      }, {\n        key: \"_setLocalList\",\n        value: function value(e) {\n          this.autoNumericLocalList = e;\n        }\n      }, {\n        key: \"_getLocalList\",\n        value: function value() {\n          return this.autoNumericLocalList;\n        }\n      }, {\n        key: \"_hasLocalList\",\n        value: function value() {\n          return this.autoNumericLocalList instanceof Map && 0 !== this.autoNumericLocalList.size;\n        }\n      }, {\n        key: \"_addToLocalList\",\n        value: function value(e, t) {\n          var i = 1 < arguments.length && void 0 !== t ? t : null;\n          M.isNull(i) && (i = this), M.isUndefined(this.autoNumericLocalList) ? M.throwError(\"The local list provided does not exists when trying to add an element. [\".concat(this.autoNumericLocalList, \"] given.\")) : this.autoNumericLocalList.set(e, i);\n        }\n      }, {\n        key: \"_removeFromLocalList\",\n        value: function value(e) {\n          M.isUndefined(this.autoNumericLocalList) ? this.settings.createLocalList && M.throwError(\"The local list provided does not exists when trying to remove an element. [\".concat(this.autoNumericLocalList, \"] given.\")) : this.autoNumericLocalList[\"delete\"](e);\n        }\n      }, {\n        key: \"_mergeSettings\",\n        value: function value() {\n          for (var e = arguments.length, t = new Array(e), i = 0; i < e; i++) {\n            t[i] = arguments[i];\n          }\n\n          b.apply(void 0, [this.settings].concat(t));\n        }\n      }, {\n        key: \"_cloneAndMergeSettings\",\n        value: function value() {\n          for (var e = {}, t = arguments.length, i = new Array(t), n = 0; n < t; n++) {\n            i[n] = arguments[n];\n          }\n\n          return b.apply(void 0, [e, this.settings].concat(i)), e;\n        }\n      }, {\n        key: \"_updatePredefinedOptions\",\n        value: function value(e, t) {\n          var i = 1 < arguments.length && void 0 !== t ? t : null;\n          return M.isNull(i) ? this.update(e) : (this._mergeSettings(e, i), this.update(this.settings)), this;\n        }\n      }, {\n        key: \"french\",\n        value: function value(e) {\n          var t = 0 < arguments.length && void 0 !== e ? e : null;\n          return this._updatePredefinedOptions(B.getPredefinedOptions().French, t), this;\n        }\n      }, {\n        key: \"northAmerican\",\n        value: function value(e) {\n          var t = 0 < arguments.length && void 0 !== e ? e : null;\n          return this._updatePredefinedOptions(B.getPredefinedOptions().NorthAmerican, t), this;\n        }\n      }, {\n        key: \"british\",\n        value: function value(e) {\n          var t = 0 < arguments.length && void 0 !== e ? e : null;\n          return this._updatePredefinedOptions(B.getPredefinedOptions().British, t), this;\n        }\n      }, {\n        key: \"swiss\",\n        value: function value(e) {\n          var t = 0 < arguments.length && void 0 !== e ? e : null;\n          return this._updatePredefinedOptions(B.getPredefinedOptions().Swiss, t), this;\n        }\n      }, {\n        key: \"japanese\",\n        value: function value(e) {\n          var t = 0 < arguments.length && void 0 !== e ? e : null;\n          return this._updatePredefinedOptions(B.getPredefinedOptions().Japanese, t), this;\n        }\n      }, {\n        key: \"spanish\",\n        value: function value(e) {\n          var t = 0 < arguments.length && void 0 !== e ? e : null;\n          return this._updatePredefinedOptions(B.getPredefinedOptions().Spanish, t), this;\n        }\n      }, {\n        key: \"chinese\",\n        value: function value(e) {\n          var t = 0 < arguments.length && void 0 !== e ? e : null;\n          return this._updatePredefinedOptions(B.getPredefinedOptions().Chinese, t), this;\n        }\n      }, {\n        key: \"brazilian\",\n        value: function value(e) {\n          var t = 0 < arguments.length && void 0 !== e ? e : null;\n          return this._updatePredefinedOptions(B.getPredefinedOptions().Brazilian, t), this;\n        }\n      }, {\n        key: \"_runCallbacksFoundInTheSettingsObject\",\n        value: function value() {\n          for (var e in this.settings) {\n            if (Object.prototype.hasOwnProperty.call(this.settings, e)) {\n              var t = this.settings[e];\n              if (\"function\" == typeof t) this.settings[e] = t(this, e);else {\n                var i = this.domElement.getAttribute(e);\n                i = M.camelize(i), \"function\" == typeof this.settings[i] && (this.settings[e] = i(this, e));\n              }\n            }\n          }\n        }\n      }, {\n        key: \"_setTrailingNegativeSignInfo\",\n        value: function value() {\n          this.isTrailingNegative = this.settings.currencySymbolPlacement === B.options.currencySymbolPlacement.prefix && this.settings.negativePositiveSignPlacement === B.options.negativePositiveSignPlacement.suffix || this.settings.currencySymbolPlacement === B.options.currencySymbolPlacement.suffix && (this.settings.negativePositiveSignPlacement === B.options.negativePositiveSignPlacement.left || this.settings.negativePositiveSignPlacement === B.options.negativePositiveSignPlacement.right);\n        }\n      }, {\n        key: \"_modifyNegativeSignAndDecimalCharacterForRawValue\",\n        value: function value(e) {\n          return \".\" !== this.settings.decimalCharacter && (e = e.replace(this.settings.decimalCharacter, \".\")), \"-\" !== this.settings.negativeSignCharacter && this.settings.isNegativeSignAllowed && (e = e.replace(this.settings.negativeSignCharacter, \"-\")), e.match(/\\d/) || (e += \"0\"), e;\n        }\n      }, {\n        key: \"_initialCaretPosition\",\n        value: function value(e) {\n          M.isNull(this.settings.caretPositionOnFocus) && this.settings.selectOnFocus === B.options.selectOnFocus.doNotSelect && M.throwError(\"`_initialCaretPosition()` should never be called when the `caretPositionOnFocus` option is `null`.\");\n          var t = this.rawValue < 0,\n              i = M.isZeroOrHasNoValue(e),\n              n = e.length,\n              a = 0,\n              r = 0,\n              s = !1,\n              o = 0;\n          this.settings.caretPositionOnFocus !== B.options.caretPositionOnFocus.start && (a = (e = (e = (e = e.replace(this.settings.negativeSignCharacter, \"\")).replace(this.settings.positiveSignCharacter, \"\")).replace(this.settings.currencySymbol, \"\")).length, s = M.contains(e, this.settings.decimalCharacter), this.settings.caretPositionOnFocus !== B.options.caretPositionOnFocus.decimalLeft && this.settings.caretPositionOnFocus !== B.options.caretPositionOnFocus.decimalRight || (o = s ? (r = e.indexOf(this.settings.decimalCharacter), this.settings.decimalCharacter.length) : (r = a, 0)));\n          var l = \"\";\n          t ? l = this.settings.negativeSignCharacter : this.settings.showPositiveSign && !i && (l = this.settings.positiveSignCharacter);\n          var u,\n              c = l.length,\n              h = this.settings.currencySymbol.length;\n\n          if (this.settings.currencySymbolPlacement === B.options.currencySymbolPlacement.prefix) {\n            if (this.settings.caretPositionOnFocus === B.options.caretPositionOnFocus.start) {\n              if (this.settings.negativePositiveSignPlacement !== B.options.negativePositiveSignPlacement.none && (t || !t && this.settings.showPositiveSign && !i)) switch (this.settings.negativePositiveSignPlacement) {\n                case B.options.negativePositiveSignPlacement.prefix:\n                case B.options.negativePositiveSignPlacement.left:\n                case B.options.negativePositiveSignPlacement.right:\n                  u = c + h;\n                  break;\n\n                case B.options.negativePositiveSignPlacement.suffix:\n                  u = h;\n              } else u = h;\n            } else if (this.settings.caretPositionOnFocus === B.options.caretPositionOnFocus.end) {\n              if (this.settings.negativePositiveSignPlacement !== B.options.negativePositiveSignPlacement.none && (t || !t && this.settings.showPositiveSign && !i)) switch (this.settings.negativePositiveSignPlacement) {\n                case B.options.negativePositiveSignPlacement.prefix:\n                case B.options.negativePositiveSignPlacement.left:\n                case B.options.negativePositiveSignPlacement.right:\n                  u = n;\n                  break;\n\n                case B.options.negativePositiveSignPlacement.suffix:\n                  u = h + a;\n              } else u = n;\n            } else if (this.settings.caretPositionOnFocus === B.options.caretPositionOnFocus.decimalLeft) {\n              if (this.settings.negativePositiveSignPlacement !== B.options.negativePositiveSignPlacement.none && (t || !t && this.settings.showPositiveSign && !i)) switch (this.settings.negativePositiveSignPlacement) {\n                case B.options.negativePositiveSignPlacement.prefix:\n                case B.options.negativePositiveSignPlacement.left:\n                case B.options.negativePositiveSignPlacement.right:\n                  u = c + h + r;\n                  break;\n\n                case B.options.negativePositiveSignPlacement.suffix:\n                  u = h + r;\n              } else u = h + r;\n            } else if (this.settings.caretPositionOnFocus === B.options.caretPositionOnFocus.decimalRight) if (this.settings.negativePositiveSignPlacement !== B.options.negativePositiveSignPlacement.none && (t || !t && this.settings.showPositiveSign && !i)) switch (this.settings.negativePositiveSignPlacement) {\n              case B.options.negativePositiveSignPlacement.prefix:\n              case B.options.negativePositiveSignPlacement.left:\n              case B.options.negativePositiveSignPlacement.right:\n                u = c + h + r + o;\n                break;\n\n              case B.options.negativePositiveSignPlacement.suffix:\n                u = h + r + o;\n            } else u = h + r + o;\n          } else if (this.settings.currencySymbolPlacement === B.options.currencySymbolPlacement.suffix) if (this.settings.caretPositionOnFocus === B.options.caretPositionOnFocus.start) {\n            if (this.settings.negativePositiveSignPlacement !== B.options.negativePositiveSignPlacement.none && (t || !t && this.settings.showPositiveSign && !i)) switch (this.settings.negativePositiveSignPlacement) {\n              case B.options.negativePositiveSignPlacement.suffix:\n              case B.options.negativePositiveSignPlacement.right:\n              case B.options.negativePositiveSignPlacement.left:\n                u = 0;\n                break;\n\n              case B.options.negativePositiveSignPlacement.prefix:\n                u = c;\n            } else u = 0;\n          } else if (this.settings.caretPositionOnFocus === B.options.caretPositionOnFocus.end) {\n            if (this.settings.negativePositiveSignPlacement !== B.options.negativePositiveSignPlacement.none && (t || !t && this.settings.showPositiveSign && !i)) switch (this.settings.negativePositiveSignPlacement) {\n              case B.options.negativePositiveSignPlacement.suffix:\n              case B.options.negativePositiveSignPlacement.right:\n              case B.options.negativePositiveSignPlacement.left:\n                u = a;\n                break;\n\n              case B.options.negativePositiveSignPlacement.prefix:\n                u = c + a;\n            } else u = a;\n          } else if (this.settings.caretPositionOnFocus === B.options.caretPositionOnFocus.decimalLeft) {\n            if (this.settings.negativePositiveSignPlacement !== B.options.negativePositiveSignPlacement.none && (t || !t && this.settings.showPositiveSign && !i)) switch (this.settings.negativePositiveSignPlacement) {\n              case B.options.negativePositiveSignPlacement.suffix:\n              case B.options.negativePositiveSignPlacement.right:\n              case B.options.negativePositiveSignPlacement.left:\n                u = r;\n                break;\n\n              case B.options.negativePositiveSignPlacement.prefix:\n                u = c + r;\n            } else u = r;\n          } else if (this.settings.caretPositionOnFocus === B.options.caretPositionOnFocus.decimalRight) if (this.settings.negativePositiveSignPlacement !== B.options.negativePositiveSignPlacement.none && (t || !t && this.settings.showPositiveSign && !i)) switch (this.settings.negativePositiveSignPlacement) {\n            case B.options.negativePositiveSignPlacement.suffix:\n            case B.options.negativePositiveSignPlacement.right:\n            case B.options.negativePositiveSignPlacement.left:\n              u = r + o;\n              break;\n\n            case B.options.negativePositiveSignPlacement.prefix:\n              u = c + r + o;\n          } else u = r + o;\n\n          return u;\n        }\n      }, {\n        key: \"_triggerRangeEvents\",\n        value: function value(e, t) {\n          e || this._triggerEvent(B.events.minRangeExceeded, this.domElement), t || this._triggerEvent(B.events.maxRangeExceeded, this.domElement);\n        }\n      }, {\n        key: \"_setInvalidState\",\n        value: function value() {\n          this.isInputElement ? M.setInvalidState(this.domElement) : this._addCSSClass(this.settings.invalidClass), this._triggerEvent(B.events.invalidValue, this.domElement), this.validState = !1;\n        }\n      }, {\n        key: \"_setValidState\",\n        value: function value() {\n          this.isInputElement ? M.setValidState(this.domElement) : this._removeCSSClass(this.settings.invalidClass), this.validState || this._triggerEvent(B.events.correctedValue, this.domElement), this.validState = !0;\n        }\n      }, {\n        key: \"_setValidOrInvalidState\",\n        value: function value(e) {\n          if (this.settings.overrideMinMaxLimits === B.options.overrideMinMaxLimits.invalid) {\n            var t = this.constructor._isMinimumRangeRespected(e, this.settings),\n                i = this.constructor._isMaximumRangeRespected(e, this.settings);\n\n            t && i ? this._setValidState() : this._setInvalidState(), this._triggerRangeEvents(t, i);\n          }\n        }\n      }, {\n        key: \"_keepAnOriginalSettingsCopy\",\n        value: function value() {\n          this.originalDigitGroupSeparator = this.settings.digitGroupSeparator, this.originalCurrencySymbol = this.settings.currencySymbol, this.originalSuffixText = this.settings.suffixText;\n        }\n      }, {\n        key: \"_trimLeadingAndTrailingZeros\",\n        value: function value(e) {\n          if (\"\" === e || null === e) return e;\n\n          if (this.settings.leadingZero !== B.options.leadingZero.keep) {\n            if (0 === Number(e)) return \"0\";\n            e = e.replace(/^(-)?0+(?=\\d)/g, \"$1\");\n          }\n\n          return M.contains(e, \".\") && (e = e.replace(/(\\.[0-9]*?)0+$/, \"$1\")), e.replace(/\\.$/, \"\");\n        }\n      }, {\n        key: \"_setPersistentStorageName\",\n        value: function value() {\n          this.settings.saveValueToSessionStorage && (\"\" === this.domElement.name || M.isUndefined(this.domElement.name) ? this.rawValueStorageName = \"\".concat(this.storageNamePrefix).concat(this.domElement.id) : this.rawValueStorageName = \"\".concat(this.storageNamePrefix).concat(decodeURIComponent(this.domElement.name)));\n        }\n      }, {\n        key: \"_saveValueToPersistentStorage\",\n        value: function value() {\n          this.settings.saveValueToSessionStorage && (this.sessionStorageAvailable ? sessionStorage.setItem(this.rawValueStorageName, this.rawValue) : document.cookie = \"\".concat(this.rawValueStorageName, \"=\").concat(this.rawValue, \"; expires= ; path=/\"));\n        }\n      }, {\n        key: \"_getValueFromPersistentStorage\",\n        value: function value() {\n          return this.settings.saveValueToSessionStorage ? this.sessionStorageAvailable ? sessionStorage.getItem(this.rawValueStorageName) : this.constructor._readCookie(this.rawValueStorageName) : (M.warning(\"`_getValueFromPersistentStorage()` is called but `settings.saveValueToSessionStorage` is false. There must be an error that needs fixing.\", this.settings.showWarnings), null);\n        }\n      }, {\n        key: \"_removeValueFromPersistentStorage\",\n        value: function value() {\n          if (this.settings.saveValueToSessionStorage) if (this.sessionStorageAvailable) sessionStorage.removeItem(this.rawValueStorageName);else {\n            var e = new Date();\n            e.setTime(e.getTime() - 864e5);\n            var t = \"; expires=\".concat(e.toUTCString());\n            document.cookie = \"\".concat(this.rawValueStorageName, \"='' ;\").concat(t, \"; path=/\");\n          }\n        }\n      }, {\n        key: \"_getDefaultValue\",\n        value: function value(e) {\n          var t = e.getAttribute(\"value\");\n          return M.isNull(t) ? \"\" : t;\n        }\n      }, {\n        key: \"_onFocusInAndMouseEnter\",\n        value: function value(e) {\n          if (this.isEditing = !1, !this.formulaMode && this.settings.unformatOnHover && \"mouseenter\" === e.type && e.altKey) this.constructor._unformatAltHovered(this);else if (\"focus\" === e.type && (this.isFocused = !0, this.rawValueOnFocus = this.rawValue), \"focus\" === e.type && this.settings.unformatOnHover && this.hoveredWithAlt && this.constructor._reformatAltHovered(this), \"focus\" === e.type || \"mouseenter\" === e.type && !this.isFocused) {\n            var t = null;\n            this.settings.emptyInputBehavior === B.options.emptyInputBehavior.focus && this.rawValue < 0 && null !== this.settings.negativeBracketsTypeOnBlur && this.settings.isNegativeSignAllowed && (t = this.constructor._removeBrackets(M.getElementValue(this.domElement), this.settings));\n\n            var i = this._getRawValueToFormat(this.rawValue);\n\n            if (\"\" !== i) {\n              var n = this.constructor._roundFormattedValueShownOnFocusOrBlur(i, this.settings, this.isFocused);\n\n              t = this.settings.showOnlyNumbersOnFocus === B.options.showOnlyNumbersOnFocus.onlyNumbers ? (this.settings.digitGroupSeparator = \"\", this.settings.currencySymbol = \"\", this.settings.suffixText = \"\", n.replace(\".\", this.settings.decimalCharacter)) : M.isNull(n) ? \"\" : this.constructor._addGroupSeparators(n.replace(\".\", this.settings.decimalCharacter), this.settings, this.isFocused, i);\n            }\n\n            M.isNull(t) ? this.valueOnFocus = \"\" : this.valueOnFocus = t, this.lastVal = this.valueOnFocus;\n\n            var a = this.constructor._isElementValueEmptyOrOnlyTheNegativeSign(this.valueOnFocus, this.settings),\n                r = this.constructor._orderValueCurrencySymbolAndSuffixText(this.valueOnFocus, this.settings, !0),\n                s = a && \"\" !== r && this.settings.emptyInputBehavior === B.options.emptyInputBehavior.focus;\n\n            s && (t = r), M.isNull(t) || this._setElementValue(t), s && r === this.settings.currencySymbol && this.settings.currencySymbolPlacement === B.options.currencySymbolPlacement.suffix && M.setElementSelection(e.target, 0);\n          }\n        }\n      }, {\n        key: \"_onFocus\",\n        value: function value() {\n          this.settings.isCancellable && this._saveCancellableValue();\n        }\n      }, {\n        key: \"_onFocusIn\",\n        value: function value(e) {\n          this.settings.selectOnFocus ? this.select() : M.isNull(this.settings.caretPositionOnFocus) || M.setElementSelection(e.target, this._initialCaretPosition(M.getElementValue(this.domElement)));\n        }\n      }, {\n        key: \"_enterFormulaMode\",\n        value: function value() {\n          this.settings.formulaMode && (this.formulaMode = !0, M.setElementValue(this.domElement, \"=\"), M.setElementSelection(this.domElement, 1));\n        }\n      }, {\n        key: \"_exitFormulaMode\",\n        value: function value() {\n          var e,\n              t = M.getElementValue(this.domElement);\n          t = t.replace(/^\\s*=/, \"\");\n\n          try {\n            var i = new v(t, this.settings.decimalCharacter);\n            e = new u().evaluate(i);\n          } catch (e) {\n            return this._triggerEvent(B.events.invalidFormula, this.domElement, {\n              formula: t,\n              aNElement: this\n            }), this.reformat(), void (this.formulaMode = !1);\n          }\n\n          this._triggerEvent(B.events.validFormula, this.domElement, {\n            formula: t,\n            result: e,\n            aNElement: this\n          }), this.set(e), this.formulaMode = !1;\n        }\n      }, {\n        key: \"_acceptNonPrintableKeysInFormulaMode\",\n        value: function value() {\n          return this.eventKey === d.keyName.Backspace || this.eventKey === d.keyName.Delete || this.eventKey === d.keyName.LeftArrow || this.eventKey === d.keyName.RightArrow || this.eventKey === d.keyName.Home || this.eventKey === d.keyName.End;\n        }\n      }, {\n        key: \"_onKeydown\",\n        value: function value(e) {\n          if (this.formatted = !1, this.isEditing = !0, this.formulaMode || this.isFocused || !this.settings.unformatOnHover || !e.altKey || this.domElement !== M.getHoveredElement()) {\n            if (this._updateEventKeyInfo(e), this.keydownEventCounter += 1, 1 === this.keydownEventCounter && (this.initialValueOnFirstKeydown = M.getElementValue(e.target), this.initialRawValueOnFirstKeydown = this.rawValue), this.formulaMode) {\n              if (this.eventKey === d.keyName.Esc) return this.formulaMode = !1, void this.reformat();\n              if (this.eventKey === d.keyName.Enter) return void this._exitFormulaMode();\n              if (this._acceptNonPrintableKeysInFormulaMode()) return;\n            } else if (this.eventKey === d.keyName.Equal) return void this._enterFormulaMode();\n\n            if (this.domElement.readOnly || this.settings.readOnly || this.domElement.disabled) this.processed = !0;else {\n              this.eventKey === d.keyName.Esc && (e.preventDefault(), this.settings.isCancellable && this.rawValue !== this.savedCancellableValue && (this.set(this.savedCancellableValue), this._triggerEvent(B.events[\"native\"].input, e.target)), this.select());\n              var t = M.getElementValue(e.target);\n              if (this.eventKey === d.keyName.Enter && this.rawValue !== this.rawValueOnFocus && (this._triggerEvent(B.events[\"native\"].change, e.target), this.valueOnFocus = t, this.rawValueOnFocus = this.rawValue, this.settings.isCancellable && this._saveCancellableValue()), this._updateInternalProperties(e), this._processNonPrintableKeysAndShortcuts(e)) this.processed = !0;else if (this.eventKey === d.keyName.Backspace || this.eventKey === d.keyName.Delete) {\n                var i = this._processCharacterDeletion();\n\n                if (this.processed = !0, !i) return void e.preventDefault();\n                this._formatValue(e), (t = M.getElementValue(e.target)) !== this.lastVal && this.throwInput && (this._triggerEvent(B.events[\"native\"].input, e.target), e.preventDefault()), this.lastVal = t, this.throwInput = !0;\n              }\n            }\n          } else this.constructor._unformatAltHovered(this);\n        }\n      }, {\n        key: \"_onKeypress\",\n        value: function value(e) {\n          if (this.formulaMode) {\n            if (this._acceptNonPrintableKeysInFormulaMode()) return;\n            if (this.settings.formulaChars.test(this.eventKey)) return;\n            e.preventDefault();\n          } else if (this.eventKey !== d.keyName.Insert) {\n            var t = this.processed;\n            if (this._updateInternalProperties(e), !this._processNonPrintableKeysAndShortcuts(e)) if (t) e.preventDefault();else {\n              if (this._processCharacterInsertion()) {\n                this._formatValue(e);\n\n                var i = M.getElementValue(e.target);\n                if (i !== this.lastVal && this.throwInput) this._triggerEvent(B.events[\"native\"].input, e.target), e.preventDefault();else {\n                  if ((this.eventKey === this.settings.decimalCharacter || this.eventKey === this.settings.decimalCharacterAlternative) && M.getElementSelection(e.target).start === M.getElementSelection(e.target).end && M.getElementSelection(e.target).start === i.indexOf(this.settings.decimalCharacter)) {\n                    var n = M.getElementSelection(e.target).start + 1;\n                    M.setElementSelection(e.target, n);\n                  }\n\n                  e.preventDefault();\n                }\n                return this.lastVal = M.getElementValue(e.target), this.throwInput = !0, void this._setValidOrInvalidState(this.rawValue);\n              }\n\n              e.preventDefault();\n            }\n          }\n        }\n      }, {\n        key: \"_onKeyup\",\n        value: function value(e) {\n          if (this.isEditing = !1, this.keydownEventCounter = 0, !this.formulaMode) if (this.settings.isCancellable && this.eventKey === d.keyName.Esc) e.preventDefault();else {\n            if (this.eventKey === d.keyName.Z || this.eventKey === d.keyName.z) {\n              if (e.ctrlKey && e.shiftKey) return e.preventDefault(), this._historyTableRedo(), void (this.onGoingRedo = !0);\n\n              if (e.ctrlKey && !e.shiftKey) {\n                if (!this.onGoingRedo) return e.preventDefault(), void this._historyTableUndo();\n                this.onGoingRedo = !1;\n              }\n            }\n\n            if (this.onGoingRedo && (e.ctrlKey || e.shiftKey) && (this.onGoingRedo = !1), (e.ctrlKey || e.metaKey) && this.eventKey === d.keyName.x) {\n              var t = M.getElementSelection(this.domElement).start,\n                  i = this.constructor._toNumericValue(M.getElementValue(e.target), this.settings);\n\n              this.set(i), this._setCaretPosition(t);\n            }\n\n            if (this.eventKey === d.keyName.Alt && this.settings.unformatOnHover && this.hoveredWithAlt) this.constructor._reformatAltHovered(this);else if (!e.ctrlKey && !e.metaKey || this.eventKey !== d.keyName.Backspace && this.eventKey !== d.keyName.Delete) {\n              this._updateInternalProperties(e);\n\n              var n = this._processNonPrintableKeysAndShortcuts(e);\n\n              delete this.valuePartsBeforePaste;\n              var a = M.getElementValue(e.target);\n\n              if (!(n || \"\" === a && \"\" === this.initialValueOnFirstKeydown) && (a === this.settings.currencySymbol ? this.settings.currencySymbolPlacement === B.options.currencySymbolPlacement.suffix ? M.setElementSelection(e.target, 0) : M.setElementSelection(e.target, this.settings.currencySymbol.length) : this.eventKey === d.keyName.Tab && M.setElementSelection(e.target, 0, a.length), (a === this.settings.suffixText || \"\" === this.rawValue && \"\" !== this.settings.currencySymbol && \"\" !== this.settings.suffixText) && M.setElementSelection(e.target, 0), null !== this.settings.decimalPlacesShownOnFocus && this._saveValueToPersistentStorage(), this.formatted || this._formatValue(e), this._setValidOrInvalidState(this.rawValue), this._saveRawValueForAndroid(), a !== this.initialValueOnFirstKeydown && this._triggerEvent(B.events.formatted, e.target, {\n                oldValue: this.initialValueOnFirstKeydown,\n                newValue: a,\n                oldRawValue: this.initialRawValueOnFirstKeydown,\n                newRawValue: this.rawValue,\n                isPristine: this.isPristine(!1),\n                error: null,\n                aNElement: this\n              }), 1 < this.historyTable.length)) {\n                var r = M.getElementSelection(this.domElement);\n                this.selectionStart = r.start, this.selectionEnd = r.end, this.historyTable[this.historyTableIndex].start = this.selectionStart, this.historyTable[this.historyTableIndex].end = this.selectionEnd;\n              }\n            } else {\n              var s = M.getElementValue(e.target);\n\n              this._setRawValue(this._formatOrUnformatOther(!1, s));\n            }\n          }\n        }\n      }, {\n        key: \"_saveRawValueForAndroid\",\n        value: function value() {\n          if (this.eventKey === d.keyName.AndroidDefault) {\n            var e = this.constructor._stripAllNonNumberCharactersExceptCustomDecimalChar(this.getFormatted(), this.settings, !0, this.isFocused);\n\n            e = this.constructor._convertToNumericString(e, this.settings), this._setRawValue(e);\n          }\n        }\n      }, {\n        key: \"_onFocusOutAndMouseLeave\",\n        value: function value(e) {\n          if (this.isEditing = !1, \"mouseleave\" !== e.type || !this.formulaMode) if (this.settings.unformatOnHover && \"mouseleave\" === e.type && this.hoveredWithAlt) this.constructor._reformatAltHovered(this);else if (\"mouseleave\" === e.type && !this.isFocused || \"blur\" === e.type) {\n            \"blur\" === e.type && this.formulaMode && this._exitFormulaMode(), this._saveValueToPersistentStorage(), this.settings.showOnlyNumbersOnFocus === B.options.showOnlyNumbersOnFocus.onlyNumbers && (this.settings.digitGroupSeparator = this.originalDigitGroupSeparator, this.settings.currencySymbol = this.originalCurrencySymbol, this.settings.suffixText = this.originalSuffixText);\n\n            var t = this._getRawValueToFormat(this.rawValue),\n                i = M.isNull(t),\n                n = S(this.constructor._checkIfInRangeWithOverrideOption(t, this.settings), 2),\n                a = n[0],\n                r = n[1],\n                s = !1;\n\n            if (\"\" === t || i || (this._triggerRangeEvents(a, r), this.settings.valuesToStrings && this._checkValuesToStrings(t) && (this._setElementValue(this.settings.valuesToStrings[t]), s = !0)), !s) {\n              var o;\n\n              if (o = i || \"\" === t ? t : String(t), \"\" === t || i) {\n                if (\"\" === t) switch (this.settings.emptyInputBehavior) {\n                  case B.options.emptyInputBehavior.zero:\n                    this._setRawValue(\"0\"), o = this.constructor._roundValue(\"0\", this.settings, 0);\n                    break;\n\n                  case B.options.emptyInputBehavior.min:\n                    this._setRawValue(this.settings.minimumValue), o = this.constructor._roundFormattedValueShownOnFocusOrBlur(this.settings.minimumValue, this.settings, this.isFocused);\n                    break;\n\n                  case B.options.emptyInputBehavior.max:\n                    this._setRawValue(this.settings.maximumValue), o = this.constructor._roundFormattedValueShownOnFocusOrBlur(this.settings.maximumValue, this.settings, this.isFocused);\n                    break;\n\n                  default:\n                    M.isNumber(this.settings.emptyInputBehavior) && (this._setRawValue(this.settings.emptyInputBehavior), o = this.constructor._roundFormattedValueShownOnFocusOrBlur(this.settings.emptyInputBehavior, this.settings, this.isFocused));\n                }\n              } else a && r && !this.constructor._isElementValueEmptyOrOnlyTheNegativeSign(t, this.settings) ? (o = this._modifyNegativeSignAndDecimalCharacterForRawValue(o), this.settings.divisorWhenUnfocused && !M.isNull(o) && (o = (o /= this.settings.divisorWhenUnfocused).toString()), o = this.constructor._roundFormattedValueShownOnBlur(o, this.settings), o = this.constructor._modifyNegativeSignAndDecimalCharacterForFormattedValue(o, this.settings)) : this._triggerRangeEvents(a, r);\n\n              var l = this.constructor._orderValueCurrencySymbolAndSuffixText(o, this.settings, !1);\n\n              this.constructor._isElementValueEmptyOrOnlyTheNegativeSign(o, this.settings) || i && this.settings.emptyInputBehavior === B.options.emptyInputBehavior[\"null\"] || (l = this.constructor._addGroupSeparators(o, this.settings, !1, t)), l === t && \"\" !== t && this.settings.allowDecimalPadding !== B.options.allowDecimalPadding.never && this.settings.allowDecimalPadding !== B.options.allowDecimalPadding.floats || (this.settings.symbolWhenUnfocused && \"\" !== t && null !== t && (l = \"\".concat(l).concat(this.settings.symbolWhenUnfocused)), this._setElementValue(l));\n            }\n\n            this._setValidOrInvalidState(this.rawValue), \"blur\" === e.type && this._onBlur(e);\n          }\n        }\n      }, {\n        key: \"_onPaste\",\n        value: function value(e) {\n          if (e.preventDefault(), !(this.settings.readOnly || this.domElement.readOnly || this.domElement.disabled)) {\n            var t, i;\n            window.clipboardData && window.clipboardData.getData ? t = window.clipboardData.getData(\"Text\") : e.clipboardData && e.clipboardData.getData ? t = e.clipboardData.getData(\"text/plain\") : M.throwError(\"Unable to retrieve the pasted value. Please use a modern browser (ie. Firefox or Chromium).\"), i = e.target.tagName ? e.target : e.explicitOriginalTarget;\n            var n = M.getElementValue(i),\n                a = i.selectionStart || 0,\n                r = i.selectionEnd || 0,\n                s = r - a;\n\n            if (s === n.length) {\n              var o = this._preparePastedText(t),\n                  l = M.arabicToLatinNumbers(o, !1, !1, !1);\n\n              return \".\" === l || \"\" === l || \".\" !== l && !M.isNumber(l) ? (this.formatted = !0, void (this.settings.onInvalidPaste === B.options.onInvalidPaste.error && M.throwError(\"The pasted value '\".concat(t, \"' is not a valid paste content.\")))) : (this.set(l), this.formatted = !0, void this._triggerEvent(B.events[\"native\"].input, i));\n            }\n\n            var u = M.isNegativeStrict(t, this.settings.negativeSignCharacter);\n            u && (t = t.slice(1, t.length));\n\n            var c,\n                h,\n                m = this._preparePastedText(t);\n\n            if (\".\" !== (c = \".\" === m ? \".\" : M.arabicToLatinNumbers(m, !1, !1, !1)) && (!M.isNumber(c) || \"\" === c)) return this.formatted = !0, void (this.settings.onInvalidPaste === B.options.onInvalidPaste.error && M.throwError(\"The pasted value '\".concat(t, \"' is not a valid paste content.\")));\n            var g,\n                d,\n                v = M.isNegativeStrict(this.getNumericString(), this.settings.negativeSignCharacter);\n            g = !(!u || v) && (v = !0);\n            var p = n.slice(0, a),\n                f = n.slice(r, n.length);\n            d = a !== r ? this._preparePastedText(p + f) : this._preparePastedText(n), v && (d = M.setRawNegativeSign(d)), h = M.convertCharacterCountToIndexPosition(M.countNumberCharactersOnTheCaretLeftSide(n, a, this.settings.decimalCharacter)), g && h++;\n            var y = d.slice(0, h),\n                S = d.slice(h, d.length),\n                b = !1;\n            \".\" === c && (M.contains(y, \".\") && (b = !0, y = y.replace(\".\", \"\")), S = S.replace(\".\", \"\"));\n            var w = !1;\n\n            switch (\"\" === y && \"-\" === S && (y = \"-\", w = !(S = \"\")), this.settings.onInvalidPaste) {\n              case B.options.onInvalidPaste.truncate:\n              case B.options.onInvalidPaste.replace:\n                for (var P = M.parseStr(this.settings.minimumValue), O = M.parseStr(this.settings.maximumValue), k = d, N = 0, E = y; N < c.length && (d = (E += c[N]) + S, this.constructor._checkIfInRange(d, P, O));) {\n                  k = d, N++;\n                }\n\n                if (h += N, w && h++, this.settings.onInvalidPaste === B.options.onInvalidPaste.truncate) {\n                  d = k, b && h--;\n                  break;\n                }\n\n                for (var _ = h, C = k.length; N < c.length && _ < C;) {\n                  if (\".\" !== k[_]) {\n                    if (d = M.replaceCharAt(k, _, c[N]), !this.constructor._checkIfInRange(d, P, O)) break;\n                    k = d, N++, _++;\n                  } else _++;\n                }\n\n                h = _, b && h--, d = k;\n                break;\n\n              case B.options.onInvalidPaste.error:\n              case B.options.onInvalidPaste.ignore:\n              case B.options.onInvalidPaste.clamp:\n              default:\n                if (d = \"\".concat(y).concat(c).concat(S), a === r) h = M.convertCharacterCountToIndexPosition(M.countNumberCharactersOnTheCaretLeftSide(n, a, this.settings.decimalCharacter)) + c.length;else if (\"\" === S) h = M.convertCharacterCountToIndexPosition(M.countNumberCharactersOnTheCaretLeftSide(n, a, this.settings.decimalCharacter)) + c.length, w && h++;else {\n                  var F = M.convertCharacterCountToIndexPosition(M.countNumberCharactersOnTheCaretLeftSide(n, r, this.settings.decimalCharacter)),\n                      x = M.getElementValue(i).slice(a, r);\n                  h = F - s + M.countCharInText(this.settings.digitGroupSeparator, x) + c.length;\n                }\n                g && h++, b && h--;\n            }\n\n            if (M.isNumber(d) && \"\" !== d) {\n              var V = !1,\n                  T = !1;\n\n              try {\n                this.set(d), V = !0;\n              } catch (e) {\n                var A;\n\n                switch (this.settings.onInvalidPaste) {\n                  case B.options.onInvalidPaste.clamp:\n                    A = M.clampToRangeLimits(d, this.settings);\n\n                    try {\n                      this.set(A);\n                    } catch (e) {\n                      M.throwError(\"Fatal error: Unable to set the clamped value '\".concat(A, \"'.\"));\n                    }\n\n                    V = T = !0, d = A;\n                    break;\n\n                  case B.options.onInvalidPaste.error:\n                  case B.options.onInvalidPaste.truncate:\n                  case B.options.onInvalidPaste.replace:\n                    M.throwError(\"The pasted value '\".concat(t, \"' results in a value '\").concat(d, \"' that is outside of the minimum [\").concat(this.settings.minimumValue, \"] and maximum [\").concat(this.settings.maximumValue, \"] value range.\"));\n\n                  case B.options.onInvalidPaste.ignore:\n                  default:\n                    return;\n                }\n              }\n\n              var L,\n                  I = M.getElementValue(i);\n              if (V) switch (this.settings.onInvalidPaste) {\n                case B.options.onInvalidPaste.clamp:\n                  if (T) {\n                    this.settings.currencySymbolPlacement === B.options.currencySymbolPlacement.suffix ? M.setElementSelection(i, I.length - this.settings.currencySymbol.length) : M.setElementSelection(i, I.length);\n                    break;\n                  }\n\n                case B.options.onInvalidPaste.error:\n                case B.options.onInvalidPaste.ignore:\n                case B.options.onInvalidPaste.truncate:\n                case B.options.onInvalidPaste.replace:\n                default:\n                  L = M.findCaretPositionInFormattedNumber(d, h, I, this.settings.decimalCharacter), M.setElementSelection(i, L);\n              }\n              V && n !== I && this._triggerEvent(B.events[\"native\"].input, i);\n            } else this.settings.onInvalidPaste === B.options.onInvalidPaste.error && M.throwError(\"The pasted value '\".concat(t, \"' would result into an invalid content '\").concat(d, \"'.\"));\n          }\n        }\n      }, {\n        key: \"_onBlur\",\n        value: function value(e) {\n          this.isFocused = !1, this.isEditing = !1, this.rawValue !== this.rawValueOnFocus && this._triggerEvent(B.events[\"native\"].change, e.target), this.rawValueOnFocus = void 0;\n        }\n      }, {\n        key: \"_onWheel\",\n        value: function value(e) {\n          this.formulaMode || this.settings.readOnly || this.domElement.readOnly || this.domElement.disabled || this.settings.modifyValueOnWheel && (this.settings.wheelOn === B.options.wheelOn.focus ? this.isFocused ? e.shiftKey || this.wheelAction(e) : e.shiftKey && this.wheelAction(e) : this.settings.wheelOn === B.options.wheelOn.hover ? e.shiftKey ? (e.preventDefault(), window.scrollBy(0, M.isNegativeStrict(String(e.deltaY)) ? -50 : 50)) : this.wheelAction(e) : M.throwError(\"Unknown `wheelOn` option.\"));\n        }\n      }, {\n        key: \"wheelAction\",\n        value: function value(e) {\n          this.isWheelEvent = !0;\n          var t,\n              i = e.target.selectionStart || 0,\n              n = e.target.selectionEnd || 0,\n              a = this.rawValue;\n\n          if (M.isUndefinedOrNullOrEmpty(a) ? 0 < this.settings.minimumValue || this.settings.maximumValue < 0 ? M.isWheelUpEvent(e) ? t = this.settings.minimumValue : M.isWheelDownEvent(e) ? t = this.settings.maximumValue : M.throwError(\"The event is not a 'wheel' event.\") : t = 0 : t = a, t = +t, M.isNumber(this.settings.wheelStep)) {\n            var r = +this.settings.wheelStep;\n            M.isWheelUpEvent(e) ? t += r : M.isWheelDownEvent(e) && (t -= r);\n          } else M.isWheelUpEvent(e) ? t = M.addAndRoundToNearestAuto(t, this.settings.decimalPlacesRawValue) : M.isWheelDownEvent(e) && (t = M.subtractAndRoundToNearestAuto(t, this.settings.decimalPlacesRawValue));\n\n          (t = M.clampToRangeLimits(t, this.settings)) !== +a && (this.set(t), this._triggerEvent(B.events[\"native\"].input, e.target)), e.preventDefault(), this._setSelection(i, n), this.isWheelEvent = !1;\n        }\n      }, {\n        key: \"_onDrop\",\n        value: function value(e) {\n          if (!this.formulaMode) {\n            var t;\n            this.isDropEvent = !0, e.preventDefault(), t = M.isIE11() ? \"text\" : \"text/plain\";\n            var i = e.dataTransfer.getData(t),\n                n = this.unformatOther(i);\n            this.set(n), this.isDropEvent = !1;\n          }\n        }\n      }, {\n        key: \"_onFormSubmit\",\n        value: function value() {\n          var t = this;\n          return this._getFormAutoNumericChildren(this.parentForm).map(function (e) {\n            return t.constructor.getAutoNumericElement(e);\n          }).forEach(function (e) {\n            return e._unformatOnSubmit();\n          }), !0;\n        }\n      }, {\n        key: \"_onFormReset\",\n        value: function value() {\n          var i = this;\n\n          this._getFormAutoNumericChildren(this.parentForm).map(function (e) {\n            return i.constructor.getAutoNumericElement(e);\n          }).forEach(function (e) {\n            var t = i._getDefaultValue(e.node());\n\n            setTimeout(function () {\n              return e.set(t);\n            }, 0);\n          });\n        }\n      }, {\n        key: \"_unformatOnSubmit\",\n        value: function value() {\n          this.settings.unformatOnSubmit && this._setElementValue(this.rawValue);\n        }\n      }, {\n        key: \"_onKeydownGlobal\",\n        value: function value(e) {\n          if (M.character(e) === d.keyName.Alt) {\n            var t = M.getHoveredElement();\n\n            if (B.isManagedByAutoNumeric(t)) {\n              var i = B.getAutoNumericElement(t);\n              !i.formulaMode && i.settings.unformatOnHover && this.constructor._unformatAltHovered(i);\n            }\n          }\n        }\n      }, {\n        key: \"_onKeyupGlobal\",\n        value: function value(e) {\n          if (M.character(e) === d.keyName.Alt) {\n            var t = M.getHoveredElement();\n\n            if (B.isManagedByAutoNumeric(t)) {\n              var i = B.getAutoNumericElement(t);\n              if (i.formulaMode || !i.settings.unformatOnHover) return;\n\n              this.constructor._reformatAltHovered(i);\n            }\n          }\n        }\n      }, {\n        key: \"_isElementTagSupported\",\n        value: function value() {\n          return M.isElement(this.domElement) || M.throwError(\"The DOM element is not valid, \".concat(this.domElement, \" given.\")), M.isInArray(this.domElement.tagName.toLowerCase(), this.allowedTagList);\n        }\n      }, {\n        key: \"_isInputElement\",\n        value: function value() {\n          return \"input\" === this.domElement.tagName.toLowerCase();\n        }\n      }, {\n        key: \"_isInputTypeSupported\",\n        value: function value() {\n          return \"text\" === this.domElement.type || \"hidden\" === this.domElement.type || \"tel\" === this.domElement.type || M.isUndefinedOrNullOrEmpty(this.domElement.type);\n        }\n      }, {\n        key: \"_checkElement\",\n        value: function value() {\n          var e = this.domElement.tagName.toLowerCase();\n          this._isElementTagSupported() || M.throwError(\"The <\".concat(e, \"> tag is not supported by autoNumeric\")), this._isInputElement() ? (this._isInputTypeSupported() || M.throwError('The input type \"'.concat(this.domElement.type, '\" is not supported by autoNumeric')), this.isInputElement = !0) : (this.isInputElement = !1, this.isContentEditable = this.domElement.hasAttribute(\"contenteditable\") && \"true\" === this.domElement.getAttribute(\"contenteditable\"));\n        }\n      }, {\n        key: \"_formatDefaultValueOnPageLoad\",\n        value: function value(e) {\n          var t,\n              i = 0 < arguments.length && void 0 !== e ? e : null,\n              n = !0;\n\n          if (M.isNull(i) ? (t = M.getElementValue(this.domElement).trim(), this.domElement.setAttribute(\"value\", t)) : t = i, this.isInputElement || this.isContentEditable) {\n            var a = this.constructor._toNumericValue(t, this.settings);\n\n            if (this.domElement.hasAttribute(\"value\") && \"\" !== this.domElement.getAttribute(\"value\")) {\n              if (null !== this.settings.defaultValueOverride && this.settings.defaultValueOverride.toString() !== t || null === this.settings.defaultValueOverride && \"\" !== t && t !== this.domElement.getAttribute(\"value\") || \"\" !== t && \"hidden\" === this.domElement.getAttribute(\"type\") && !M.isNumber(a)) {\n                if (this.settings.saveValueToSessionStorage && (null !== this.settings.decimalPlacesShownOnFocus || this.settings.divisorWhenUnfocused) && this._setRawValue(this._getValueFromPersistentStorage()), !this.settings.saveValueToSessionStorage) {\n                  var r = this.constructor._removeBrackets(t, this.settings);\n\n                  (this.settings.negativePositiveSignPlacement === B.options.negativePositiveSignPlacement.suffix || this.settings.negativePositiveSignPlacement !== B.options.negativePositiveSignPlacement.prefix && this.settings.currencySymbolPlacement === B.options.currencySymbolPlacement.suffix) && \"\" !== this.settings.negativeSignCharacter && M.isNegative(t, this.settings.negativeSignCharacter) ? this._setRawValue(\"-\".concat(this.constructor._stripAllNonNumberCharacters(r, this.settings, !0, this.isFocused))) : this._setRawValue(this.constructor._stripAllNonNumberCharacters(r, this.settings, !0, this.isFocused));\n                }\n\n                n = !1;\n              }\n            } else isNaN(Number(a)) || 1 / 0 === a ? M.throwError(\"The value [\".concat(t, \"] used in the input is not a valid value autoNumeric can work with.\")) : (this.set(a), n = !1);\n\n            if (\"\" === t) switch (this.settings.emptyInputBehavior) {\n              case B.options.emptyInputBehavior.focus:\n              case B.options.emptyInputBehavior[\"null\"]:\n              case B.options.emptyInputBehavior.press:\n                break;\n\n              case B.options.emptyInputBehavior.always:\n                this._setElementValue(this.settings.currencySymbol);\n\n                break;\n\n              case B.options.emptyInputBehavior.min:\n                this.set(this.settings.minimumValue);\n                break;\n\n              case B.options.emptyInputBehavior.max:\n                this.set(this.settings.maximumValue);\n                break;\n\n              case B.options.emptyInputBehavior.zero:\n                this.set(\"0\");\n                break;\n\n              default:\n                this.set(this.settings.emptyInputBehavior);\n            } else n && t === this.domElement.getAttribute(\"value\") && this.set(t);\n          } else null !== this.settings.defaultValueOverride && this.settings.defaultValueOverride !== t || this.set(t);\n        }\n      }, {\n        key: \"_calculateVMinAndVMaxIntegerSizes\",\n        value: function value() {\n          var e = S(this.settings.maximumValue.toString().split(\".\"), 1)[0],\n              t = S(this.settings.minimumValue || 0 === this.settings.minimumValue ? this.settings.minimumValue.toString().split(\".\") : [], 1)[0];\n          e = e.replace(this.settings.negativeSignCharacter, \"\"), t = t.replace(this.settings.negativeSignCharacter, \"\"), this.settings.mIntPos = Math.max(e.length, 1), this.settings.mIntNeg = Math.max(t.length, 1);\n        }\n      }, {\n        key: \"_calculateValuesToStringsKeys\",\n        value: function value() {\n          this.settings.valuesToStrings ? this.valuesToStringsKeys = Object.keys(this.settings.valuesToStrings) : this.valuesToStringsKeys = [];\n        }\n      }, {\n        key: \"_transformOptionsValuesToDefaultTypes\",\n        value: function value() {\n          for (var e in this.settings) {\n            if (Object.prototype.hasOwnProperty.call(this.settings, e)) {\n              var t = this.settings[e];\n              \"true\" !== t && \"false\" !== t || (this.settings[e] = \"true\" === t), \"number\" == typeof t && (this.settings[e] = t.toString());\n            }\n          }\n        }\n      }, {\n        key: \"_setSettings\",\n        value: function value(e, t) {\n          var i = 1 < arguments.length && void 0 !== t && t;\n          !i && M.isNull(e) || this.constructor._convertOldOptionsToNewOnes(e), i ? (\"decimalPlacesRawValue\" in e && (this.settings.originalDecimalPlacesRawValue = e.decimalPlacesRawValue), \"decimalPlaces\" in e && (this.settings.originalDecimalPlaces = e.decimalPlaces), this.constructor._calculateDecimalPlacesOnUpdate(e, this.settings), this._mergeSettings(e)) : (this.settings = {}, this._mergeSettings(this.constructor.getDefaultConfig(), this.domElement.dataset, e, {\n            rawValue: this.defaultRawValue\n          }), this.caretFix = !1, this.throwInput = !0, this.allowedTagList = d.allowedTagList, this.runOnce = !1, this.hoveredWithAlt = !1), this._transformOptionsValuesToDefaultTypes(), this._runCallbacksFoundInTheSettingsObject(), this.constructor._correctNegativePositiveSignPlacementOption(this.settings), this.constructor._correctCaretPositionOnFocusAndSelectOnFocusOptions(this.settings), this.constructor._setNegativePositiveSignPermissions(this.settings), i || (M.isNull(e) || !e.decimalPlaces ? this.settings.originalDecimalPlaces = null : this.settings.originalDecimalPlaces = e.decimalPlaces, this.settings.originalDecimalPlacesRawValue = this.settings.decimalPlacesRawValue, this.constructor._calculateDecimalPlacesOnInit(this.settings)), this._calculateVMinAndVMaxIntegerSizes(), this._setTrailingNegativeSignInfo(), this.regex = {}, this.constructor._cachesUsualRegularExpressions(this.settings, this.regex), this.constructor._setBrackets(this.settings), this._calculateValuesToStringsKeys(), M.isEmptyObj(this.settings) && M.throwError(\"Unable to set the settings, those are invalid ; an empty object was given.\"), this.constructor.validate(this.settings, !1, e), this._keepAnOriginalSettingsCopy();\n        }\n      }, {\n        key: \"_preparePastedText\",\n        value: function value(e) {\n          return this.constructor._stripAllNonNumberCharacters(e, this.settings, !0, this.isFocused);\n        }\n      }, {\n        key: \"_updateInternalProperties\",\n        value: function value() {\n          this.selection = M.getElementSelection(this.domElement), this.processed = !1;\n        }\n      }, {\n        key: \"_updateEventKeyInfo\",\n        value: function value(e) {\n          this.eventKey = M.character(e);\n        }\n      }, {\n        key: \"_saveCancellableValue\",\n        value: function value() {\n          this.savedCancellableValue = this.rawValue;\n        }\n      }, {\n        key: \"_setSelection\",\n        value: function value(e, t) {\n          e = Math.max(e, 0), t = Math.min(t, M.getElementValue(this.domElement).length), this.selection = {\n            start: e,\n            end: t,\n            length: t - e\n          }, M.setElementSelection(this.domElement, e, t);\n        }\n      }, {\n        key: \"_setCaretPosition\",\n        value: function value(e) {\n          this._setSelection(e, e);\n        }\n      }, {\n        key: \"_getLeftAndRightPartAroundTheSelection\",\n        value: function value() {\n          var e = M.getElementValue(this.domElement);\n          return [e.substring(0, this.selection.start), e.substring(this.selection.end, e.length)];\n        }\n      }, {\n        key: \"_getUnformattedLeftAndRightPartAroundTheSelection\",\n        value: function value() {\n          var e = S(this._getLeftAndRightPartAroundTheSelection(), 2),\n              t = e[0],\n              i = e[1];\n          if (\"\" === t && \"\" === i) return [\"\", \"\"];\n          var n = !0;\n          return this.eventKey !== d.keyName.Hyphen && this.eventKey !== d.keyName.Minus || 0 !== Number(t) || (n = !1), this.isTrailingNegative && (M.isNegative(i, this.settings.negativeSignCharacter) && !M.isNegative(t, this.settings.negativeSignCharacter) || \"\" === i && M.isNegative(t, this.settings.negativeSignCharacter, !0)) && (t = t.replace(this.settings.negativeSignCharacter, \"\"), i = i.replace(this.settings.negativeSignCharacter, \"\"), t = t.replace(\"-\", \"\"), i = i.replace(\"-\", \"\"), t = \"-\".concat(t)), [t = B._stripAllNonNumberCharactersExceptCustomDecimalChar(t, this.settings, n, this.isFocused), i = B._stripAllNonNumberCharactersExceptCustomDecimalChar(i, this.settings, !1, this.isFocused)];\n        }\n      }, {\n        key: \"_normalizeParts\",\n        value: function value(e, t) {\n          var i = !0;\n          this.eventKey !== d.keyName.Hyphen && this.eventKey !== d.keyName.Minus || 0 !== Number(e) || (i = !1), this.isTrailingNegative && M.isNegative(t, this.settings.negativeSignCharacter) && !M.isNegative(e, this.settings.negativeSignCharacter) && (e = \"-\".concat(e), t = t.replace(this.settings.negativeSignCharacter, \"\")), e = B._stripAllNonNumberCharactersExceptCustomDecimalChar(e, this.settings, i, this.isFocused), t = B._stripAllNonNumberCharactersExceptCustomDecimalChar(t, this.settings, !1, this.isFocused), this.settings.leadingZero !== B.options.leadingZero.deny || this.eventKey !== d.keyName.num0 && this.eventKey !== d.keyName.numpad0 || 0 !== Number(e) || M.contains(e, this.settings.decimalCharacter) || \"\" === t || (e = e.substring(0, e.length - 1));\n          var n = e + t;\n\n          if (this.settings.decimalCharacter) {\n            var a = n.match(new RegExp(\"^\".concat(this.regex.aNegRegAutoStrip, \"\\\\\").concat(this.settings.decimalCharacter)));\n            a && (n = (e = e.replace(a[1], a[1] + \"0\")) + t);\n          }\n\n          return [e, t, n];\n        }\n      }, {\n        key: \"_setValueParts\",\n        value: function value(e, t, i) {\n          var n = 2 < arguments.length && void 0 !== i && i,\n              a = S(this._normalizeParts(e, t), 3),\n              r = a[0],\n              s = a[1],\n              o = a[2],\n              l = S(B._checkIfInRangeWithOverrideOption(o, this.settings), 2),\n              u = l[0],\n              c = l[1];\n\n          if (u && c) {\n            var h = B._truncateDecimalPlaces(o, this.settings, n, this.settings.decimalPlacesRawValue).replace(this.settings.decimalCharacter, \".\");\n\n            if (\"\" === h || h === this.settings.negativeSignCharacter) {\n              var m;\n\n              switch (this.settings.emptyInputBehavior) {\n                case B.options.emptyInputBehavior.focus:\n                case B.options.emptyInputBehavior.press:\n                case B.options.emptyInputBehavior.always:\n                  m = \"\";\n                  break;\n\n                case B.options.emptyInputBehavior.min:\n                  m = this.settings.minimumValue;\n                  break;\n\n                case B.options.emptyInputBehavior.max:\n                  m = this.settings.maximumValue;\n                  break;\n\n                case B.options.emptyInputBehavior.zero:\n                  m = \"0\";\n                  break;\n\n                case B.options.emptyInputBehavior[\"null\"]:\n                  m = null;\n                  break;\n\n                default:\n                  m = this.settings.emptyInputBehavior;\n              }\n\n              this._setRawValue(m);\n            } else this._setRawValue(this._trimLeadingAndTrailingZeros(h));\n\n            var g = B._truncateDecimalPlaces(o, this.settings, n, this.settings.decimalPlacesShownOnFocus),\n                d = r.length;\n\n            return d > g.length && (d = g.length), 1 === d && \"0\" === r && this.settings.leadingZero === B.options.leadingZero.deny && (d = \"\" === s || \"0\" === r && \"\" !== s ? 1 : 0), this._setElementValue(g, !1), this._setCaretPosition(d), !0;\n          }\n\n          return this._triggerRangeEvents(u, c), !1;\n        }\n      }, {\n        key: \"_getSignPosition\",\n        value: function value() {\n          var e;\n\n          if (this.settings.currencySymbol) {\n            var t = this.settings.currencySymbol.length,\n                i = M.getElementValue(this.domElement);\n            if (this.settings.currencySymbolPlacement === B.options.currencySymbolPlacement.prefix) e = this.settings.negativeSignCharacter && i && i.charAt(0) === this.settings.negativeSignCharacter ? [1, t + 1] : [0, t];else {\n              var n = i.length;\n              e = [n - t, n];\n            }\n          } else e = [1e3, -1];\n\n          return e;\n        }\n      }, {\n        key: \"_expandSelectionOnSign\",\n        value: function value() {\n          var e = S(this._getSignPosition(), 2),\n              t = e[0],\n              i = e[1],\n              n = this.selection;\n          n.start < i && n.end > t && ((n.start < t || n.end > i) && M.getElementValue(this.domElement).substring(Math.max(n.start, t), Math.min(n.end, i)).match(/^\\s*$/) ? n.start < t ? this._setSelection(n.start, t) : this._setSelection(i, n.end) : this._setSelection(Math.min(n.start, t), Math.max(n.end, i)));\n        }\n      }, {\n        key: \"_checkPaste\",\n        value: function value() {\n          if (!this.formatted && !M.isUndefined(this.valuePartsBeforePaste)) {\n            var e = this.valuePartsBeforePaste,\n                t = S(this._getLeftAndRightPartAroundTheSelection(), 2),\n                i = t[0],\n                n = t[1];\n            delete this.valuePartsBeforePaste;\n\n            var a = i.substr(0, e[0].length) + B._stripAllNonNumberCharactersExceptCustomDecimalChar(i.substr(e[0].length), this.settings, !0, this.isFocused);\n\n            this._setValueParts(a, n, !0) || (this._setElementValue(e.join(\"\"), !1), this._setCaretPosition(e[0].length));\n          }\n        }\n      }, {\n        key: \"_processNonPrintableKeysAndShortcuts\",\n        value: function value(e) {\n          if ((e.ctrlKey || e.metaKey) && \"keyup\" === e.type && !M.isUndefined(this.valuePartsBeforePaste) || e.shiftKey && this.eventKey === d.keyName.Insert) return this._checkPaste(), !1;\n          if (this.constructor._shouldSkipEventKey(this.eventKey)) return !0;\n          if ((e.ctrlKey || e.metaKey) && this.eventKey === d.keyName.a) return this.settings.selectNumberOnly && (e.preventDefault(), this.selectNumber()), !0;\n          if ((e.ctrlKey || e.metaKey) && (this.eventKey === d.keyName.c || this.eventKey === d.keyName.v || this.eventKey === d.keyName.x)) return \"keydown\" === e.type && this._expandSelectionOnSign(), this.eventKey !== d.keyName.v && this.eventKey !== d.keyName.Insert || (\"keydown\" === e.type || \"keypress\" === e.type ? M.isUndefined(this.valuePartsBeforePaste) && (this.valuePartsBeforePaste = this._getLeftAndRightPartAroundTheSelection()) : this._checkPaste()), \"keydown\" === e.type || \"keypress\" === e.type || this.eventKey === d.keyName.c;\n          if (e.ctrlKey || e.metaKey) return !(this.eventKey === d.keyName.Z || this.eventKey === d.keyName.z);\n          if (this.eventKey !== d.keyName.LeftArrow && this.eventKey !== d.keyName.RightArrow) return M.isInArray(this.eventKey, d.keyName._directionKeys);\n\n          if (\"keydown\" === e.type && !e.shiftKey) {\n            var t = M.getElementValue(this.domElement);\n            this.eventKey !== d.keyName.LeftArrow || t.charAt(this.selection.start - 2) !== this.settings.digitGroupSeparator && t.charAt(this.selection.start - 2) !== this.settings.decimalCharacter ? this.eventKey !== d.keyName.RightArrow || t.charAt(this.selection.start + 1) !== this.settings.digitGroupSeparator && t.charAt(this.selection.start + 1) !== this.settings.decimalCharacter || this._setCaretPosition(this.selection.start + 1) : this._setCaretPosition(this.selection.start - 1);\n          }\n\n          return !0;\n        }\n      }, {\n        key: \"_processCharacterDeletionIfTrailingNegativeSign\",\n        value: function value(e) {\n          var t = S(e, 2),\n              i = t[0],\n              n = t[1],\n              a = M.getElementValue(this.domElement),\n              r = M.isNegative(a, this.settings.negativeSignCharacter);\n          if (this.settings.currencySymbolPlacement === B.options.currencySymbolPlacement.prefix && this.settings.negativePositiveSignPlacement === B.options.negativePositiveSignPlacement.suffix && (this.eventKey === d.keyName.Backspace ? (this.caretFix = this.selection.start >= a.indexOf(this.settings.suffixText) && \"\" !== this.settings.suffixText, \"-\" === a.charAt(this.selection.start - 1) ? i = i.substring(1) : this.selection.start <= a.length - this.settings.suffixText.length && (i = i.substring(0, i.length - 1))) : (this.caretFix = this.selection.start >= a.indexOf(this.settings.suffixText) && \"\" !== this.settings.suffixText, this.selection.start >= a.indexOf(this.settings.currencySymbol) + this.settings.currencySymbol.length && (n = n.substring(1, n.length)), M.isNegative(i, this.settings.negativeSignCharacter) && \"-\" === a.charAt(this.selection.start) && (i = i.substring(1)))), this.settings.currencySymbolPlacement === B.options.currencySymbolPlacement.suffix) switch (this.settings.negativePositiveSignPlacement) {\n            case B.options.negativePositiveSignPlacement.left:\n              this.caretFix = this.selection.start >= a.indexOf(this.settings.negativeSignCharacter) + this.settings.negativeSignCharacter.length, this.eventKey === d.keyName.Backspace ? this.selection.start === a.indexOf(this.settings.negativeSignCharacter) + this.settings.negativeSignCharacter.length && r ? i = i.substring(1) : \"-\" !== i && (this.selection.start <= a.indexOf(this.settings.negativeSignCharacter) || !r) && (i = i.substring(0, i.length - 1)) : (\"-\" === i[0] && (n = n.substring(1)), this.selection.start === a.indexOf(this.settings.negativeSignCharacter) && r && (i = i.substring(1)));\n              break;\n\n            case B.options.negativePositiveSignPlacement.right:\n              this.caretFix = this.selection.start >= a.indexOf(this.settings.negativeSignCharacter) + this.settings.negativeSignCharacter.length, this.eventKey === d.keyName.Backspace ? this.selection.start === a.indexOf(this.settings.negativeSignCharacter) + this.settings.negativeSignCharacter.length ? i = i.substring(1) : (\"-\" !== i && this.selection.start <= a.indexOf(this.settings.negativeSignCharacter) - this.settings.currencySymbol.length || \"\" !== i && !r) && (i = i.substring(0, i.length - 1)) : (this.caretFix = this.selection.start >= a.indexOf(this.settings.currencySymbol) && \"\" !== this.settings.currencySymbol, this.selection.start === a.indexOf(this.settings.negativeSignCharacter) && (i = i.substring(1)), n = n.substring(1));\n          }\n          return [i, n];\n        }\n      }, {\n        key: \"_processCharacterDeletion\",\n        value: function value() {\n          var e, t;\n\n          if (this.selection.length) {\n            this._expandSelectionOnSign();\n\n            var i = S(this._getUnformattedLeftAndRightPartAroundTheSelection(), 2);\n            e = i[0], t = i[1];\n          } else {\n            var n = S(this._getUnformattedLeftAndRightPartAroundTheSelection(), 2);\n\n            if (e = n[0], t = n[1], \"\" === e && \"\" === t && (this.throwInput = !1), this.isTrailingNegative && M.isNegative(M.getElementValue(this.domElement), this.settings.negativeSignCharacter)) {\n              var a = S(this._processCharacterDeletionIfTrailingNegativeSign([e, t]), 2);\n              e = a[0], t = a[1];\n            } else this.eventKey === d.keyName.Backspace ? e = e.substring(0, e.length - 1) : t = t.substring(1, t.length);\n          }\n\n          return !!this.constructor._isWithinRangeWithOverrideOption(\"\".concat(e).concat(t), this.settings) && (this._setValueParts(e, t), !0);\n        }\n      }, {\n        key: \"_isDecimalCharacterInsertionAllowed\",\n        value: function value() {\n          return String(this.settings.decimalPlacesShownOnFocus) !== String(B.options.decimalPlacesShownOnFocus.none) && String(this.settings.decimalPlaces) !== String(B.options.decimalPlaces.none);\n        }\n      }, {\n        key: \"_processCharacterInsertion\",\n        value: function value() {\n          var e = S(this._getUnformattedLeftAndRightPartAroundTheSelection(), 2),\n              t = e[0],\n              i = e[1];\n\n          if (this.eventKey !== d.keyName.AndroidDefault && (this.throwInput = !0), this.eventKey === this.settings.decimalCharacter || this.settings.decimalCharacterAlternative && this.eventKey === this.settings.decimalCharacterAlternative) {\n            if (!this._isDecimalCharacterInsertionAllowed() || !this.settings.decimalCharacter) return !1;\n            if (this.settings.alwaysAllowDecimalCharacter) t = t.replace(this.settings.decimalCharacter, \"\"), i = i.replace(this.settings.decimalCharacter, \"\");else {\n              if (M.contains(t, this.settings.decimalCharacter)) return !0;\n              if (0 < i.indexOf(this.settings.decimalCharacter)) return !0;\n              0 === i.indexOf(this.settings.decimalCharacter) && (i = i.substr(1));\n            }\n            return this.settings.negativeSignCharacter && M.contains(i, this.settings.negativeSignCharacter) && (t = \"\".concat(this.settings.negativeSignCharacter).concat(t), i = i.replace(this.settings.negativeSignCharacter, \"\")), this._setValueParts(t + this.settings.decimalCharacter, i), !0;\n          }\n\n          if ((\"-\" === this.eventKey || \"+\" === this.eventKey) && this.settings.isNegativeSignAllowed) return \"\" === t && M.contains(i, \"-\") ? i = i.replace(\"-\", \"\") : t = M.isNegativeStrict(t, \"-\") ? t.replace(\"-\", \"\") : \"\".concat(this.settings.negativeSignCharacter).concat(t), this._setValueParts(t, i), !0;\n          var n = Number(this.eventKey);\n          return 0 <= n && n <= 9 ? (this.settings.isNegativeSignAllowed && \"\" === t && M.contains(i, \"-\") && (t = \"-\", i = i.substring(1, i.length)), this.settings.maximumValue <= 0 && this.settings.minimumValue < this.settings.maximumValue && !M.contains(M.getElementValue(this.domElement), this.settings.negativeSignCharacter) && \"0\" !== this.eventKey && (t = \"-\".concat(t)), this._setValueParts(\"\".concat(t).concat(this.eventKey), i), !0) : this.throwInput = !1;\n        }\n      }, {\n        key: \"_formatValue\",\n        value: function value(e) {\n          var t = M.getElementValue(this.domElement),\n              i = S(this._getUnformattedLeftAndRightPartAroundTheSelection(), 1)[0];\n\n          if ((\"\" === this.settings.digitGroupSeparator || \"\" !== this.settings.digitGroupSeparator && !M.contains(t, this.settings.digitGroupSeparator)) && (\"\" === this.settings.currencySymbol || \"\" !== this.settings.currencySymbol && !M.contains(t, this.settings.currencySymbol))) {\n            var n = S(t.split(this.settings.decimalCharacter), 1)[0],\n                a = \"\";\n            M.isNegative(n, this.settings.negativeSignCharacter) && (a = this.settings.negativeSignCharacter, n = n.replace(this.settings.negativeSignCharacter, \"\"), i = i.replace(\"-\", \"\")), \"\" === a && n.length > this.settings.mIntPos && \"0\" === i.charAt(0) && (i = i.slice(1)), a === this.settings.negativeSignCharacter && n.length > this.settings.mIntNeg && \"0\" === i.charAt(0) && (i = i.slice(1)), this.isTrailingNegative || (i = \"\".concat(a).concat(i));\n          }\n\n          var r = this.constructor._addGroupSeparators(t, this.settings, this.isFocused, this.rawValue),\n              s = r.length;\n\n          if (r) {\n            var o,\n                l = i.split(\"\");\n\n            if ((this.settings.negativePositiveSignPlacement === B.options.negativePositiveSignPlacement.suffix || this.settings.negativePositiveSignPlacement !== B.options.negativePositiveSignPlacement.prefix && this.settings.currencySymbolPlacement === B.options.currencySymbolPlacement.suffix) && l[0] === this.settings.negativeSignCharacter && !this.settings.isNegativeSignAllowed && (l.shift(), (this.eventKey === d.keyName.Backspace || this.eventKey === d.keyName.Delete) && this.caretFix && ((this.settings.currencySymbolPlacement === B.options.currencySymbolPlacement.suffix && this.settings.negativePositiveSignPlacement === B.options.negativePositiveSignPlacement.left || this.settings.currencySymbolPlacement === B.options.currencySymbolPlacement.prefix && this.settings.negativePositiveSignPlacement === B.options.negativePositiveSignPlacement.suffix) && (l.push(this.settings.negativeSignCharacter), this.caretFix = \"keydown\" === e.type), this.settings.currencySymbolPlacement === B.options.currencySymbolPlacement.suffix && this.settings.negativePositiveSignPlacement === B.options.negativePositiveSignPlacement.right))) {\n              var u = this.settings.currencySymbol.split(\"\"),\n                  c = [\"\\\\\", \"^\", \"$\", \".\", \"|\", \"?\", \"*\", \"+\", \"(\", \")\", \"[\"],\n                  h = [];\n              u.forEach(function (e, t) {\n                t = u[e], M.isInArray(t, c) ? h.push(\"\\\\\" + t) : h.push(t);\n              }), this.eventKey === d.keyName.Backspace && \"-\" === this.settings.negativeSignCharacter && h.push(\"-\"), l.push(h.join(\"\")), this.caretFix = \"keydown\" === e.type;\n            }\n\n            for (var m = 0; m < l.length; m++) {\n              l[m].match(\"\\\\d\") || (l[m] = \"\\\\\" + l[m]);\n            }\n\n            o = this.settings.currencySymbolPlacement === B.options.currencySymbolPlacement.suffix ? new RegExp(\"^.*?\".concat(l.join(\".*?\"))) : new RegExp(\"^.*?\".concat(this.settings.currencySymbol).concat(l.join(\".*?\")));\n            var g = r.match(o);\n            g ? (s = g[0].length, this.settings.showPositiveSign && (0 === s && g.input.charAt(0) === this.settings.positiveSignCharacter && (s = 1 === g.input.indexOf(this.settings.currencySymbol) ? this.settings.currencySymbol.length + 1 : 1), 0 === s && g.input.charAt(this.settings.currencySymbol.length) === this.settings.positiveSignCharacter && (s = this.settings.currencySymbol.length + 1)), (0 === s && r.charAt(0) !== this.settings.negativeSignCharacter || 1 === s && r.charAt(0) === this.settings.negativeSignCharacter) && this.settings.currencySymbol && this.settings.currencySymbolPlacement === B.options.currencySymbolPlacement.prefix && (s = this.settings.currencySymbol.length + (M.isNegativeStrict(r, this.settings.negativeSignCharacter) ? 1 : 0))) : (this.settings.currencySymbol && this.settings.currencySymbolPlacement === B.options.currencySymbolPlacement.suffix && (s -= this.settings.currencySymbol.length), this.settings.suffixText && (s -= this.settings.suffixText.length));\n          }\n\n          r !== t && (this._setElementValue(r, !1), this._setCaretPosition(s)), this.formatted = !0;\n        }\n      }]), P(e, t), B;\n    }();\n\n    function N(e, t) {\n      t = t || {\n        bubbles: !1,\n        cancelable: !1,\n        detail: void 0\n      };\n      var i = document.createEvent(\"CustomEvent\");\n      return i.initCustomEvent(e, t.bubbles, t.cancelable, t.detail), i;\n    }\n\n    k.multiple = function (e) {\n      var i = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : null,\n          t = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null,\n          n = [];\n      if (M.isObject(i) && (t = i, i = null), M.isString(e)) e = p(document.querySelectorAll(e));else if (M.isObject(e)) {\n        Object.prototype.hasOwnProperty.call(e, \"rootElement\") || M.throwError(\"The object passed to the 'multiple' function is invalid ; no 'rootElement' attribute found.\");\n        var a = p(e.rootElement.querySelectorAll(\"input\"));\n        e = Object.prototype.hasOwnProperty.call(e, \"exclude\") ? (Array.isArray(e.exclude) || M.throwError(\"The 'exclude' array passed to the 'multiple' function is invalid.\"), M.filterOut(a, e.exclude)) : a;\n      } else M.isArray(e) || M.throwError(\"The given parameters to the 'multiple' function are invalid.\");\n\n      if (0 === e.length) {\n        var r = !0;\n        return !M.isNull(t) && M.isBoolean(t.showWarnings) && (r = t.showWarnings), M.warning(\"No valid DOM elements were given hence no AutoNumeric objects were instantiated.\", r), [];\n      }\n\n      var s = M.isArray(i) && 1 <= i.length,\n          o = !1,\n          l = !1;\n\n      if (s) {\n        var u = w(Number(i[0]));\n        (o = \"number\" === u && !isNaN(Number(i[0]))) || \"string\" !== u && !isNaN(u) && \"object\" !== u || (l = !0);\n      }\n\n      var c,\n          h = !1;\n\n      if (M.isArray(t) && 1 <= t.length) {\n        var m = w(t[0]);\n        \"string\" !== m && \"object\" !== m || (h = !0);\n      }\n\n      c = l ? k.mergeOptions(i) : h ? k.mergeOptions(t) : t;\n      var g,\n          d = M.isNumber(i);\n      return o && (g = i.length), e.forEach(function (e, t) {\n        d ? n.push(new k(e, i, c)) : o && t <= g ? n.push(new k(e, i[t], c)) : n.push(new k(e, null, c));\n      }), n;\n    }, Array.from || (Array.from = function (e) {\n      return [].slice.call(e);\n    }), \"undefined\" != typeof window && \"function\" != typeof window.CustomEvent && (N.prototype = window.Event.prototype, window.CustomEvent = N), k.events = {\n      correctedValue: \"autoNumeric:correctedValue\",\n      initialized: \"autoNumeric:initialized\",\n      invalidFormula: \"autoNumeric:invalidFormula\",\n      invalidValue: \"autoNumeric:invalidValue\",\n      formatted: \"autoNumeric:formatted\",\n      rawValueModified: \"autoNumeric:rawValueModified\",\n      minRangeExceeded: \"autoNumeric:minExceeded\",\n      maxRangeExceeded: \"autoNumeric:maxExceeded\",\n      \"native\": {\n        input: \"input\",\n        change: \"change\"\n      },\n      validFormula: \"autoNumeric:validFormula\"\n    }, Object.freeze(k.events[\"native\"]), Object.freeze(k.events), Object.defineProperty(k, \"events\", {\n      configurable: !1,\n      writable: !1\n    }), k.options = {\n      allowDecimalPadding: {\n        always: !0,\n        never: !1,\n        floats: \"floats\"\n      },\n      alwaysAllowDecimalCharacter: {\n        alwaysAllow: !0,\n        doNotAllow: !1\n      },\n      caretPositionOnFocus: {\n        start: \"start\",\n        end: \"end\",\n        decimalLeft: \"decimalLeft\",\n        decimalRight: \"decimalRight\",\n        doNoForceCaretPosition: null\n      },\n      createLocalList: {\n        createList: !0,\n        doNotCreateList: !1\n      },\n      currencySymbol: {\n        none: \"\",\n        currencySign: \"Â¤\",\n        austral: \"â³\",\n        australCentavo: \"Â¢\",\n        baht: \"à¸¿\",\n        cedi: \"âµ\",\n        cent: \"Â¢\",\n        colon: \"â¡\",\n        cruzeiro: \"â¢\",\n        dollar: \"$\",\n        dong: \"â«\",\n        drachma: \"â¯\",\n        dram: \"âÖ\",\n        european: \"â \",\n        euro: \"â¬\",\n        florin: \"Æ\",\n        franc: \"â£\",\n        guarani: \"â²\",\n        hryvnia: \"â´\",\n        kip: \"â­\",\n        att: \"àº­àº±àº\",\n        lepton: \"Î.\",\n        lira: \"âº\",\n        liraOld: \"â¤\",\n        lari: \"â¾\",\n        mark: \"â³\",\n        mill: \"â¥\",\n        naira: \"â¦\",\n        peseta: \"â§\",\n        peso: \"â±\",\n        pfennig: \"â°\",\n        pound: \"Â£\",\n        real: \"R$\",\n        riel: \"á\",\n        ruble: \"â½\",\n        rupee: \"â¹\",\n        rupeeOld: \"â¨\",\n        shekel: \"âª\",\n        shekelAlt: \"×©×´×ââ\",\n        taka: \"à§³\",\n        tenge: \"â¸\",\n        togrog: \"â®\",\n        won: \"â©\",\n        yen: \"Â¥\"\n      },\n      currencySymbolPlacement: {\n        prefix: \"p\",\n        suffix: \"s\"\n      },\n      decimalCharacter: {\n        comma: \",\",\n        dot: \".\",\n        middleDot: \"Â·\",\n        arabicDecimalSeparator: \"Ù«\",\n        decimalSeparatorKeySymbol: \"â\"\n      },\n      decimalCharacterAlternative: {\n        none: null,\n        comma: \",\",\n        dot: \".\"\n      },\n      decimalPlaces: {\n        none: 0,\n        one: 1,\n        two: 2,\n        three: 3,\n        four: 4,\n        five: 5,\n        six: 6\n      },\n      decimalPlacesRawValue: {\n        useDefault: null,\n        none: 0,\n        one: 1,\n        two: 2,\n        three: 3,\n        four: 4,\n        five: 5,\n        six: 6\n      },\n      decimalPlacesShownOnBlur: {\n        useDefault: null,\n        none: 0,\n        one: 1,\n        two: 2,\n        three: 3,\n        four: 4,\n        five: 5,\n        six: 6\n      },\n      decimalPlacesShownOnFocus: {\n        useDefault: null,\n        none: 0,\n        one: 1,\n        two: 2,\n        three: 3,\n        four: 4,\n        five: 5,\n        six: 6\n      },\n      defaultValueOverride: {\n        doNotOverride: null\n      },\n      digitalGroupSpacing: {\n        two: \"2\",\n        twoScaled: \"2s\",\n        three: \"3\",\n        four: \"4\"\n      },\n      digitGroupSeparator: {\n        comma: \",\",\n        dot: \".\",\n        normalSpace: \" \",\n        thinSpace: \"â\",\n        narrowNoBreakSpace: \"â¯\",\n        noBreakSpace: \"Â \",\n        noSeparator: \"\",\n        apostrophe: \"'\",\n        arabicThousandsSeparator: \"Ù¬\",\n        dotAbove: \"Ë\",\n        privateUseTwo: \"â\"\n      },\n      divisorWhenUnfocused: {\n        none: null,\n        percentage: 100,\n        permille: 1e3,\n        basisPoint: 1e4\n      },\n      emptyInputBehavior: {\n        focus: \"focus\",\n        press: \"press\",\n        always: \"always\",\n        zero: \"zero\",\n        min: \"min\",\n        max: \"max\",\n        \"null\": \"null\"\n      },\n      eventBubbles: {\n        bubbles: !0,\n        doesNotBubble: !1\n      },\n      eventIsCancelable: {\n        isCancelable: !0,\n        isNotCancelable: !1\n      },\n      failOnUnknownOption: {\n        fail: !0,\n        ignore: !1\n      },\n      formatOnPageLoad: {\n        format: !0,\n        doNotFormat: !1\n      },\n      formulaMode: {\n        enabled: !0,\n        disabled: !1\n      },\n      historySize: {\n        verySmall: 5,\n        small: 10,\n        medium: 20,\n        large: 50,\n        veryLarge: 100,\n        insane: Number.MAX_SAFE_INTEGER\n      },\n      invalidClass: \"an-invalid\",\n      isCancellable: {\n        cancellable: !0,\n        notCancellable: !1\n      },\n      leadingZero: {\n        allow: \"allow\",\n        deny: \"deny\",\n        keep: \"keep\"\n      },\n      maximumValue: {\n        tenTrillions: \"10000000000000\",\n        oneBillion: \"1000000000\",\n        zero: \"0\"\n      },\n      minimumValue: {\n        tenTrillions: \"-10000000000000\",\n        oneBillion: \"-1000000000\",\n        zero: \"0\"\n      },\n      modifyValueOnWheel: {\n        modifyValue: !0,\n        doNothing: !1\n      },\n      negativeBracketsTypeOnBlur: {\n        parentheses: \"(,)\",\n        brackets: \"[,]\",\n        chevrons: \"<,>\",\n        curlyBraces: \"{,}\",\n        angleBrackets: \"ã,ã\",\n        japaneseQuotationMarks: \"ï½¢,ï½£\",\n        halfBrackets: \"â¸¤,â¸¥\",\n        whiteSquareBrackets: \"â¦,â§\",\n        quotationMarks: \"â¹,âº\",\n        guillemets: \"Â«,Â»\",\n        none: null\n      },\n      negativePositiveSignPlacement: {\n        prefix: \"p\",\n        suffix: \"s\",\n        left: \"l\",\n        right: \"r\",\n        none: null\n      },\n      negativeSignCharacter: {\n        hyphen: \"-\",\n        minus: \"â\",\n        heavyMinus: \"â\",\n        fullWidthHyphen: \"ï¼\",\n        circledMinus: \"â\",\n        squaredMinus: \"â\",\n        triangleMinus: \"â¨º\",\n        plusMinus: \"Â±\",\n        minusPlus: \"â\",\n        dotMinus: \"â¸\",\n        minusTilde: \"â\",\n        not: \"Â¬\"\n      },\n      noEventListeners: {\n        noEvents: !0,\n        addEvents: !1\n      },\n      onInvalidPaste: {\n        error: \"error\",\n        ignore: \"ignore\",\n        clamp: \"clamp\",\n        truncate: \"truncate\",\n        replace: \"replace\"\n      },\n      outputFormat: {\n        string: \"string\",\n        number: \"number\",\n        dot: \".\",\n        negativeDot: \"-.\",\n        comma: \",\",\n        negativeComma: \"-,\",\n        dotNegative: \".-\",\n        commaNegative: \",-\",\n        none: null\n      },\n      overrideMinMaxLimits: {\n        ceiling: \"ceiling\",\n        floor: \"floor\",\n        ignore: \"ignore\",\n        invalid: \"invalid\",\n        doNotOverride: null\n      },\n      positiveSignCharacter: {\n        plus: \"+\",\n        fullWidthPlus: \"ï¼\",\n        heavyPlus: \"â\",\n        doublePlus: \"â§º\",\n        triplePlus: \"â§»\",\n        circledPlus: \"â\",\n        squaredPlus: \"â\",\n        trianglePlus: \"â¨¹\",\n        plusMinus: \"Â±\",\n        minusPlus: \"â\",\n        dotPlus: \"â\",\n        altHebrewPlus: \"ï¬©\",\n        normalSpace: \" \",\n        thinSpace: \"â\",\n        narrowNoBreakSpace: \"â¯\",\n        noBreakSpace: \"Â \"\n      },\n      rawValueDivisor: {\n        none: null,\n        percentage: 100,\n        permille: 1e3,\n        basisPoint: 1e4\n      },\n      readOnly: {\n        readOnly: !0,\n        readWrite: !1\n      },\n      roundingMethod: {\n        halfUpSymmetric: \"S\",\n        halfUpAsymmetric: \"A\",\n        halfDownSymmetric: \"s\",\n        halfDownAsymmetric: \"a\",\n        halfEvenBankersRounding: \"B\",\n        upRoundAwayFromZero: \"U\",\n        downRoundTowardZero: \"D\",\n        toCeilingTowardPositiveInfinity: \"C\",\n        toFloorTowardNegativeInfinity: \"F\",\n        toNearest05: \"N05\",\n        toNearest05Alt: \"CHF\",\n        upToNext05: \"U05\",\n        downToNext05: \"D05\"\n      },\n      saveValueToSessionStorage: {\n        save: !0,\n        doNotSave: !1\n      },\n      selectNumberOnly: {\n        selectNumbersOnly: !0,\n        selectAll: !1\n      },\n      selectOnFocus: {\n        select: !0,\n        doNotSelect: !1\n      },\n      serializeSpaces: {\n        plus: \"+\",\n        percent: \"%20\"\n      },\n      showOnlyNumbersOnFocus: {\n        onlyNumbers: !0,\n        showAll: !1\n      },\n      showPositiveSign: {\n        show: !0,\n        hide: !1\n      },\n      showWarnings: {\n        show: !0,\n        hide: !1\n      },\n      styleRules: {\n        none: null,\n        positiveNegative: {\n          positive: \"autoNumeric-positive\",\n          negative: \"autoNumeric-negative\"\n        },\n        range0To100With4Steps: {\n          ranges: [{\n            min: 0,\n            max: 25,\n            \"class\": \"autoNumeric-red\"\n          }, {\n            min: 25,\n            max: 50,\n            \"class\": \"autoNumeric-orange\"\n          }, {\n            min: 50,\n            max: 75,\n            \"class\": \"autoNumeric-yellow\"\n          }, {\n            min: 75,\n            max: 100,\n            \"class\": \"autoNumeric-green\"\n          }]\n        },\n        evenOdd: {\n          userDefined: [{\n            callback: function callback(e) {\n              return e % 2 == 0;\n            },\n            classes: [\"autoNumeric-even\", \"autoNumeric-odd\"]\n          }]\n        },\n        rangeSmallAndZero: {\n          userDefined: [{\n            callback: function callback(e) {\n              return -1 <= e && e < 0 ? 0 : 0 === Number(e) ? 1 : 0 < e && e <= 1 ? 2 : null;\n            },\n            classes: [\"autoNumeric-small-negative\", \"autoNumeric-zero\", \"autoNumeric-small-positive\"]\n          }]\n        }\n      },\n      suffixText: {\n        none: \"\",\n        percentage: \"%\",\n        permille: \"â°\",\n        basisPoint: \"â±\"\n      },\n      symbolWhenUnfocused: {\n        none: null,\n        percentage: \"%\",\n        permille: \"â°\",\n        basisPoint: \"â±\"\n      },\n      unformatOnHover: {\n        unformat: !0,\n        doNotUnformat: !1\n      },\n      unformatOnSubmit: {\n        unformat: !0,\n        keepCurrentValue: !1\n      },\n      valuesToStrings: {\n        none: null,\n        zeroDash: {\n          0: \"-\"\n        },\n        oneAroundZero: {\n          \"-1\": \"Min\",\n          1: \"Max\"\n        }\n      },\n      watchExternalChanges: {\n        watch: !0,\n        doNotWatch: !1\n      },\n      wheelOn: {\n        focus: \"focus\",\n        hover: \"hover\"\n      },\n      wheelStep: {\n        progressive: \"progressive\"\n      }\n    }, O = k.options, Object.getOwnPropertyNames(O).forEach(function (e) {\n      \"valuesToStrings\" === e ? Object.getOwnPropertyNames(O.valuesToStrings).forEach(function (e) {\n        M.isIE11() || null === O.valuesToStrings[e] || Object.freeze(O.valuesToStrings[e]);\n      }) : \"styleRules\" !== e && (M.isIE11() || null === O[e] || Object.freeze(O[e]));\n    }), Object.freeze(O), Object.defineProperty(k, \"options\", {\n      configurable: !1,\n      writable: !1\n    }), k.defaultSettings = {\n      allowDecimalPadding: k.options.allowDecimalPadding.always,\n      alwaysAllowDecimalCharacter: k.options.alwaysAllowDecimalCharacter.doNotAllow,\n      caretPositionOnFocus: k.options.caretPositionOnFocus.doNoForceCaretPosition,\n      createLocalList: k.options.createLocalList.createList,\n      currencySymbol: k.options.currencySymbol.none,\n      currencySymbolPlacement: k.options.currencySymbolPlacement.prefix,\n      decimalCharacter: k.options.decimalCharacter.dot,\n      decimalCharacterAlternative: k.options.decimalCharacterAlternative.none,\n      decimalPlaces: k.options.decimalPlaces.two,\n      decimalPlacesRawValue: k.options.decimalPlacesRawValue.useDefault,\n      decimalPlacesShownOnBlur: k.options.decimalPlacesShownOnBlur.useDefault,\n      decimalPlacesShownOnFocus: k.options.decimalPlacesShownOnFocus.useDefault,\n      defaultValueOverride: k.options.defaultValueOverride.doNotOverride,\n      digitalGroupSpacing: k.options.digitalGroupSpacing.three,\n      digitGroupSeparator: k.options.digitGroupSeparator.comma,\n      divisorWhenUnfocused: k.options.divisorWhenUnfocused.none,\n      emptyInputBehavior: k.options.emptyInputBehavior.focus,\n      eventBubbles: k.options.eventBubbles.bubbles,\n      eventIsCancelable: k.options.eventIsCancelable.isCancelable,\n      failOnUnknownOption: k.options.failOnUnknownOption.ignore,\n      formatOnPageLoad: k.options.formatOnPageLoad.format,\n      formulaMode: k.options.formulaMode.disabled,\n      historySize: k.options.historySize.medium,\n      invalidClass: k.options.invalidClass,\n      isCancellable: k.options.isCancellable.cancellable,\n      leadingZero: k.options.leadingZero.deny,\n      maximumValue: k.options.maximumValue.tenTrillions,\n      minimumValue: k.options.minimumValue.tenTrillions,\n      modifyValueOnWheel: k.options.modifyValueOnWheel.modifyValue,\n      negativeBracketsTypeOnBlur: k.options.negativeBracketsTypeOnBlur.none,\n      negativePositiveSignPlacement: k.options.negativePositiveSignPlacement.none,\n      negativeSignCharacter: k.options.negativeSignCharacter.hyphen,\n      noEventListeners: k.options.noEventListeners.addEvents,\n      onInvalidPaste: k.options.onInvalidPaste.error,\n      outputFormat: k.options.outputFormat.none,\n      overrideMinMaxLimits: k.options.overrideMinMaxLimits.doNotOverride,\n      positiveSignCharacter: k.options.positiveSignCharacter.plus,\n      rawValueDivisor: k.options.rawValueDivisor.none,\n      readOnly: k.options.readOnly.readWrite,\n      roundingMethod: k.options.roundingMethod.halfUpSymmetric,\n      saveValueToSessionStorage: k.options.saveValueToSessionStorage.doNotSave,\n      selectNumberOnly: k.options.selectNumberOnly.selectNumbersOnly,\n      selectOnFocus: k.options.selectOnFocus.select,\n      serializeSpaces: k.options.serializeSpaces.plus,\n      showOnlyNumbersOnFocus: k.options.showOnlyNumbersOnFocus.showAll,\n      showPositiveSign: k.options.showPositiveSign.hide,\n      showWarnings: k.options.showWarnings.show,\n      styleRules: k.options.styleRules.none,\n      suffixText: k.options.suffixText.none,\n      symbolWhenUnfocused: k.options.symbolWhenUnfocused.none,\n      unformatOnHover: k.options.unformatOnHover.unformat,\n      unformatOnSubmit: k.options.unformatOnSubmit.keepCurrentValue,\n      valuesToStrings: k.options.valuesToStrings.none,\n      watchExternalChanges: k.options.watchExternalChanges.doNotWatch,\n      wheelOn: k.options.wheelOn.focus,\n      wheelStep: k.options.wheelStep.progressive\n    }, Object.freeze(k.defaultSettings), Object.defineProperty(k, \"defaultSettings\", {\n      configurable: !1,\n      writable: !1\n    });\n    var E = {\n      digitGroupSeparator: k.options.digitGroupSeparator.dot,\n      decimalCharacter: k.options.decimalCharacter.comma,\n      decimalCharacterAlternative: k.options.decimalCharacterAlternative.dot,\n      currencySymbol: \"â¯â¬\",\n      currencySymbolPlacement: k.options.currencySymbolPlacement.suffix,\n      negativePositiveSignPlacement: k.options.negativePositiveSignPlacement.prefix\n    },\n        _ = {\n      digitGroupSeparator: k.options.digitGroupSeparator.comma,\n      decimalCharacter: k.options.decimalCharacter.dot,\n      currencySymbol: k.options.currencySymbol.dollar,\n      currencySymbolPlacement: k.options.currencySymbolPlacement.prefix,\n      negativePositiveSignPlacement: k.options.negativePositiveSignPlacement.right\n    },\n        C = {\n      digitGroupSeparator: k.options.digitGroupSeparator.comma,\n      decimalCharacter: k.options.decimalCharacter.dot,\n      currencySymbol: k.options.currencySymbol.yen,\n      currencySymbolPlacement: k.options.currencySymbolPlacement.prefix,\n      negativePositiveSignPlacement: k.options.negativePositiveSignPlacement.right\n    };\n    M.cloneObject(E).formulaMode = k.options.formulaMode.enabled;\n    var F = M.cloneObject(E);\n    F.minimumValue = 0;\n    var x = M.cloneObject(E);\n    x.maximumValue = 0, x.negativePositiveSignPlacement = k.options.negativePositiveSignPlacement.prefix;\n    var V = M.cloneObject(E);\n    V.digitGroupSeparator = k.options.digitGroupSeparator.normalSpace;\n    var T = M.cloneObject(V);\n    T.minimumValue = 0;\n    var A = M.cloneObject(V);\n    A.maximumValue = 0, A.negativePositiveSignPlacement = k.options.negativePositiveSignPlacement.prefix;\n    var L = M.cloneObject(E);\n    L.currencySymbol = k.options.currencySymbol.none, L.suffixText = \"â¯\".concat(k.options.suffixText.percentage), L.wheelStep = 1e-4, L.rawValueDivisor = k.options.rawValueDivisor.percentage;\n    var I = M.cloneObject(L);\n    I.minimumValue = 0;\n    var B = M.cloneObject(L);\n    B.maximumValue = 0, B.negativePositiveSignPlacement = k.options.negativePositiveSignPlacement.prefix;\n    var D = M.cloneObject(L);\n    D.decimalPlaces = 3;\n    var R = M.cloneObject(I);\n    R.decimalPlaces = 3;\n    var U = M.cloneObject(B);\n    U.decimalPlaces = 3, M.cloneObject(_).formulaMode = k.options.formulaMode.enabled;\n    var j = M.cloneObject(_);\n    j.minimumValue = 0;\n    var z = M.cloneObject(_);\n    z.maximumValue = 0, z.negativePositiveSignPlacement = k.options.negativePositiveSignPlacement.prefix;\n    var K = M.cloneObject(z);\n    K.negativeBracketsTypeOnBlur = k.options.negativeBracketsTypeOnBlur.parentheses;\n    var G = M.cloneObject(_);\n    G.currencySymbol = k.options.currencySymbol.none, G.suffixText = k.options.suffixText.percentage, G.wheelStep = 1e-4, G.rawValueDivisor = k.options.rawValueDivisor.percentage;\n    var W = M.cloneObject(G);\n    W.minimumValue = 0;\n    var H = M.cloneObject(G);\n    H.maximumValue = 0, H.negativePositiveSignPlacement = k.options.negativePositiveSignPlacement.prefix;\n    var Z = M.cloneObject(G);\n    Z.decimalPlaces = 3;\n    var q = M.cloneObject(W);\n    q.decimalPlaces = 3;\n    var $ = M.cloneObject(H);\n    $.decimalPlaces = 3;\n    var J = M.cloneObject(E);\n    J.currencySymbol = k.options.currencySymbol.lira, k.predefinedOptions = {\n      euro: E,\n      euroPos: F,\n      euroNeg: x,\n      euroSpace: V,\n      euroSpacePos: T,\n      euroSpaceNeg: A,\n      percentageEU2dec: L,\n      percentageEU2decPos: I,\n      percentageEU2decNeg: B,\n      percentageEU3dec: D,\n      percentageEU3decPos: R,\n      percentageEU3decNeg: U,\n      dollar: _,\n      dollarPos: j,\n      dollarNeg: z,\n      dollarNegBrackets: K,\n      percentageUS2dec: G,\n      percentageUS2decPos: W,\n      percentageUS2decNeg: H,\n      percentageUS3dec: Z,\n      percentageUS3decPos: q,\n      percentageUS3decNeg: $,\n      French: E,\n      Spanish: E,\n      NorthAmerican: _,\n      British: {\n        digitGroupSeparator: k.options.digitGroupSeparator.comma,\n        decimalCharacter: k.options.decimalCharacter.dot,\n        currencySymbol: k.options.currencySymbol.pound,\n        currencySymbolPlacement: k.options.currencySymbolPlacement.prefix,\n        negativePositiveSignPlacement: k.options.negativePositiveSignPlacement.right\n      },\n      Swiss: {\n        digitGroupSeparator: k.options.digitGroupSeparator.apostrophe,\n        decimalCharacter: k.options.decimalCharacter.dot,\n        currencySymbol: \"â¯CHF\",\n        currencySymbolPlacement: k.options.currencySymbolPlacement.suffix,\n        negativePositiveSignPlacement: k.options.negativePositiveSignPlacement.prefix\n      },\n      Japanese: C,\n      Chinese: C,\n      Brazilian: {\n        digitGroupSeparator: k.options.digitGroupSeparator.dot,\n        decimalCharacter: k.options.decimalCharacter.comma,\n        currencySymbol: k.options.currencySymbol.real,\n        currencySymbolPlacement: k.options.currencySymbolPlacement.prefix,\n        negativePositiveSignPlacement: k.options.negativePositiveSignPlacement.right\n      },\n      Turkish: J,\n      dotDecimalCharCommaSeparator: {\n        digitGroupSeparator: k.options.digitGroupSeparator.comma,\n        decimalCharacter: k.options.decimalCharacter.dot\n      },\n      commaDecimalCharDotSeparator: {\n        digitGroupSeparator: k.options.digitGroupSeparator.dot,\n        decimalCharacter: k.options.decimalCharacter.comma,\n        decimalCharacterAlternative: k.options.decimalCharacterAlternative.dot\n      },\n      integer: {\n        decimalPlaces: 0\n      },\n      integerPos: {\n        minimumValue: k.options.minimumValue.zero,\n        decimalPlaces: 0\n      },\n      integerNeg: {\n        maximumValue: k.options.maximumValue.zero,\n        decimalPlaces: 0\n      },\n      \"float\": {\n        allowDecimalPadding: k.options.allowDecimalPadding.never\n      },\n      floatPos: {\n        allowDecimalPadding: k.options.allowDecimalPadding.never,\n        minimumValue: k.options.minimumValue.zero,\n        maximumValue: k.options.maximumValue.tenTrillions\n      },\n      floatNeg: {\n        allowDecimalPadding: k.options.allowDecimalPadding.never,\n        minimumValue: k.options.minimumValue.tenTrillions,\n        maximumValue: k.options.maximumValue.zero\n      },\n      numeric: {\n        digitGroupSeparator: k.options.digitGroupSeparator.noSeparator,\n        decimalCharacter: k.options.decimalCharacter.dot,\n        currencySymbol: k.options.currencySymbol.none\n      },\n      numericPos: {\n        digitGroupSeparator: k.options.digitGroupSeparator.noSeparator,\n        decimalCharacter: k.options.decimalCharacter.dot,\n        currencySymbol: k.options.currencySymbol.none,\n        minimumValue: k.options.minimumValue.zero,\n        maximumValue: k.options.maximumValue.tenTrillions\n      },\n      numericNeg: {\n        digitGroupSeparator: k.options.digitGroupSeparator.noSeparator,\n        decimalCharacter: k.options.decimalCharacter.dot,\n        currencySymbol: k.options.currencySymbol.none,\n        minimumValue: k.options.minimumValue.tenTrillions,\n        maximumValue: k.options.maximumValue.zero\n      }\n    }, Object.getOwnPropertyNames(k.predefinedOptions).forEach(function (e) {\n      Object.freeze(k.predefinedOptions[e]);\n    }), Object.freeze(k.predefinedOptions), Object.defineProperty(k, \"predefinedOptions\", {\n      configurable: !1,\n      writable: !1\n    }), t[\"default\"] = k;\n  }], a.c = n, a.d = function (e, t, i) {\n    a.o(e, t) || Object.defineProperty(e, t, {\n      enumerable: !0,\n      get: i\n    });\n  }, a.r = function (e) {\n    \"undefined\" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e, Symbol.toStringTag, {\n      value: \"Module\"\n    }), Object.defineProperty(e, \"__esModule\", {\n      value: !0\n    });\n  }, a.t = function (t, e) {\n    if (1 & e && (t = a(t)), 8 & e) return t;\n    if (4 & e && \"object\" == _typeof(t) && t && t.__esModule) return t;\n    var i = Object.create(null);\n    if (a.r(i), Object.defineProperty(i, \"default\", {\n      enumerable: !0,\n      value: t\n    }), 2 & e && \"string\" != typeof t) for (var n in t) {\n      a.d(i, n, function (e) {\n        return t[e];\n      }.bind(null, n));\n    }\n    return i;\n  }, a.n = function (e) {\n    var t = e && e.__esModule ? function () {\n      return e[\"default\"];\n    } : function () {\n      return e;\n    };\n    return a.d(t, \"a\", t), t;\n  }, a.o = function (e, t) {\n    return Object.prototype.hasOwnProperty.call(e, t);\n  }, a.p = \"\", a(a.s = 0)[\"default\"];\n\n  function a(e) {\n    if (n[e]) return n[e].exports;\n    var t = n[e] = {\n      i: e,\n      l: !1,\n      exports: {}\n    };\n    return i[e].call(t.exports, t, t.exports, a), t.l = !0, t.exports;\n  }\n\n  var i, n;\n});","map":null,"metadata":{},"sourceType":"module"}