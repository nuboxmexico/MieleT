{"ast":null,"code":"var _jsxFileName = \"/usr/src/app/javascript/components/finance/FinanceFilter/filters/InvoicedFilter.jsx\",\n    _this = this;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from \"react\";\nimport { FormControl, InputLabel, MenuItem, Select, ListItemText, Checkbox } from '@material-ui/core';\nimport { invoiceStatus } from 'constants/visitService';\nimport { createStructuredSelector } from \"reselect\";\nimport { connect } from \"react-redux\";\nimport { toQueryParams, modifyFilter } from '../../utils';\nimport { useTranslation } from 'react-i18next';\n\nvar InvoicedFilter = function InvoicedFilter(props) {\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var page = props.page,\n      perPage = props.perPage,\n      getServices = props.getServices,\n      setServicesLoading = props.setServicesLoading,\n      options = props.options,\n      modifyFilter = props.modifyFilter,\n      selectedOptions = props.selectedOptions;\n  var invoiced = selectedOptions.invoiced;\n\n  function handleChange(event) {\n    var value = event.target.value;\n    console.log({\n      value: value\n    });\n\n    if (value[value.length - 1] === \"all\") {\n      var newInvoiced = invoiced.length === options.length ? [] : options;\n      modifyFilter(_objectSpread(_objectSpread({}, selectedOptions), {}, {\n        invoiced: newInvoiced\n      }));\n      return;\n    }\n\n    modifyFilter(_objectSpread(_objectSpread({}, selectedOptions), {}, {\n      invoiced: value\n    }));\n  }\n\n  function handleOnClose(_event) {\n    setServicesLoading(true);\n    getServices(page, perPage, '', setServicesLoading, toQueryParams(selectedOptions));\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(FormControl, {\n    variant: \"outlined\",\n    size: \"small\",\n    fullWidth: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(InputLabel, {\n    id: \"invoiced-filter-label\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }\n  }, t('finance.input.invoiced')), /*#__PURE__*/React.createElement(Select, {\n    labelId: \"invoiced-filter-label\",\n    multiple: true,\n    id: \"invoiced-filter\",\n    value: props.selectedOptions.invoiced,\n    label: t('finance.input.invoiced'),\n    onChange: handleChange,\n    onClose: handleOnClose,\n    renderValue: function renderValue() {\n      return invoiced.map(function (option) {\n        return invoiceStatus(option);\n      }).join(', ');\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(MenuItem, {\n    value: \"all\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Checkbox, {\n    color: \"primary\",\n    checked: invoiced.length == options.length,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(ListItemText, {\n    primary: t('finance.input.all'),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }\n  })), options.map(function (option) {\n    return /*#__PURE__*/React.createElement(MenuItem, {\n      key: option,\n      value: option,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Checkbox, {\n      color: \"primary\",\n      checked: invoiced.indexOf(option) > -1,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(ListItemText, {\n      primary: invoiceStatus(option),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }\n    }));\n  }))));\n};\n\nvar structuredSelector = createStructuredSelector({\n  selectedOptions: function selectedOptions(state) {\n    return state.finance_selected_options;\n  },\n  page: function page(state) {\n    return state.services_page;\n  },\n  perPage: function perPage(state) {\n    return state.services_per_page;\n  }\n});\nvar mapDispatchToProps = {\n  modifyFilter: modifyFilter\n};\nexport default connect(structuredSelector, mapDispatchToProps)(InvoicedFilter);","map":{"version":3,"sources":["/usr/src/app/javascript/components/finance/FinanceFilter/filters/InvoicedFilter.jsx"],"names":["React","FormControl","InputLabel","MenuItem","Select","ListItemText","Checkbox","invoiceStatus","createStructuredSelector","connect","toQueryParams","modifyFilter","useTranslation","InvoicedFilter","props","t","page","perPage","getServices","setServicesLoading","options","selectedOptions","invoiced","handleChange","event","value","target","console","log","length","newInvoiced","handleOnClose","_event","map","option","join","indexOf","structuredSelector","state","finance_selected_options","services_page","services_per_page","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { FormControl, InputLabel, MenuItem, Select, ListItemText, Checkbox } from '@material-ui/core';\nimport { invoiceStatus } from 'constants/visitService'\nimport { createStructuredSelector } from \"reselect\"\nimport { connect } from \"react-redux\"\nimport { toQueryParams, modifyFilter } from '../../utils'\nimport { useTranslation } from 'react-i18next';\n\nconst InvoicedFilter = (props) => {\n  const {t} = useTranslation();\n  const { page, perPage, getServices, setServicesLoading, options, modifyFilter, selectedOptions } = props;\n  const { invoiced } = selectedOptions;\n\n  function handleChange(event) {\n    const { target: { value } } = event;\n    console.log({ value });\n    if (value[value.length - 1] === \"all\") {\n      const newInvoiced = invoiced.length === options.length ? [] : options\n      modifyFilter({ ...selectedOptions, invoiced: newInvoiced });\n      return;\n    }\n    modifyFilter({ ...selectedOptions, invoiced: value })\n  }\n\n  function handleOnClose(_event) {\n    setServicesLoading(true);\n    getServices(page, perPage, '', setServicesLoading, toQueryParams(selectedOptions));\n  }\n\n  return (\n    <>\n      <FormControl variant='outlined' size='small' fullWidth>\n        <InputLabel id=\"invoiced-filter-label\">{t('finance.input.invoiced')}</InputLabel>\n        <Select\n          labelId=\"invoiced-filter-label\"\n          multiple\n          id=\"invoiced-filter\"\n          value={props.selectedOptions.invoiced}\n          label={t('finance.input.invoiced')}\n          onChange={handleChange}\n          onClose={handleOnClose}\n          renderValue={() => invoiced.map(option => invoiceStatus(option)).join(', ')}\n        >\n          <MenuItem value=\"all\" >\n            <Checkbox color=\"primary\" checked={invoiced.length == options.length} />\n            <ListItemText primary={t('finance.input.all')} />\n          </MenuItem>\n          {\n            options.map(option => (\n              <MenuItem key={option} value={option}>\n                <Checkbox color='primary' checked={invoiced.indexOf(option) > -1} />\n                <ListItemText primary={invoiceStatus(option)} />\n              </MenuItem>\n            ))\n          }\n\n        </Select>\n      </FormControl>\n    </>\n  );\n};\n\nconst structuredSelector = createStructuredSelector({\n  selectedOptions: state => state.finance_selected_options,\n  page: state => state.services_page,\n  perPage: state => state.services_per_page,\n});\n\nconst mapDispatchToProps = { modifyFilter }\n\nexport default connect(structuredSelector, mapDispatchToProps)(InvoicedFilter);\n"]},"metadata":{},"sourceType":"module"}