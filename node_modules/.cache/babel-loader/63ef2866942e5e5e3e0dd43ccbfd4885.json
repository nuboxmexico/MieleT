{"ast":null,"code":"var _jsxFileName = \"/usr/src/app/javascript/components/calendars/EventColors.jsx\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nimport React, { useState, useEffect } from \"react\";\nimport { Box } from \"@material-ui/core\";\nimport StopRoundedIcon from '@material-ui/icons/StopRounded';\nimport Skeleton from '@material-ui/lab/Skeleton';\nimport { headers } from \"constants/csrf\";\nimport axios from 'axios';\nimport { useTranslation } from 'react-i18next';\nexport default function EventColors() {\n  var _this = this;\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      colors = _useState2[0],\n      setColors = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      load = _useState4[0],\n      setLoad = _useState4[1];\n\n  var styles = {\n    description: {\n      fontSize: '14px',\n      fontWeigt: '300',\n      textAlign: 'left'\n    }\n  };\n\n  function getEventColors() {\n    return _getEventColors.apply(this, arguments);\n  }\n\n  function _getEventColors() {\n    _getEventColors = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var _yield$axios$get, data;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return axios.get('api/v1/calendar_events/colors', {\n                headers: headers\n              });\n\n            case 2:\n              _yield$axios$get = _context.sent;\n              data = _yield$axios$get.data;\n              setColors(data);\n              setLoad(true);\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _getEventColors.apply(this, arguments);\n  }\n\n  useEffect(function () {\n    function fetchData() {\n      getEventColors();\n    }\n\n    fetchData();\n  }, []);\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 5\n    }\n  }, !load && /*#__PURE__*/React.createElement(Skeleton, {\n    height: 21,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 5\n    }\n  }) || Object.keys(colors).map(function (key, index) {\n    return /*#__PURE__*/React.createElement(Box, {\n      key: index,\n      mr: 3,\n      component: \"span\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(StopRoundedIcon, {\n      fontSize: \"large\",\n      style: {\n        color: colors[key],\n        fontSize: '28px'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      styles: styles.description,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 11\n      }\n    }, t(\"calendar.\".concat(key))));\n  }));\n}","map":{"version":3,"sources":["/usr/src/app/javascript/components/calendars/EventColors.jsx"],"names":["React","useState","useEffect","Box","StopRoundedIcon","Skeleton","headers","axios","useTranslation","EventColors","t","colors","setColors","load","setLoad","styles","description","fontSize","fontWeigt","textAlign","getEventColors","get","data","fetchData","Object","keys","map","key","index","color"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,SAAQC,GAAR,QAAkB,mBAAlB;AACA,OAAOC,eAAP,MAA4B,gCAA5B;AACA,OAAOC,QAAP,MAAqB,2BAArB;AACA,SAAQC,OAAR,QAAsB,gBAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,cAAT,QAA+B,eAA/B;AAEA,eAAe,SAASC,WAAT,GAAuB;AAAA;;AACpC,wBAAYD,cAAc,EAA1B;AAAA,MAAOE,CAAP,mBAAOA,CAAP;;AACA,kBAA4BT,QAAQ,CAAC,EAAD,CAApC;AAAA;AAAA,MAAOU,MAAP;AAAA,MAAeC,SAAf;;AACA,mBAAwBX,QAAQ,CAAC,KAAD,CAAhC;AAAA;AAAA,MAAOY,IAAP;AAAA,MAAaC,OAAb;;AACA,MAAMC,MAAM,GAAG;AACbC,IAAAA,WAAW,EAAE;AACXC,MAAAA,QAAQ,EAAE,MADC;AAEXC,MAAAA,SAAS,EAAE,KAFA;AAGXC,MAAAA,SAAS,EAAE;AAHA;AADA,GAAf;;AAJoC,WAWrBC,cAXqB;AAAA;AAAA;;AAAA;AAAA,+EAWpC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACuBb,KAAK,CAACc,GAAN,CAAU,+BAAV,EAA2C;AAACf,gBAAAA,OAAO,EAAEA;AAAV,eAA3C,CADvB;;AAAA;AAAA;AACSgB,cAAAA,IADT,oBACSA,IADT;AAEEV,cAAAA,SAAS,CAACU,IAAD,CAAT;AACAR,cAAAA,OAAO,CAAC,IAAD,CAAP;;AAHF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAXoC;AAAA;AAAA;;AAiBpCZ,EAAAA,SAAS,CAAC,YAAM;AACd,aAASqB,SAAT,GAAqB;AACnBH,MAAAA,cAAc;AACf;;AACDG,IAAAA,SAAS;AACV,GALQ,EAKN,EALM,CAAT;AAOA,sBACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,CAACV,IAAF,iBACF,oBAAC,QAAD;AAAU,IAAA,MAAM,EAAE,EAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADE,IAGAW,MAAM,CAACC,IAAP,CAAYd,MAAZ,EAAoBe,GAApB,CAAwB,UAACC,GAAD,EAAMC,KAAN;AAAA,wBACtB,oBAAC,GAAD;AAAK,MAAA,GAAG,EAAEA,KAAV;AAAiB,MAAA,EAAE,EAAE,CAArB;AAAwB,MAAA,SAAS,EAAC,MAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,eAAD;AAAiB,MAAA,QAAQ,EAAC,OAA1B;AAAkC,MAAA,KAAK,EAAE;AAACC,QAAAA,KAAK,EAAElB,MAAM,CAACgB,GAAD,CAAd;AAAqBV,QAAAA,QAAQ,EAAE;AAA/B,OAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,eAEE;AAAM,MAAA,MAAM,EAAEF,MAAM,CAACC,WAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGN,CAAC,oBAAaiB,GAAb,EADJ,CAFF,CADsB;AAAA,GAAxB,CAJF,CADF;AAgBD","sourcesContent":["import React, {useState, useEffect} from \"react\"\nimport {Box} from \"@material-ui/core\"\nimport StopRoundedIcon from '@material-ui/icons/StopRounded';\nimport Skeleton from '@material-ui/lab/Skeleton';\nimport {headers} from \"constants/csrf\"\nimport axios from 'axios'\nimport { useTranslation } from 'react-i18next';\n\nexport default function EventColors() {\n  const {t} = useTranslation();\n  const [colors, setColors] = useState([])\n  const [load, setLoad] = useState(false)\n  const styles = {\n    description: {\n      fontSize: '14px',\n      fontWeigt: '300',\n      textAlign: 'left'\n    }\n  };\n  async function getEventColors() {\n    const {data} = await axios.get('api/v1/calendar_events/colors', {headers: headers})\n    setColors(data)\n    setLoad(true)\n  }\n\n  useEffect(() => {\n    function fetchData() {\n      getEventColors()\n    }\n    fetchData()\n  }, [])\n\n  return (\n    <React.Fragment>\n    { (!load) &&\n    <Skeleton height={21} />\n    ||\n      Object.keys(colors).map((key, index) =>\n        <Box key={index} mr={3} component=\"span\">\n          <StopRoundedIcon fontSize=\"large\" style={{color: colors[key], fontSize: '28px'}} />\n          <span styles={styles.description}>\n            {t(`calendar.${key}`)}\n          </span>\n        </Box>\n      )\n    }    \n    </React.Fragment>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}