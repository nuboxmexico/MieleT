{"ast":null,"code":"import { useEffect, useRef, useCallback } from 'react';\n/**\n * A timer hook\n * @param fn Timer callback function\n * @param ms Milliseconds of the timer\n * @param open Whether to open the timer\n */\n\nfunction useTimeout(fn, ms, open) {\n  if (ms === void 0) {\n    ms = 0;\n  }\n\n  if (open === void 0) {\n    open = true;\n  }\n\n  var timeout = useRef();\n  var clear = useCallback(function () {\n    timeout.current && clearTimeout(timeout.current);\n  }, []);\n  var set = useCallback(function () {\n    if (open) {\n      timeout.current = setTimeout(function () {\n        return fn === null || fn === void 0 ? void 0 : fn();\n      }, ms);\n    }\n  }, [ms, fn, open]);\n  useEffect(function () {\n    set();\n    return clear;\n  }, [fn, ms, open, clear, set]);\n  return {\n    clear: clear,\n    reset: set\n  };\n}\n\nexport default useTimeout;","map":null,"metadata":{},"sourceType":"module"}