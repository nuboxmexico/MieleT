{"ast":null,"code":"var _jsxFileName = \"/usr/src/app/javascript/components/customers/AdditionalAddressForm.jsx\";\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nimport React, { useState, useEffect } from 'react';\nimport ReactDOM from 'react-dom';\nimport { connect } from \"react-redux\";\nimport { createStructuredSelector } from \"reselect\";\nimport { flash_alert } from 'components/App';\nimport ShowCustomer from \"components/customers/ShowCustomer\";\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport IconButton from '@material-ui/core/IconButton';\nimport Input from '@material-ui/core/Input';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport { country_names_g, countries_g, street_types_mx_g, street_types_cl_g } from 'components/customers/CustomerForm';\nimport { useTranslation } from 'react-i18next';\n\nfunction AdditionalAddressForm(props) {\n  var _this = this;\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      personCheck = _useState2[0],\n      setPersonCheck = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      zipcodeCheck = _useState4[0],\n      setZipcodeCheck = _useState4[1];\n\n  var _useState5 = useState(\"Estado\"),\n      _useState6 = _slicedToArray(_useState5, 2),\n      stateLabel = _useState6[0],\n      setStateLabel = _useState6[1];\n\n  var _useState7 = useState(\"\"),\n      _useState8 = _slicedToArray(_useState7, 2),\n      colonyCheck = _useState8[0],\n      setColonyCheck = _useState8[1];\n\n  var _useState9 = useState(\"\"),\n      _useState10 = _slicedToArray(_useState9, 2),\n      delegationCheck = _useState10[0],\n      setDelegationCheck = _useState10[1];\n\n  var _useState11 = useState(\"Número Exterior\"),\n      _useState12 = _slicedToArray(_useState11, 2),\n      extNumberLabel = _useState12[0],\n      setExtNumberLabel = _useState12[1];\n\n  var _useState13 = useState(\"Número Interior\"),\n      _useState14 = _slicedToArray(_useState13, 2),\n      intNumberLabel = _useState14[0],\n      setIntNumberLabel = _useState14[1];\n\n  var _useState15 = useState([]),\n      _useState16 = _slicedToArray(_useState15, 2),\n      street_types = _useState16[0],\n      setStreetTypes = _useState16[1];\n\n  var _useState17 = useState(\"Nombre\"),\n      _useState18 = _slicedToArray(_useState17, 2),\n      namesLabel = _useState18[0],\n      setNamesLabel = _useState18[1];\n\n  var _useState19 = useState(\"\"),\n      _useState20 = _slicedToArray(_useState19, 2),\n      personPCheck = _useState20[0],\n      setPersonPCheck = _useState20[1];\n\n  var _useState21 = useState(\"\"),\n      _useState22 = _slicedToArray(_useState21, 2),\n      personMCheck = _useState22[0],\n      setPersonMCheck = _useState22[1]; // CHECK COUNTRY_ZIPCODE_REQUIRED\n\n\n  var _useState23 = useState(props.zipcodeParentRequired),\n      _useState24 = _slicedToArray(_useState23, 2),\n      zipcodeRequired = _useState24[0],\n      setZipcodeRequired = _useState24[1];\n\n  useEffect(function () {\n    handleCountryInputs(props.country);\n    handlePersonInputs(props.country, props.selectedPerson);\n  }, [props.country]);\n\n  function handlePersonInputs(country_iso, person_type) {\n    if (person_type == \"person_m\" && country_iso == \"MX\") {\n      setPersonPCheck(\"hidden\");\n      setPersonMCheck(\"\");\n      setNamesLabel(\"Alias\");\n    } else {\n      setPersonPCheck(\"\");\n      setPersonMCheck(\"hidden\");\n      setNamesLabel(\"Alias\");\n    }\n  }\n\n  function handleCountryInputs(country_iso) {\n    if (country_iso == \"CL\") {\n      setPersonCheck(\"hidden\");\n      setZipcodeCheck(\"hidden\");\n      setDelegationCheck(\"hidden\");\n      setColonyCheck(\"hidden\");\n      setStateLabel(\"Comuna/Región\");\n      setExtNumberLabel(\"Número\");\n      setIntNumberLabel(\"Depto\");\n      setStreetTypes(street_types_cl_g); //props.fetchadministrativeDemarcationsData(props.country, \"\", \"\", \"\") \n    } else {\n      setPersonCheck(\"\");\n      setZipcodeCheck(\"\");\n      setDelegationCheck(\"\");\n      setColonyCheck(\"\");\n      setStateLabel(\"Estado\");\n      setExtNumberLabel(\"Número Exterior\");\n      setIntNumberLabel(\"Número Interior\");\n      setStreetTypes(street_types_mx_g);\n    }\n  }\n\n  var handleZipcodeChange = function handleZipcodeChange(event) {\n    props.setZipcode(event.target.value);\n\n    if (event.target.value.length > 3) {\n      setZipcodeRequired(false);\n      props.fetchadministrativeDemarcationsData(props.country, \"\", event.target.value, props.colony);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    className: \"custom-form\",\n    onSubmit: props.handleSubmit,\n    onKeyPress: function onKeyPress(e) {\n      e.key === 'Enter' && e.preventDefault();\n    },\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    sm: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    fullWidth: true,\n    variant: \"outlined\",\n    label: namesLabel,\n    name: \"firstname\",\n    value: props.name,\n    onChange: function onChange(e) {\n      return props.setName(e.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 29\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    className: zipcodeCheck,\n    item: true,\n    xs: 12,\n    sm: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    fullWidth: true,\n    error: zipcodeRequired,\n    variant: \"outlined\",\n    label: t('globalEditForm.zipcode'),\n    name: \"zipcode\",\n    value: props.zipcode,\n    onChange: function onChange(e) {\n      return handleZipcodeChange(e);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 29\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    sm: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Autocomplete, {\n    id: \"state-select\",\n    options: props.administrativeDemarcations,\n    value: props.administrativeDemarcationsValue,\n    disableListWrap: true,\n    disabled: zipcodeRequired,\n    onChange: function onChange(event, newValue) {\n      if (newValue) {\n        if (typeof newValue === 'string') {\n          props.setState(newValue);\n        } else if (newValue && newValue.inputValue) {\n          props.setState(newValue.value);\n          props.setAdministrativeDemarcationsValue(newValue);\n        } else {\n          props.setState(newValue.value);\n          props.setAdministrativeDemarcationsValue(newValue);\n        }\n      }\n    },\n    selectOnFocus: true,\n    clearOnBlur: true,\n    handleHomeEndKeys: true,\n    freeSolo: true,\n    getOptionLabel: function getOptionLabel(option) {\n      return option.label;\n    },\n    renderInput: function renderInput(params) {\n      return /*#__PURE__*/React.createElement(TextField, Object.assign({}, params, {\n        fullWidth: true,\n        label: stateLabel,\n        variant: \"outlined\",\n        name: \"state\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 58\n        }\n      }));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 29\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    className: delegationCheck,\n    item: true,\n    xs: 12,\n    sm: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    fullWidth: true,\n    variant: \"outlined\",\n    label: t('globalEditForm.delegation'),\n    name: \"delegation\",\n    value: props.delegation,\n    onChange: function onChange(e) {\n      return props.setDelegation(e.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 29\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    className: colonyCheck,\n    item: true,\n    xs: 12,\n    sm: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Autocomplete, {\n    id: \"colony-select\",\n    options: props.colonies,\n    value: props.coloniesValue,\n    disableListWrap: true,\n    onChange: function onChange(event, newValue) {\n      if (typeof newValue === 'string') {\n        props.setColony(newValue);\n      } else if (newValue && newValue.value) {\n        props.setColony(newValue.label);\n        props.setColoniesValue(newValue);\n      } else {\n        props.setColony(newValue.label);\n        props.setColoniesValue(newValue);\n      }\n    },\n    selectOnFocus: true,\n    clearOnBlur: true,\n    handleHomeEndKeys: true,\n    freeSolo: true,\n    getOptionLabel: function getOptionLabel(option) {\n      return option.label;\n    },\n    renderInput: function renderInput(params) {\n      return /*#__PURE__*/React.createElement(TextField, Object.assign({}, params, {\n        fullWidth: true,\n        label: t('globalEditForm.colony'),\n        variant: \"outlined\",\n        name: \"colony\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 58\n        }\n      }));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 29\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    sm: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(FormControl, {\n    variant: \"outlined\",\n    className: \"MuiFormControl-fullWidth\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(InputLabel, {\n    id: \"street_type-simple-select-outlined-label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 33\n    }\n  }, t('globalEditForm.StreetType')), /*#__PURE__*/React.createElement(Select, {\n    labelId: \"street_type-simple-select-outlined-label\",\n    id: \"street_type-simple-select-outlined\",\n    value: props.street_type,\n    onChange: function onChange(e) {\n      return props.setStreettype(e.target.value);\n    },\n    label: t('globalEditForm.Streettype'),\n    name: \"street_type\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 33\n    }\n  }, street_types.map(function (value) {\n    return /*#__PURE__*/React.createElement(MenuItem, {\n      key: value,\n      value: value,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 37\n      }\n    }, value);\n  })))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    sm: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    fullWidth: true,\n    variant: \"outlined\",\n    label: t('globalEditForm.streetName'),\n    name: \"street_name\",\n    value: props.street_name,\n    onChange: function onChange(e) {\n      return props.setStreetName(e.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 29\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    sm: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    fullWidth: true,\n    variant: \"outlined\",\n    label: extNumberLabel,\n    name: \"ext_number\",\n    value: props.ext_number,\n    onChange: function onChange(e) {\n      return props.setExtNumber(e.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 29\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    sm: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    fullWidth: true,\n    variant: \"outlined\",\n    label: intNumberLabel,\n    name: \"int_number\",\n    value: props.int_number,\n    onChange: function onChange(e) {\n      return props.setIntNumber(e.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 29\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    container: true,\n    direction: \"row\",\n    justify: \"flex-end\",\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 23\n    }\n  }, /*#__PURE__*/React.createElement(FormControl, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 31\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    id: \"additional-save\",\n    type: \"submit\",\n    variant: \"contained\",\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 35\n    }\n  }, t('globalText.save')))))));\n}\n\nvar structuredSelector = createStructuredSelector({});\nvar mapDispatchToProps = {};\nexport default connect(structuredSelector, mapDispatchToProps)(AdditionalAddressForm);","map":{"version":3,"sources":["/usr/src/app/javascript/components/customers/AdditionalAddressForm.jsx"],"names":["React","useState","useEffect","ReactDOM","connect","createStructuredSelector","flash_alert","ShowCustomer","OutlinedInput","InputLabel","FormControl","IconButton","Input","TextField","Button","Grid","Autocomplete","Select","MenuItem","ListItemText","country_names_g","countries_g","street_types_mx_g","street_types_cl_g","useTranslation","AdditionalAddressForm","props","t","personCheck","setPersonCheck","zipcodeCheck","setZipcodeCheck","stateLabel","setStateLabel","colonyCheck","setColonyCheck","delegationCheck","setDelegationCheck","extNumberLabel","setExtNumberLabel","intNumberLabel","setIntNumberLabel","street_types","setStreetTypes","namesLabel","setNamesLabel","personPCheck","setPersonPCheck","personMCheck","setPersonMCheck","zipcodeParentRequired","zipcodeRequired","setZipcodeRequired","handleCountryInputs","country","handlePersonInputs","selectedPerson","country_iso","person_type","handleZipcodeChange","event","setZipcode","target","value","length","fetchadministrativeDemarcationsData","colony","handleSubmit","e","key","preventDefault","name","setName","zipcode","administrativeDemarcations","administrativeDemarcationsValue","newValue","setState","inputValue","setAdministrativeDemarcationsValue","option","label","params","delegation","setDelegation","colonies","coloniesValue","setColony","setColoniesValue","street_type","setStreettype","map","street_name","setStreetName","ext_number","setExtNumber","int_number","setIntNumber","structuredSelector","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport ReactDOM from 'react-dom'\nimport { connect } from \"react-redux\"\nimport { createStructuredSelector } from \"reselect\"\nimport { flash_alert } from 'components/App';\nimport ShowCustomer from \"components/customers/ShowCustomer\";\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport IconButton from '@material-ui/core/IconButton';\nimport Input from '@material-ui/core/Input';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport {country_names_g, countries_g, street_types_mx_g, street_types_cl_g} from 'components/customers/CustomerForm';\nimport {useTranslation} from 'react-i18next';\n\nfunction AdditionalAddressForm(props){\n    const {t} = useTranslation();\n    const [personCheck, setPersonCheck] = useState(\"\");\n    const [zipcodeCheck, setZipcodeCheck] = useState(\"\");\n    const [stateLabel, setStateLabel] = useState(\"Estado\");\n    const [colonyCheck, setColonyCheck] = useState(\"\");\n\tconst [delegationCheck, setDelegationCheck] = useState(\"\");\n\tconst [extNumberLabel, setExtNumberLabel] = useState(\"Número Exterior\");\n\tconst [intNumberLabel, setIntNumberLabel] = useState(\"Número Interior\");\n    const [street_types, setStreetTypes] = useState([]);\n    const [namesLabel, setNamesLabel] = useState(\"Nombre\");\n\tconst [personPCheck, setPersonPCheck] = useState(\"\");\n    const [personMCheck, setPersonMCheck] = useState(\"\");\n    \n    // CHECK COUNTRY_ZIPCODE_REQUIRED\n    const [zipcodeRequired, setZipcodeRequired] = useState(props.zipcodeParentRequired);\n    \n    useEffect(() => {\n\t\thandleCountryInputs(props.country)\n        handlePersonInputs(props.country, props.selectedPerson)\n    },[props.country]);\n    \n    function handlePersonInputs(country_iso, person_type){\n\t\t\n\t\tif (person_type == \"person_m\" && country_iso == \"MX\"){\n\t\t\tsetPersonPCheck(\"hidden\")\n\t\t\tsetPersonMCheck(\"\")\n\t\t\tsetNamesLabel(\"Alias\")\n\t\t}else{\n\t\t\tsetPersonPCheck(\"\")\n\t\t\tsetPersonMCheck(\"hidden\")\n\t\t\tsetNamesLabel(\"Alias\")\n\t\t}\n\t}\n\t\n\tfunction handleCountryInputs(country_iso){\n\t\tif(country_iso == \"CL\"){\n\t\t\tsetPersonCheck(\"hidden\");\n\t\t\tsetZipcodeCheck(\"hidden\");\n\t\t\tsetDelegationCheck(\"hidden\");\n\t\t\tsetColonyCheck(\"hidden\");\n\t\t\tsetStateLabel(\"Comuna/Región\");\n\t\t\tsetExtNumberLabel(\"Número\");\n\t\t\tsetIntNumberLabel(\"Depto\");\n\t\t\tsetStreetTypes(street_types_cl_g);\n\t\t\t//props.fetchadministrativeDemarcationsData(props.country, \"\", \"\", \"\") \n\t\t}else{\n\t\t\tsetPersonCheck(\"\");\n\t\t\tsetZipcodeCheck(\"\");\n\t\t\tsetDelegationCheck(\"\");\n\t\t\tsetColonyCheck(\"\");\n\t\t\tsetStateLabel(\"Estado\");\n\t\t\tsetExtNumberLabel(\"Número Exterior\");\n\t\t\tsetIntNumberLabel(\"Número Interior\");\n\t\t\tsetStreetTypes(street_types_mx_g);\n\t\t}\n    }\n    \n    const handleZipcodeChange = (event) => {\n\t\tprops.setZipcode(event.target.value);\n        if (event.target.value.length > 3){\n            setZipcodeRequired(false)\n            props.fetchadministrativeDemarcationsData(props.country, \"\", event.target.value, props.colony)\n        }\n\t}\n\n    return (\n        <React.Fragment>\n              <form className=\"custom-form\" onSubmit={props.handleSubmit} onKeyPress={(e) => { e.key === 'Enter' && e.preventDefault(); }} autoComplete=\"off\">\n                  \n                  <Grid container spacing={3}>\n\n\n                        <Grid item xs={12} sm={6}>\n                            <TextField fullWidth variant=\"outlined\" label={namesLabel} name=\"firstname\" value={props.name} onChange={(e) => props.setName(e.target.value)}/>\n                        </Grid>\n                        <Grid className={zipcodeCheck} item xs={12} sm={6}>\n                            <TextField fullWidth error={zipcodeRequired} variant=\"outlined\" label={t('globalEditForm.zipcode')} name=\"zipcode\" value={props.zipcode} onChange={(e) => handleZipcodeChange(e)}/>\n                        </Grid>\n                        <Grid item xs={12} sm={6}>\n                            <Autocomplete\n                                id=\"state-select\"\n                                \n                                options={props.administrativeDemarcations}\n                                value={props.administrativeDemarcationsValue}\n                                disableListWrap\n                                disabled={zipcodeRequired}\n                                onChange={(event, newValue) => {\n                                    if(newValue){\n                                        if (typeof newValue === 'string') {\n                                            props.setState(newValue)\n                                        } else if (newValue && newValue.inputValue) {\n                                            props.setState(newValue.value)\n                                            props.setAdministrativeDemarcationsValue(newValue)  \n                                        } else {\n                                            props.setState(newValue.value)\n                                            props.setAdministrativeDemarcationsValue(newValue)  \n                                        }\n                                    }\n                                }}\n                                selectOnFocus\n                                clearOnBlur\n                                handleHomeEndKeys\n                                freeSolo\n                                getOptionLabel={(option) => option.label}\n                                renderInput={(params) => <TextField {...params} fullWidth label={stateLabel} variant=\"outlined\" name=\"state\"/>}\n                            />\n                        </Grid>\n\n\n                        <Grid className={delegationCheck} item xs={12} sm={6}>\n                            <TextField fullWidth variant=\"outlined\" label={t('globalEditForm.delegation')} name=\"delegation\" value={props.delegation} onChange={(e) => props.setDelegation(e.target.value)}/>\n                        </Grid>\n                        <Grid className={colonyCheck} item xs={12} sm={6}>\n                            <Autocomplete\n                                id=\"colony-select\"\n                                \n                                options={props.colonies}\n                                value={props.coloniesValue}\n                                disableListWrap\n                                onChange={(event, newValue) => {\n                                    if (typeof newValue === 'string') {\n                                        props.setColony(newValue)\n                                    } else if (newValue && newValue.value) {\n                                        props.setColony(newValue.label)\n                                        props.setColoniesValue(newValue)  \n                                    } else {\n                                        props.setColony(newValue.label)\n                                        props.setColoniesValue(newValue)  \n                                    }\n                                }}\n                                selectOnFocus\n                                clearOnBlur\n                                handleHomeEndKeys\n                                freeSolo\n                                getOptionLabel={(option) => option.label}\n                                renderInput={(params) => <TextField {...params} fullWidth label={t('globalEditForm.colony')}variant=\"outlined\" name=\"colony\"/>}\n                            />\n                        </Grid>\n                            \n                        <Grid item xs={12} sm={6}>\n                            <FormControl variant=\"outlined\" className=\"MuiFormControl-fullWidth\">\n                                <InputLabel id=\"street_type-simple-select-outlined-label\">{t('globalEditForm.StreetType')}</InputLabel>\n                                <Select\n                                labelId=\"street_type-simple-select-outlined-label\"\n                                id=\"street_type-simple-select-outlined\"\n                                value={props.street_type}\n                                onChange={(e) => props.setStreettype(e.target.value)}\n                                label={t('globalEditForm.Streettype')}\n                                name=\"street_type\"\n                                >\n                                {street_types.map((value) => (\n                                    <MenuItem key={value} value={value}>{value}</MenuItem>\n                                ))}\n                                </Select>\n                            </FormControl>\n                        </Grid>\n\n                        <Grid item xs={12} sm={6}>\n                            <TextField fullWidth variant=\"outlined\" label={t('globalEditForm.streetName')} name=\"street_name\" value={props.street_name} onChange={(e) => props.setStreetName(e.target.value)}/>\n                        </Grid>\n                        \n                        <Grid item xs={12} sm={6}>\n                            <TextField fullWidth variant=\"outlined\" label={extNumberLabel} name=\"ext_number\" value={props.ext_number} onChange={(e) => props.setExtNumber(e.target.value)}/>\n                        </Grid>\n                        <Grid item xs={12} sm={6}>\n                            <TextField fullWidth variant=\"outlined\" label={intNumberLabel} name=\"int_number\" value={props.int_number} onChange={(e) => props.setIntNumber(e.target.value)}/>\n\t\t\t\t\t    </Grid>\n                      <Grid item xs={12} container\n                              direction=\"row\"\n                              justify=\"flex-end\"\n                              alignItems=\"center\">\n                              <FormControl>\n                                  <Button id=\"additional-save\" type=\"submit\" variant=\"contained\" color=\"primary\">\n                                  {t('globalText.save')}\n                                  </Button>\n                              </FormControl>\n                      </Grid>\t\n                  </Grid>\n              </form>\n      </React.Fragment>\n  );\n\n}\n\nconst structuredSelector = createStructuredSelector({});\nconst mapDispatchToProps = {};\nexport default connect(structuredSelector, mapDispatchToProps)(AdditionalAddressForm)\n"]},"metadata":{},"sourceType":"module"}